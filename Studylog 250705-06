# Organize basic concept of JAVA with spreadsheet
# https://docs.google.com/spreadsheets/d/1kK9GKm_H-glZk89DwNYc4hZLvqG5bQsfGHAIoxTmFBM/edit?usp=sharing

# 인증과 인가에 대한 이해 Study of authorization & authentication
# https://f-lab.kr/insight/jwt-vs-session-authentication-20240823https://f-lab.kr/insight/jwt-vs-session-authentication-20240823
# https://httpd.apache.org/docs/2.2/ko/howto/auth.html

인증(Authentication)과 인가(Authorization)의 차이
인가 (Authorization)
- 인증된 사용자authenticated user가 시스템 리소스에 접근하거나 특정 작업을 수행할 수 있도록 권한을 부여하는 프로세스

인증(Authentication)이 '누구인가'를 확인하는 과정이라면, 인가는 '무엇을 할 수 있는가'를 결정하는 과정이다.
- 지금 접속하는 너는 누구인가? -> 인증 Authentication
- role A or role B는 각각 무엇을 할 수 있는가? -> 인가 Authorization

자세한 설명:
인증: 사용자의 신원을 확인하는 과정. 예를 들어, 로그인하여 계정 정보를 확인하는 것이 인증에 해당한다. 
인가: 인증된 사용자가 특정 리소스에 접근하거나 특정 작업을 수행할 수 있도록 허용하는 권한을 부여하는 과정.
예를 들어, 특정 파일에 대한 읽기/쓰기 권한을 부여하는 것이 인가다. 

인가의 중요성 The importance of authorization:
인가는 "시스템 보안을 유지"하고 "무단 접근을 방지"하는 데 "필수"적이다.

인가 방식 How to authorize:
다양한 인가 방식이 있으며, 접근 제어 목록 (ACL), 역할 기반 접근 제어 (RBAC) 등이 대표적이다.

예시:
 - 은행 웹사이트에서 로그인을 하여 본인 인증을 받은 후(인증), 계좌 조회, 이체 등의 작업을 수행(인가)할 수 있다.
여기서 로그인 과정은 인증, 계좌 조회 및 이체 권한 부여는 인가에 해당한다. 
 - 파일 시스템에서 특정 사용자는 파일에 대한 읽기 권한만 갖고, 다른 사용자는 읽기/쓰기 권한을 가질 수 있다.

결론:
인가(Authorization)는 인증된 사용자가 시스템 리소스에 대한 적절한 수준의 접근 권한을 갖도록 보장하는 중요한 보안 메커니즘입니다.

# 세션, 토큰, JWT에 대한 이해
https://daunje0.tistory.com/177
https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-JWTjson-web-token-%EB%9E%80-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC
https://f-lab.kr/insight/jwt-vs-session-authentication-20240823

AI 개요
JWT (JSON Web Token)와 세션 기반 인증은 모두 사용자 인증을 위해 사용되지만, 몇 가지 주요 차이점을 가지고 있습니다. 세션 기반 인증은 서버에서 사용자 정보를 세션에 저장하고, 클라이언트는 세션 ID를 통해 서버와 통신합니다. 반면, JWT는 클라이언트가 토큰을 저장하고, 모든 요청에 토큰을 포함하여 서버에 전송합니다. JWT는 상태 정보를 서버에 저장하지 않아 서버 부하를 줄일 수 있지만, 토큰 유효성 검증을 위해 매번 서버에서 토큰을 확인해야 합니다. 
세션 기반 인증:
저장 위치:
사용자 정보는 서버의 세션 저장소에 저장됩니다.
통신 방식:
클라이언트는 세션 ID를 서버에 전달하고, 서버는 세션 ID를 통해 사용자 정보를 확인합니다.
장점:
서버에서 사용자 정보를 관리하므로 보안성이 높습니다.
세션이 만료되면 자동으로 로그아웃 처리됩니다.
단점:
서버에 세션 정보를 저장해야 하므로 서버 부하가 발생할 수 있습니다.
분산 환경에서 세션 관리가 복잡할 수 있습니다. 
JWT (JSON Web Token) 인증:
저장 위치:
사용자 정보는 클라이언트가 저장하는 JWT에 포함됩니다.
통신 방식:
클라이언트는 JWT를 서버에 전달하고, 서버는 JWT의 유효성을 검증합니다.
장점:
서버에 상태 정보를 저장하지 않아 서버 부하가 적습니다.
분산 환경에서 세션 관리 없이 인증이 가능합니다.
확장성이 좋습니다.
단점:
JWT가 탈취될 경우 보안 위험이 있습니다.
JWT의 만료 시간을 잘 설정해야 합니다.
서버에서 매번 JWT의 유효성을 검증해야 합니다. 

어떤 인증 방식을 선택해야 할까요?
어떤 인증 방식을 선택할지는 프로젝트의 요구사항에 따라 달라집니다. 
보안이 중요한 경우: 세션 기반 인증이 더 안전할 수 있습니다.
확장성이 중요한 경우: JWT 인증이 더 유리합니다.
간단한 프로젝트: 세션 기반 인증이 더 간단하게 구현할 수 있습니다.
복잡한 프로젝트: JWT 인증이 더 유연하게 대처할 수 있습니다.
최근에는 JWT 인증 방식이 많이 사용되는 추세입니다. JWT는 특히 모바일 앱, API 서버 등에서 많이 사용되며, 마이크로서비스 아키텍처에서도 유용합니다. 하지만, JWT의 보안 취약점을 고려하여 안전한 JWT 사용 방법을 숙지해야 합니다.

# 팀프로젝트 시작 
1. github clone으로 파일 생성
2. 깃허브 브랜치 생성 - 브랜치 소스 = develope
