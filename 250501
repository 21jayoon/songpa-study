# Reviewing yesterday lecture
# chapter05_array-section01_array
# Array 배열 : 동일한 자료형의 묶음(연속된 메모리 공간에 값을 저장하고 사용하기 위한 용도).
# 배열은 heap 영역에 new 연산자를 이용하여 할당한다.

# 사용 이유? Why do we have to use Array?
# 만약 배열을 사용하지 않는다면 변수를 여러 개 사용해야 한다.
# 1. 연속된 메모리 공간으로 관리할 수 없다. (모든 변수의 이름을 사용자가 관리해야 한다.)
# 2. 반복문을 이용한 연속 처리가 불가능하다.
# If we don't use array, we have to use several variables instead.
# but it's hard to control all variables names, also we can't manage variables in contiguous memory
# Moreover, we can't use loop for continuous processing.

# 배열 없이 변수만 여러 개 사용하는 형태
# Example of not using array (applying several variables)
      int num1 = 10;
      int num2 = 20;
      int num3 = 30;
      int num4 = 40;
      int num5 = 50;

      int sum = 0;

      sum += num1;
      sum += num2;
      sum += num3;
      sum += num4;
      sum += num5;
      System.out.println("Sum = " + sum); //Sum = 150
# num1, 2...5까지 여러 개의 변수를 만들어 sum이라는 변수(명)에 다시 일일이 넣어줌. (num1-5까지 더한 값이 나올 수 있도록)

# 배열의 선언 및 할당 Declaration and Assignment of Array
      int[] arr = new int[5];  // arr라는 변수명을 가진 int array를 만들어줬고 크기를 5로 지정해주었다.

# 배열은 하나의 이름으로 관리되는 연속된 메모리 공간이고, 공간마다 찾아갈 수 있는 번호(인덱스)를 이용해 접근한다.
# Array is the contiguous memory with one name, and it can accessed with index number.
      arr[0] = 10;
      ...
      arr[4] = 50;

# 반복문으로 값 대입 Assign the value with For loop
      for(int i = 0, value = 0; i < arr.length; i++) {
          arr[i] = value += 10;
      }

      int sum2 = 0;

      sum2 += arr[0];
      sum2 += arr[1];
      sum2 += arr[2];
      sum2 += arr[3];
      sum2 += arr[4];

      System.out.println("sum2 = " + sum2);  // sum2 = 150

        /* 1. 배열의 선언 */
        /* 자료형[] 변수명; */
        /* 자료형 변수명[]; */

        /* 선언은 stack에 배열의 주소를 보관할 수 있는 공간을 만드는 것이다. */
        int[] iarr;
        char carr[];

        /* 2. 배열의 할당
        * 선언한 레퍼런스변수에 배열을 할당하여 대입할 수 있다.
        * new 연산자는 heap 영역에 공간을 할당하고 발생한 주소값을 반환하는 연산자이다.
        * 발생한 주소를 레퍼런스변수(참조형 변수)에 저장하고 이것을 참조하여 사용하기 때문에 참조자료형이라고 한다.
        * */

        /* 배열을 할당할 때는 반드시 배열의 크기를 지정해 주어야 한다. */
//        iarr = new int[]; (X)
        carr = new char[10];

        /* 선언과 할당을 동시에 할 수 있다. */
        int[] iarr2 = new int[5];
        char carr2[] = new char[10];

        /* heap 메모리는 이름으로 접근하는 것이 아닌 주소로 접근하는 영역이다.
        *  stack에 저장된 주소로 heap에 할당된 배열을 찾아갈 수 있다.
        * */
        System.out.println("iarr2 = " + iarr2); // 16진수 주소값 출력 (eg : iarr2 = [I@7344699f )
        System.out.println("carr2 = " + carr2); // (eg : carr2 = [C@7e9e5f8a )

        /* hashcode() : 객체의 주소값을 10진수로 변환하여 생성한 객체의 고유한 정수값을 반환한다.
        *  동일객체인지 비교할 때 사용할 목적으로 쓰여진다. */
        System.out.println(iarr2.hashCode()); // 1933863327
        System.out.println(carr2.hashCode()); // 2124308362

        /* length : 배열의 길이를 알 수 있는 기능 */
        System.out.println(iarr2.length); // 5
        System.out.println(carr2.length); // 10

        iarr2 = null;
//        System.out.println(darr.length);
        /* NullPointerException : iarr2 = null;과 같이 아무것도 참조하지 않고 null이라는
        * 특수한 값을 참조하고 있는 경우 참조연산자를 사용하게 될 때 발생하는 에러이다. */

    /* 값의 형태 별 기본값
    *  정수 : 0
    *  실수 : 0.0
    *  논리 : false
    *  문자 : \u0000
    *  참조 : null
    * */
        int[] iarr = new int[5];

        System.out.println(iarr[0]); // 0
        System.out.println(iarr[1]); // 0
        System.out.println(iarr[2]); // 0
        System.out.println(iarr[3]); // 0
        System.out.println(iarr[4]); // 0
//이처럼 배열에 아직 어떤 값도 입력해주지 않고 크기만 설정해줬을 때, 정수의 기본값인 0이 나오는 걸 알 수 있다.

        /* 자바에서 지정한 기본값 외의 값으로 초기화를 하고 싶은 경우 블럭을 이용한다.
        *  블럭을 사용하는 경우 new를 사용하지 않아도 되며, 값의 갯수만큼 자동으로 크기가 설정된다.
        * */
        int[] iarr2 = {11, 22, 33, 44, 55};
        int[] iarr3 = new int[] {11, 22, 33, 44, 55};

        System.out.println("iarr2 = " + iarr2.length); //iarr2 = 5
        System.out.println("iarr3 = " + iarr3.length); //iarr3 = 5

        //문자열 배열 String Array 초기화 값 확인
        String[] sarr = {"apple", "banana", "grape", "orange"}; //"apple".."orange"로 초기화시켜줌

        for(int i = 0; i < sarr.length; i++) {
            System.out.println(sarr[i]);
        }
        /* apple
        * banana
        * grape
        * orange */

    public static void main(String[] args) {

        /* 배열을 사용하는 예시(2) Example of applying Array */
        String[] shapes = {"SPADE", "CLOVER", "HEART", "DIAMOND"};
        String[] cardNumbers = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "JACK", "QUEEN", "KING", "ACE"};

        int randomShapeIndex = (int) (Math.random() * shapes.length);
        int randomCardNumberIndex = (int) (Math.random() * cardNumbers.length);
        //Math.random() 난수 만드는 함수를 이용해 특정 정수를 랜덤으로 받음. 해당 난수를 인덱스 값으로 넣어줌

        System.out.println("당신이 뽑은 카드는 " + shapes[randomShapeIndex] + " " + cardNumbers[randomCardNumberIndex] + " 카드 입니다.");
        // Eg : 당신이 뽑은 카드는 HEART KING 카드 입니다.
    }

# chapter05_array-section02_demensional
public static void main(String[] args) {
        /* 다차원 배열? Multi-Dimensioanl Array
        *  2차원 이상의 배열, 배열의 인덱스마다 또 다른 배열의 주소를 보관하는 배열을 의미한다.
        *  즉, 2차원 배열은 1차원 배열 여러 개를 하나로 묶어서 관리하는 배열을 의미한다.
        *  더 많은 차원의 배열을 사용할 수 있지만 일반적으로 3차원 이상의 배열은 사용 빈도가 적다. */

        /* 2차원 배열을 사용하는 방법
        *  1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack에 생성)
        *  2. 여러 개의 1차원 배열의 주소를 관리하는 배열을 생성(heap에 생성)
        *  3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장
        *  4. 생성한 여러 개의 1차원 배열에 차례로 접근해서 사용 */

        /* 1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack) */
        int[][] iarr1;
        int iarr2[][];
        int[] iarr3[];

        /* 2. 여러 개의 1차원 배열의 주소를 관리하는 배열을 생성(heap) */
//        iarr1 = new int[][];
//        iarr1 = new int[][4];   // 주소를 묶어서 관리할 배열의 크기를 지정하지 않으면 에러 발생
        iarr1 = new int[3][];   //[][] 중 앞은 크기 지정 안 하면 오류나지만 뒤는 생략해도 오류 안 남

        /* 3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장 */
        iarr1[0] = new int[5];
        iarr1[1] = new int[5];
        iarr1[2] = new int[5];

        // 앞 부분은 주소를 관리하는 배열의 크기, 뒷 부분은 각 인덱스 할당하는 배열의 길이
        iarr2 = new int[3][5];

        /* 4. 생성한 여러 개의 1차원 배열에 차례로 접근해서 사용 */

        // 0번째 인덱스의 배열 값 출력
        for(int i = 0; i < iarr1[0].length; i++) {
            System.out.print(iarr1[0][i] + " ");
        }
        System.out.println(); //0 0 0 0 0

        // 1번째 인덱스의 배열 값 출력
        for(int i = 0; i < iarr1[1].length; i++) {
            System.out.print(iarr1[1][i] + " ");
        }
        System.out.println(); //0 0 0 0 0

        // 2번째 인덱스의 배열 값 출력
        for(int i = 0; i < iarr1[2].length; i++) {
            System.out.print(iarr1[2][i] + " ");
        }
        System.out.println(); //0 0 0 0 0
    }


# chapter05_array-section03_copy
 public static void main(String[] args) {
        /* 배열의 복사에는 두 가지 종류가 있다.
        *  1. 얕은 복사 : stack의 주소값만 복사
        *  2. 깊은 복사 : heap의 배열에 저장된 값 복사 */

        /* 얕은 복사는 stack에 저장되어 있는 배열의 주소값만 복사한다.
        *  따라서 두 레퍼런스 변수는 동일한 배열의 주소값을 가지고 있다.
        *  하나의 레퍼런스 변수에 저장된 주소값을 가지고 배열의 내용을 수정(값 변경)을 하게 되면
        *  다른 레퍼런스 변수로 배열에 접근했을 때도 동일한 배열을 가리키고 있기 때문에 변경된 값이 반영되어 있다. */

        int[] originArr = {1, 2, 3, 4, 5};

        int[] copyArr = originArr;  // 얕은 복사
        System.out.println(originArr.hashCode());  // 1933863327
        System.out.println(copyArr.hashCode());  // 1933863327
        /* Wait! 여기서 잠깐!
        * hashcode() : 객체의 주소값을 10진수로 변환하여 생성한 객체의 고유한 '정수값을 반환'하는 함수.
        * 동일객체인지 비교할 때 사용할 목적으로 쓰여진다. */

        for(int i = 0; i < originArr.length; i++) {
            System.out.print(originArr[i] + " ");
        }
        System.out.println();  // 1 2 3 4 5 

        for(int i = 0; i <copyArr.length; i++) {
            System.out.print(copyArr[i] + " ");
        }
        System.out.println();  // 1 2 3 4 5 

        copyArr[0] = 99;  //charArr 배열의 0번째 인덱스 자리에 정수 99를 넣어줌

        for(int i = 0; i < originArr.length; i++) {
            System.out.print(originArr[i] + " ");
        }
        System.out.println();  // 99 2 3 4 5 

        for(int i = 0; i <copyArr.length; i++) {
            System.out.print(copyArr[i] + " ");
        }
        System.out.println();  // 99 2 3 4 5
        // 동일한 주소값을 갖고 있는 두 배열이므로 copyArr의 값을 변경해준 거지만 originArr의 값도 바뀐 걸 알 수 있다
    }

public static void main(String[] args) {

        /* 목표 : 얕은 복사를 활용하여 매개변수와 리턴값으로 활용할 수 있다. */
        /* 얕은 복사의 활용
        *  주로 메소드 호출 시 인자로 사용하는 경우와
        *  리턴값으로 동일한 배열을 리턴해주고 싶은 경우 사용한다. */

        String[] names = {"홍길동", "유관순", "이순신"};

        System.out.println("names의 hashcode : " + names.hashCode()); // names의 hashcode : 1933863327

        /* 1. 인자와 매개변수로 활용 */
        /* 다른 메소드에서 동일한 배열을 사용하고 싶을 경우 얕은 복사를 이용한다. */
        print(names); // 홍길동 유관순 이순신 

        /* 2. 리턴값으로 활용 */
        String[] animals = getAnimals();

        System.out.println("리턴 받은 animals hashcode : " + animals.hashCode()); // 리턴 받은 animals hashcode : 205029188

        print(animals);

    }

    public static void print(String[] sarr) {

        // 전달받은 배열의 hashcode
        System.out.println("sarr의 hashcode : " + sarr.hashCode());

        // 전달받은 배열의 값
        for(int i = 0; i < sarr.length; i++) {
            System.out.print(sarr[i] + " ");
        }

        System.out.println();
    }

    public static String[] getAnimals() {

        String[] animals = new String[] {"낙타", "호랑이", "나무늘보"};

        // 얕은 복사 확인을 위한 hashcode 출력
        System.out.println("새로 만든 animals의 hashcode : " + animals.hashCode());  // 새로 만든 animals의 hashcode : 205029188

        return animals;
    }

import java.util.Arrays;
public static void main(String[] args) {
        /* 깊은 복사는 heap에 생성된 배열이 가지고 있는 값을
        *  또 다른 배열에 복사를 해 놓은 것이다.
        *  서로 같은 값을 가지고 있지만, 두 배열은 서로 다른 배열이기에
        *  하나의 배열에 변경을 하더라도 다른 배열에는 영향을 주지 않는다. */

        /* 깊은 복사를 하는 방법은 4가지가 있다.
        *  1. for문을 이용한 동일한 인덱스의 값 복사
        *  2. Object의 clone()을 이용한 복사
        *  3. System의 arraycopy()를 이용한 복사
        *  4. Arrays의 copyOf()를 이용한 복사 */

        int[] originArr = new int[] {1, 2, 3, 4, 5};

        print(originArr);
        // iarr의 hashcode : 1933863327
        // 1 2 3 4 5 


        /* 1. for문을 이용한 동일한 인덱스의 값 복사 */
        int[] copyArr1 = new int[10];

        for(int i = 0; i < originArr.length; i++) {
            copyArr1[i] = originArr[i];
        }

        print(copyArr1);
        // iarr의 hashcode : 205029188
        // 1 2 3 4 5 0 0 0 0 0 
        // int[10]이라 나머지 5칸은 정수형의 기본값인 0으로 채워짐


        /* 2. Object의 clone()을 이용한 복사 */
        int[] copyArr2 = originArr.clone();

        print(copyArr2);  // 동일한 길이, 동일한 값을 가지는 배열이 생성되어 복사되지만 다른 주소를 가지고 있다.
        // iarr의 hashcode : 1309552426
        // 1 2 3 4 5 


        /* 3. System의 arraycopy()를 이용한 복사 */
        int[] copyArr3 = new int[10];

        /* 원본배열, 복사를 시작할 인덱스, 복사본 배열, 복사를 시작할 인덱스, 복사할 길이 */
        System.arraycopy(originArr, 0, copyArr3, 3, originArr.length);
        // originArr의 0번째 인덱스부터 복사해 와. copyArr3의 3번째 인덱스 자리에서부터 복사를 해줘. originArr.length만큼

        print(copyArr3);    // 복사한 만큼의 값은 같지만 길이도 다르고 주소도 다르다
        // iarr의 hashcode : 1943105171
        // 0 0 0 1 2 3 4 5 0 0 
        // copyArr3의 3번째 인덱스에서부터 복사해달라고 해서 나머지 자리는 0으로 채워짐


        /* 4. Arrays의 copyOf()를 이용한 복사 */
        int[] copyArr4 = Arrays.copyOf(originArr, 7);

        print(copyArr4);   // 복사한 만큼의 값{1, 2, 3, 4, 5}은 같지만, 길이도 다르고 주소도 다르다
        // iarr의 hashcode : 1704856573
        // 1 2 3 4 5 0 0 
    }

    // 배열 출력 메소드
    public static void print(int[] iarr) {

        System.out.println("iarr의 hashcode : " + iarr.hashCode());

        for(int i = 0; i < iarr.length; i++) {
            System.out.print(iarr[i] + " ");
        }
        System.out.println();
    }

public static void main(String[] args) {
        /* 깊은 복사는 원본과 복사본 중 둘 중 한 가지 값을 변경해도 다른 하나에 영향을 주지 않는다.
        *  같은 값을 가지고 있는 서로 다른 배열이기 때문이다. */

        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = arr1.clone();

        System.out.println("arr1 = " + arr1.hashCode());  // arr1 = 1933863327
        System.out.println("arr2 = " + arr2.hashCode());  // arr2 = 1984697014

        /* 각 배열의 인덱스에 10씩 누적 증가 시킴 */
        for(int i = 0; i < arr1.length; i++) {
            arr1[i] += 10;
        }

        // 값 출력
        for(int i = 0; i < arr1.length; i++) {
            System.out.print(arr1[i] + " ");
        }
        System.out.println();
        // 11 12 13 14 15 

        /* 향상된 for문 : 배열 인덱스에 하나씩 차례로 접근해서 담긴 값을
        *                임시로 사용할 변수에 담고 반복문을 실행한다. */
        for(int i : arr2) {
            i += 10;
        }

        for(int i = 0; i < arr2.length; i++) {
            System.out.print(arr2[i] + " ");
        }
        System.out.println();  // 1 2 3 4 5 

        /* 향상된 for문은 배열에 인덱스에 차례로 접근할 때는 편하게 사용할 수 있지만
        * 값을 변경할 수 없다.
        * 그러나 변경 말고 사용하는 것이 목적이라면 조금 더 편하게 사용할 수 있다. */
        for(int i : arr2) {
            System.out.print(i + " ");
        }
        System.out.println();  // 1 2 3 4 5 값 안 바뀐 걸 확인할 수 있음
    }

# chapter05_array-section04_sort
public static void main(String[] args) {
        /* 변수의 두 값을 변경하는 방법에 대해 이해할 수 있다. */
        int num1 = 10;
        int num2 = 20;

        System.out.println("num1 = " + num1);  // num1 = 10
        System.out.println("num2 = " + num2);  // num2 = 20

        // temp;라는 임의의 변수 공간을 만들어서
        // 하노이 탑처럼 옯겼다가 다시 옮기는 방법을 사용
        int temp;
        temp = num1;
        num1 = num2;
        num2 = temp;

        System.out.println("num1 = " + num1);  // num1 = 20
        System.out.println("num2 = " + num2);  // num2 = 10

        int[] arr = {2, 1, 3};

        int temp2;
        temp2 = arr[0];  // temp2 임시공간에 0번째 인덱스인 2를 넣어 옮겨줌
        arr[0] = arr[1];  // 1번째 인덱스 값 1을 현재 기본값 상태가 된 0번째 인덱스에 넣어줌
        arr[1] = temp2;  // temp2 임시공간에 넣었던 前0번째 인덱스 2를 빈 1번째 인덱스에 넣어줌

        for(int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }  // 1 2 3 
    }
