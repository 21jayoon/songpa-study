# JPQL 개념 정리
JPQL은 엔터티 객체를 중심으로 개발할 수 있는 객체 지향 쿼리이다. SQL보다 간결하며 특정 DBMS에 의존하지
않는다. 방언을 통해 해당 DBMS에 맞는 SQL을 실행하게 된다. JPQL은 find() 메소드를 통한 조회와 다르게 항
상 데이터베이스에 SQL을 실행해서 결과를 조회한다.

# 1-1. 기본 문법
SELECT , UPDATE , DELETE 등의 키워드 사용은 SQL과 동일하다.
INSERT 는 persist() 메소드를 사용하면 된다. 

키워드는 대소문자를 구분하지 않지만, 엔터티와 속성은 대소문자를 구분함에 유의한다.
엔터티 별칭을 필수로 사용해야 하며 별칭 없이 작성하면 에러가 발생한다.

JPQL 사용 방법은 다음과 같다.
1. 작성한 JPQL(문자열)을 entityManager.createQuery() 메소드를 통해 쿼리 객체로 만든다.
# String jpql = "SELECT m.menuName FROM Section01Menu as m WHERE m.menuCode = 8";
# TypedQuery<String> query = manager.createQuery(jpql, String.class);

2. 쿼리 객체는 TypedQuery , Query 두 가지가 있다.
a. TypedQuery : 반환할 타입을 명확하게 지정하는 방식일 때 사용하며 쿼리 객체의 메소드 실행 결과로 지
정한 타입이 반환 된다.
b. Query : 반환할 타입을 명확하게 지정할 수 없을 때 사용하며 쿼리 객체 메소드의 실행 결과로 Object 또
는 Object[]이 반환 된다.
# String jpql = "SELECT m.menuName FROM Section01Menu as m WHERE m.menuCode = 8";
# Query query = manager.createQuery(jpql); //결과 값의 타입을 명시하지 않음

3. 쿼리 객체에서 제공하는 메소드 getSingleResult() 또는 getResultList() 를 호출해서 쿼리를 실행하고 데이터
베이스를 조회한다.
a. getSingleResult() : 결과가 정확히 한 행일경우 사용하며 없거나 많으면 예외가 발생한다.
#  String resultMenuName = query.getSingleResult();

b. getResultList() : 결과가 2행 이상일 경우 사용하며 컬렉션을 반환한다. 결과가 없으면 빈 컬렉션을 반환
한다.
#  public List<Menu> selectUsingIn() {
#   String jpql
#     = "SELECT m FROM Section01Menu m WHERE m.categoryCode IN (11, 12)";
#   List<Menu> resultMenuList = manager.createQuery(jpql, Menu.class).getResultList();
#   return resultMenuList;
#  }


1-2. parameter
JPQL 구문에 파라미터를 바인딩 하는 경우 두 가지 방법이 있다. 
첫 번째는 이름 기준 파라미터(named parameters) 바인딩으로 : 다음에 이름 기준 파라미터를 지정한다.
#  String jpql = "SELECT m FROM Section02Menu m WHERE m.menuName = :menuName";

두 번째는 위치 기준 파라미터(positional parameters) 바인딩으로 ? 다음에 위치 값을 주는데 위치 값은 1부터 시작한다.
테스트를 위한 Menu 엔터티는 1-1. 기본 문법에서 사용했던 구조를 따르되 Entity name만 변경한다.
# String jpql = "SELECT m FROM Section02Menu m WHERE m.menuName = ?1";

1-3. projection
SELECT 절에 조회할 대상을 지정하는 것을 프로젝션이라고 한다.
# (SELECT {프로젝션 대상} FROM)

프로젝션 대상은 4가지 방식이 있다. 
1. 엔터티 프로젝션 : 원하는 객체를 바로 조회할 수 있다. 조회된 엔티티는 영속성 컨텍스트가 관리한다.
2. 임베디드 타입 프로젝션 : 조회의 시작점이 될 수 없다. (from 절 사용 불가) 임베디드 타입은 영속성 컨텍스트에서 관리되지 않는다.
3. 스칼라 타입 프로젝션 : 숫자, 문자, 날짜 같은 기본 데이터 타입이다. 스칼라 타입은 영속성 컨텍스트에서 관리되지 않는다.
4. new 명령어를 활용한 프로젝션 : 다양한 종류의 단순 값들을 DTO로 바로 조회하는 방식으로 new 패키지명.DTO명을 쓰면 
해당 DTO로 바로 반환받을 수 있다. new 명령어를 사용한 클래스의 객체는 엔티티가 아니므로 영속성 컨텍스트에서 관리되지 않는다. 

1-3-1. Entity 프로젝션
# class ProjectionService
# @Transactional
# public List<Menu> singleEntityProjection() {
#  List<Menu> menuList = repository.singleEntityProjection();

# // 엔티티 프로젝션은 영속성 컨텍스트에서 관리하는 객체가 된다.
#  menuList.get(1).setMenuName("세상에서 제일 맛있는 유니콘 고기");
#  return menuList;
# }

# Tests> ProjectionServiceTests
# @DisplayName("단일 엔티티 프로젝션 테스트")
# @Test
# public void testSingleEntityProjection() {
#  //given
#  //when
#  List<Menu> menuList = service.singleEntityProjection();
#  //then
#  Assertions.assertNotNull(menuList);
# }


1-3-2. 임베디드 프로젝션
임베디드 타입(embedded type, 복합 값 타입 또는 내장 타입) 이란 
새로운 값 타입을 직접 정의한 것으로 주로 기본 값 타입을 모아서 만든 하나의 타입을 말한다. 
엔티티의 필드 중 일부분을 하나의 임베디드 타입으로 정의하면 알아보기 쉽고,
재사용성이 높게 디자인 할 수 있어 유지보수에 용이하다.
# package com.ohgiraffers.jpql.section03.projection;
public class CategoryInfo {
    private int categoryCode;
    private String categoryName;
    
    public CategoryInfo(){}

    public CategoryInfo(int categoryCode, String categoryName) {
        this.categoryCode = categoryCode;
        this.categoryName = categoryName;
    } //매개변수 있는 생성자 작성

    public int getcategoryCode() {
        return categoryCode;
    }

    public void setcategoryCode(int categoryCode) {
        this.categoryCode = categoryCode;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    @Override
    public String toString() {
        return "CategoryInfo{" +
                "categoryCode=" + categoryCode +
                ", categoryName='" + categoryName + '\'' +
                '}';
    }
}
CategoryInfo 를 포함하는 EmbeddedMenu 엔터티를 생성한다.
# @Entity(name="EmbeddedMenu")
# @Table(name="tbl_menu")
# public class EmbeddedMenu {
#    @Id
#    private int menuCode;
#    @Embedded //@Embeddable 타입을 사용하는 곳에 적용
#    private MenuInfo menuInfo;
#    private int categoryCode;
#    private String orderableStatus;
# public EmbeddedMenu () {}
# public EmbeddedMenu(
#    int menuCode, MenuInfo menuInfo, int categoryCode, String orderableSt
# ) {
#    super();
#    this.menuCode = menuCode;
#    this.menuInfo = menuInfo;
#    this.categoryCode = categoryCode;
#    this.orderableStatus = orderableStatus;
# }
# ...
# }

# public List<MenuInfo> embeddedTypeProjection() {
   String jpql = "SELECT m.menuInfo FROM EmbeddedMenu m";
   List<MenuInfo> resultMenuInfo
   = manager.createQuery(jpql, MenuInfo.class).getResultList();
  return resultMenuInfo;
}

# @DisplayName("임베디드 타입 프로젝션 테스트")
@Test
public void testEmbeddedTypeProjection() {
 //given
 //when
 List<MenuInfo> menuInfoList = repository.embeddedTypeProjection();
 //then
 Assertions.assertNotNull(menuInfoList);
 menuInfoList.forEach(System.out::println);
}


1-3-3. 스칼라 타입 프로젝션
# class ProjectionRepository
# public List<Object[]> scalarTypeProjection(){
#        String jpql = "SELECT c.categoryCode, c.categoryName FROM Section03Category c";
#        return entityManager.createQuery(jpql).getResultList();
#  }

# ProjectionServiceTests
# @DisplayName("TypedQuery를 이용한 스칼라 타입 프로젝션 테스트")
# @Test
# public void testScalarTypeProjectionByTypedQuery() {
#  //given
#  //when
#  List<String> categoryNameList
#  = repository.scalarTypeProjectionByTypedQuery();
# //then
#  Assertions.assertNotNull(categoryNameList);
#  categoryNameList.forEach(System.out::println);
# }

# 방법 2 QUERY 이용
# class ProjectionRepository
public List<Object[]> scalarTypeProjectionByQuery() {
   String jpql
   = "SELECT c.categoryCode, c.categoryName FROM Section03Category c";
   List<Object[]> resultList = manager.createQuery(jpql).getResultList();
   return resultList;
}

# ProjectionServiceTests
@DisplayName("Query를 이용한 스칼라 타입 프로젝션 테스트")
@Test
public void testScalarTypeProjectionByQuery() {
   //given
   //when
   List<Object[]> categoryList = repository.scalarTypeProjectionByQuery();
   //then
   Assertions.assertNotNull(categoryList);
   categoryList.forEach(
             row -> {
               for(Object column : row) {
                 System.out.print(column + " ");
               }
               System.out.println();
            }
   );
}
조회하려는 컬럼 값이 1개인 경우 TypedQuery로 반환 타입을 단일 값에 대해 지정할 수 있지만 
다중 열 컬럼을 조회하는 경우 타입을 지정하지 못한다. 
그때는 TypedQuery 대신 Query를 사용하여 Object[]로 행의 정보를 반환받아 사용한다. 
Object를 일일히 인덱스별로 처리하거나 다운캐스팅 하는 것은 번거롭기 때문에 
new 명령어를 활용한 프로젝션을 더 많이 활용하게 된다.
