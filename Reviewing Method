# JVM
# Java Virtual Machine
# 자바 프로그램의 실행환경을 만들어주는 소프트웨어.
# 자바 코드를 컴파일하여 .class 콛로 만들면 이 코드가 자바 가상머신 환경에서 실행된다
# 현재 사용하는 컴퓨터의 운영체제에 맞는 자바 실행환경(JRE: Java Runtime Environment)이 설치되어 있다면 자바 가성 머신이 설치되어 있는 것.

# 메소드 리턴
# 메소드는 항상 마지막에 return 명령어가 존재한다.
# return 은 자신을 호출한 구문으로 복귀하는 것을 의미한다.
# 복귀를 할 때 값을 가지고 복귀할 수도 있다. 이 때 가지고 가는 값을 리턴값 이라고 한다.
# return 값을 반환받기 위해서는 메소드 선언부에 리턴 타입을 명시해 주어야 한다.
# void 는 아무 반환값도 가지지 않겠다는 리턴타입에 사용할 수 있는 키워드이다.
# 반환값이 없는 경우 return 구문은 생략해도 컴파일러가 자동으로 추가해주지만,
# 반환값이 있는 경우는 return 구문을 반드시 명시적으로 작성해야 한다.
# 메소드 선언부에 선언한 리턴타입 반환값의 자료형은 반드시 일치해야 한다.

# static 메소드 호출
# 우리가 지금 작성하고 있는 메소드를 보면 public과 void 사이에 static이라고 하는 키워드가 있다.
# static 메소드를 호출하는 방법부터 먼저 학습해보자.
# static이 있는 메소드이건 non-static 메소드이건 메소드의 동작 흐름은 동일하다.

# 메소드를 작성한 이후 static 메소드를 호출해보자
# static 메소드를 호출하는 방법
# 클래스명.메소드명(); <- 이런 방식으로 호출한다.
public static void main(String[] args) {
  System.out.println("10과 20의 합 : " + Application.sumTwoNumbers(10, 20));
  /* 동일한 클래스 내에 작성된 static 메소드는 클래스명 생략이 가능하다. */
  System.out.println("20과 30의 합 : " +sumTwoNumbers(20, 30)); // 생략한 버전
}
public static int sumTwoNumbers(int first, int second) {
  return first + second;
}

# 다른 클래스에 작성한 메소드 호출
public static void main(String[] args) {
  // 최대값 최솟값을 비교할 두 정수를 변수로 선언
  int first = 100;
  int second = 50;
  /* 앞에서 만든 두 메소드를 차례로 호출해보자 */
  /* 1. non-static 메소드의 경우 */
  /* 클래스가 다르더라도 사용하는 방법은 동일하다
  * 클래스명 사용할이름 = new 클래스명(); */
  Calculator calc = new Calculator();
  int min = calc.minNumberOf(first, second); // 사용할이름.메소드명();
  
  System.out.println("두 수 중 최소값은 : " + min);
  /* 2. static 메소드인 경우 */
  /* 다른 클래스에 작성한 static 메소드의 경우 호출할 때 클래스명을 반드시 기술해야 한다.
  * 클래스명.메소드명(); */
  //int max = maxNumberOf(first, second); //클래스명을 생략하면 에러 발생한다.
  int max = Calculator.maxNumberOf(first, second);
  System.out.println("두 수 중 최대값은 : " + max);
  /* 주의!
  * static 메소드도 non-static 메소드처럼 호출은 가능하다.
  * 하지만 권장하지 않는다.
  * 이미 메모리에 로딩되어 있는 static 메소드는 여러 객체가 공유하게 된다.
  * 그 때 객체로 접근하게 되면 인스턴스가 가진 값으로 공유된 값에 예상치 못하는 동작을 유발할 수 있기 때문에
  * 사용을 제한해 달라는 경고이다. 시스템이 복잡해질 수록 이런 에러를 찾기 힘들어지게 된다.
}

# 같은 패키지 내에서는 동일한 이름의 클래스를 만들 수 없지만,
# 패키지가 다르면 동일한 이름을 가진 클래스를 만들 수도 있다.
# 클래스명은 원래 패키지명을 포함하고 있다.

# IMPORT
# 서로 다른 패키지에 존재하는 클래스를 사용하는 경우 패키지명을 포함한 풀 클래스 이름을 사용해야 한다.
# 하지만 매번 다른 클래스의 패키지명까지 기술하기에는 번거롭다.
# 그래서 패키지명을 생략하고 사용할 수 있도록 한 구문이 import 구문
# static import 문은 static 메소드를 호출할 때 사용한다.
