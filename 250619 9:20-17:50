# 어제 강의 내용 복습 Yesterdays review
# EntityManager와 EntityManagerFactory, Persistence Context 간의 관계 정리
https://github.com/copilot/share/0263400e-4080-8c80-a840-d20fa0976919

# 내용 요약 summary
Step 1: Find
[Database]
   v
[EntityManager] ----> [Menu (menuCode: 11, menuPrice: 10000)]
                      (Managed, tracked by EntityManager)


Step 2: After Detach (also change the detached entity's price)
[Database]
   |
   v
[EntityManager]    [Menu (menuCode: 11, menuPrice: 10000 -> 1000)]
   |                      ^
   |                      |
   |                (Detached, not tracked) : You can still change the value with foundMenu.setMenuPrice(1000), but the EntityManager (teacher) does not see or care about this change.
   v
[No connection to Menu in memory anymore]


Step 3: Find Again
[Database] (menuPrice: 10000)
   |
   v
[EntityManager] ----> [Menu (menuCode: 11, menuPrice: 10000)]  // secondMenu (managed)
                      [Menu (menuCode: 11, menuPrice: 1000)]   // foundMenu (detached)

# 강의 메모 short memo of lecture
JPA는 자바의 ORM 표준 interface
(자바의 ORM기술을 쉽게 구현하도록 도와주는 API)

ORM: Obejct Relational Mapping
객체 관계 매핑 : "자바 객체"와 "DB 테이블" 간의 관계를 기반으로 해서 mapping 해준다.

가장 보편적으로 쓰는 구현체 : Hibernate
(실질적으로 library를 추가할 때는 build.gradle에 hibernate를 추가한다)

JPA 사용의 장점 
유지보수성 증가
생산성 증가 : query(SQL문)를 작성하거나 수정하지 않아도 됨. 
DB의 dialect 알아서 수정함 :  MySQL 쓰다가 Oracle 써도 되고, 다른 DBMS 써도 됨. 알아서 수정해주니까
영속성 컨택스트에서 cashing을 사용해준다. : 영속성 컨택스트에 관리된 객체를 바로 반환해줄 수 있다.(cashing이 되기 때문에 바로 사용할 수 있다.)

JPA 사용의 단점
복잡한 SQL문을 사용해야하는 경우 JPA에는 한계가 있기 때문에 MyBatis등의 다른 library를 사용해야 한다

https://ccomccomhan.tistory.com/131

MyBatis와 JPA의 비교
영속성 프레임워크 JPA(O) MyBatis(O)
JPA -> ORM
MyBatis -> SQL
MySQL 사용 => GenerationType.IDENTITY
e.g.  @GeneratedValue(strategy = GenerationType.IDENTITY)

# 오늘 배운 내용 정리 Solve the question of today's lecture with copilot
# Q: I think the concept of beans in Spring and 
# the use of @Embeddable and @Embedded in JPA are similar,
# as both involve using a class or method like a library. Is that correct?
# A: ...... Both concepts involve using a class inside another class, and both help with code reusability and modularity.
# But Spring beans are for managing objects (services, components, etc.) at runtime in the application context.
# JPA embeddables are for mapping value objects in the database schema.
# So, while both use classes to organize code, their purpose and how they work are very different.

# Analogy :
# - Spring beans are like ingredients 
# prepared and managed by a chef (the Spring container) in a kitchen.
# - JPA embeddables are like ingredients that always go into a specific recipe (entity) 
# and are stored in the same container (database table) as the main dish.

# Summary:
# You are correct that both use classes to organize and reuse code, 
# but their real purpose and mechanisms are quite different. 
# Spring beans are about object management in your app, 
# while JPA embeddables are about database structure.


# 오늘 배운 내용 Today's lecture
package com.ohgiraffers.jpa02mapping.section01.entity;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

//@Repository = DB에 접근하는 클래스들이 Bean으로 등록되어야 할 때(?) 달아주는 어노테이션
@Repository //bean registered
public class MemberRepository {
...
    // 20250619 9:30 vvv
    public String findNameById(String memberId){
        // Use JPQL
        String jpql = "SELECT m.memberName FROM entityMember m WHERE m.memberId = '" + memberId + "'";
        // JPQL 특징 : FROM에 들어가는 것이 엔티티 이름(e.g. entityMember)이 됨. (Not a table name) 
        // Also, alias(별칭) is essential. (e.g. entityMember "m" in upper code) 
        return entityManager.createQuery(jpql, String.class).getSingleResult();
    }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDateTime;
import java.util.stream.Stream;

@SpringBootTest
class MemberRegistApplicationTests {
   ...

    @DisplayName("Test property access")
    @ParameterizedTest
    @MethodSource("getMember")
    void testAccessProperty(
            String memberId, String memberPwd,
            String memberName, String phone, String address,
            LocalDateTime enrollDate, MemberRole memberRole, String status
    ) {
       //1. Direct access(default) : approach to the field directly
        // -> difficult with verify etc. (another code neede)
        //2. property access : approach with property and getter method.
        // -> easier to verify etc., compared to direct accessing.
        // >> go to the Member class

        //given
        MemberRegistDTO newMember = new MemberRegistDTO(
                memberId,
                memberPwd,
                memberName,
                phone,
                address,
                enrollDate,
                memberRole,
                status
        );
        
         //when
        String registeredName = memberRegistService.registMemberAndFindName(newMember);

        //then
        assertEquals(memberName+"님", registeredName);
  }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import jakarta.persistence.*;

import java.time.LocalDateTime;

//Entity class로 할 거니까 annotation달기 =>DB와 mapping될 것임을 미리 알려줌
@Entity(name = "entityMember")
@Table(name = "tbl_member")   //tbl_member라는 테이블이 생성되도록
@Access(AccessType.FIELD) //@Access(AccessType.FIELD)는 클래스 레벨에 설정 가능, 모든 필드를 대상으로 적용하겠다는 의미
public class Member {
    //entity 등록할 때는 PK가 필수이다.
    // PK를 만들거나 @Id를 통해 불러와주지 않으면 method이름 아래에 계속 빨간 줄이 나온다
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "member_no")
    private int memberNo;

    @Access(AccessType.FIELD)
    @Column(
            name = "member_id", unique = true,
            nullable = false, columnDefinition = "varchar(10)"
    )
    private String memberId;

    @Column(name = "member_pwd", nullable = false)
    private String memberPwd;

    @Access(AccessType.PROPERTY)
    @Column(name = "member_name")
    private String memberName;

...

    @Column(name = "status", columnDefinition = "char(1) default 'Y'")
    private String status;

    //기본생성자 필수 작성
    protected Member(){}

    public Member(String memberId, String memberPwd, String memberName, String phone, String address, LocalDateTime enrollDate, MemberRole memberRole, String status) {
        this.memberId = memberId;
        this.memberPwd = memberPwd;
        this.memberName = memberName;
        this.phone = phone;
        this.address = address;
        this.enrollDate = enrollDate;
        this.memberRole = memberRole;
        this.status = status;
    }
    
    @Access(AccessType.PROPERTY)
    public String getMemberName(){
        System.out.println("Check the access through getMemberName method");
        return memberName + "님";
    } //프로퍼티 방식으로 getter 메소드에 접근하는 걸 확인하기 위한 메소드
    
    public void setMemberName(String memberName){
        this.memberName = memberName;
    } 

    ...

    @Override
    public String toString() {
        return "Member{" +
                " memberId='" + memberId + '\'' +
                ", memberPwd='" + memberPwd + '\'' +
                ", memberName='" + memberName + '\'' +
                ", phone='" + phone + '\'' +
                ", address='" + address + '\'' +
                ", enrollDate=" + enrollDate +
                ", memberRole=" + memberRole +
                ", status='" + status + '\'' +
                '}';
    }
}

# section02 - embedded
package com.ohgiraffers.jpa02mapping.section02.embedded;

import jakarta.persistence.*;

import java.time.LocalDate;

@Entity
@Table(name = "tbl_book")
public class Book {
    @Id
    @Column(name = "book_no")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int bookNo;
    
    ...
    
    @Column(name = "published_date")
    private LocalDate publishedDate;

    @Embedded
    private Price price;
    // Price라는 클래스를 만들고 여러 entity에서 embedded(내장된) class로 활용하겠다

    protected Book() {
    }

    public Book(
            String bookTitle, String author, String publisher,
            LocalDate publishedDate, Price price
    ) {
        this.bookTitle = bookTitle;
       ...
        this.price = price;
    }

    @Override
    public String toString() {
        return "Book{" +
                "bookNo=" + bookNo +
                ...
                ", price=" + price +
                '}';
    }
}

package com.ohgiraffers.jpa02mapping.section02.embedded;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;

@Embeddable
public class Price {
    ...
    }
}

package com.ohgiraffers.jpa02mapping.section02.embedded;

import org.springframework.stereotype.Service;

@Service
public class BookRegistService {
    private BookRepository bookRepository;

    //생성자 주입으로 (Book)Repository에 의존성 주입
    public BookRegistService(BookRepository bookRepository){
        this.bookRepository = bookRepository;
    }
}

package com.ohgiraffers.jpa02mapping.section02.embedded;

import java.time.LocalDate;

public class BookRegistDTO {
    //책을 등록할 때 필요한 내용을 정의한 BoorRegistDTO
private String bookTitle;
    private String author;
    private String publisher;
    private LocalDate publishedDate;
    private int regularPrice;
    private double discountRate;
...
}

package com.ohgiraffers.jpa02mapping.section02.embedded;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BookRegistService {
    private BookRepository bookRepository;

    //생성자 주입으로 (Book)Repository에 의존성 주입
    public BookRegistService(BookRepository bookRepository){
        this.bookRepository = bookRepository;
    }

    //DTO 타입 전달받아 엔티티로 가공한 후에 사용
    @Transactional
    public void registBook(BookRegistDTO newBook){
        Book book = new Book (
                newBook.getBookTitle(),
                newBook.getAuthor(),
                newBook.getPublisher(),
                newBook.getPublishedDate(),
                // DTO에 있는 regularPrice 필드 대신 별도의 Price class를 생성해서 넣어준다
                new Price(
                        newBook.getRegularPrice(),
                        newBook.getDiscountRate()
                )
        );
        bookRepository.save(book);
    }

}

package com.ohgiraffers.jpa02mapping.section02.embedded;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDate;
import java.util.stream.Stream;

@SpringBootTest
public class BookRegistServiceTests {
    // 테스트 클래스는 보통 필드 주입(@Autowired)으로도 충분합니다.
    //이 클래스는 test 코드라서 의존성 주입을 받을 필욘 없지만...
    // JPA 수업의 일관성을 위해 테스트 코드에서도 생성자 주입을 적용
    // 생성자 주입을 사용하면, 불변성(immutable)을 보장할 수 있고, 의존성 주입이 누락되는 것을 컴파일 타임에 체크할 수 있어 더 안전
    //생성자 주입 방식은 필드 주입보다 테스트 작성 시 의존성을 명확하게 드러낼 수 있다.
    @Autowired
    private BookRegistService bookRegistService;

    private static Stream<Arguments> getBook() { // argument를 받았다
        return Stream.of(
                Arguments.of(
                        "자바 ORM 표준 JPA 프로그래밍",
                        "김영한",
                        "에이콘",
                        LocalDate.now(),
                        43000,
                        0.1
                )
        );
    }
    @ParameterizedTest
    @MethodSource("getBook")
    void testCreateEmbeddedPriceOfBook(
            String bookTitle, String author, String publisher,
            LocalDate publishedDate, int regularPrice, double discountRate
    ) {
        //given
        //전달받은 argument를 갖고 온다
        BookRegistDTO newBook = new BookRegistDTO(
                bookTitle,
                author,
                publisher,
                publishedDate,
                regularPrice,
                discountRate
        );
        //when
        //then
        Assertions.assertDoesNotThrow(
                () -> bookRegistService.registBook(newBook)
        );
    }
}


# chapter03 - association mapping
# 1. application.yml (changed from application.properties)
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/menudb
    username: ohgiraffers
    password: ohgiraffers
  jpa:
    show-sql: true
    database: mysql
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        # developers now can mapping the column name without using @Column(name = "menu_code") on the field in the entity class
    properties:
      hibernate:
        format_sql: true
        # 'physical_naming_strategy' is a property that specifies the physical naming strategy of 'Hibernate'.
        # By setting this property, developers can directly define the naming rules for database tables and columns.
        #'org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy' is one of the naming strategies built into 'Hibernate'.
        # This strategy converts entity and column names written in camel case to underscores.
        # For example, "myColumnName" is converted to "my_column_name".

# ManyToOneServiceTests 1
package com.ohgiraffers.associationmapping.section01.manytoone;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class ManyToOneServiceTests {
    @Autowired
    private ManyToOneService manyToOneService; //field injection

    @DisplayName("Test N:1 연관관계 조회")
    @Test
    void manyToOneFindTest(){
        //given
        int menuCode = 10;

        //when
        Menu foundMenu = manyToOneService.findMenu(menuCode);

        //then
        Category category = foundMenu.getCategory();
        assertNotNull(category);
    }
}

# 결과 Results
Hibernate: 
    select
        m1_0.menu_code,
        c1_0.category_code,
        c1_0.category_name,
        c1_0.ref_category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status 
    from
        tbl_menu m1_0 
    left join    -- >> category tbl을 기준으로 tbl_menu를 JOIN. (tbl_category이 우선, tbl_menu의 category_code에서 tbl_category(category_code)에 없는 내용은 걸러짐(무시됨))
        tbl_category c1_0 
            on c1_0.category_code=m1_0.category_code 
    where
        m1_0.menu_code=?

# ManyToOneServiceTests 2
package com.ohgiraffers.associationmapping.section01.manytoone;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class ManyToOneServiceTests {
    @Autowired
    private ManyToOneService manyToOneService; //field injection

    @DisplayName("Test N:1 연관관계 JPQL(객체 지향 쿼리)을 이용한 조회")
    @Test
    void manyToOneJpqlFindTest(){
        //given
        int menuCode = 10;

        // when
        String  categoryName = manyToOneService.findCategoryNameByJpql(menuCode);

        // then
        assertNotNull(categoryName);
        System.out.println("CategoryName : "+ categoryName);
    }
}

# 결과 Results
Hibernate: 
    select
        c1_0.category_name 
    from
        tbl_menu m1_0 
    join
        tbl_category c1_0 
            on c1_0.category_code=m1_0.category_code 
    where
        m1_0.menu_code=?
CategoryName : 서양

package com.ohgiraffers.associationmapping.section01.manytoone;

import jakarta.persistence.Table;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ManyToOneService {
...
    @Transactional
    public void registMenu(MenuDTO menuInfo){
        Menu menu = new Menu(
                menuInfo.getMenuCode(),
                menuInfo.getMenuName(),
                menuInfo.getMenuPrice(),
                new Category(
                        menuInfo.getCategory().getCategoryCode(),
                        menuInfo.getCategory().getCategoryName(),
                        menuInfo.getCategory().getRefCategoryCode()
                ),
                menuInfo.getOrderableStatus()
        );
        manyToOneRepository.regist(menu);
    }
}

# 
package com.ohgiraffers.associationmapping.section01.manytoone;

import jakarta.persistence.*;

@Entity(name="menu_and_category")
@Table(name="tbl_menu")
public class Menu {
    @Id
    private int menuCode;
    private String menuName;
    private int menuPrice;

    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    // .PERSIST : 영속성 전이
    // (cascade = CascadeType.PERSIST) 이걸 넣어야
    // "category도 같이 영속화할게요(=카테고리도 같이 추가할게요)"가 됨.

    @JoinColumn(name = "categoryCode") //@JoinColumn의 이름은 FK 이름으로 적어야 한다
    private Category category;
    //연관관계 매핑을 보고 싶기 때문에 categoryCode라고 안 적고 category라고 적은 후
    //Category entity class에서 연관관계 매핑 사용하는 방법을 알아본다.
...
    }
}

private static Stream<Arguments> getMenuInfo(){
        return Stream.of(
                Arguments.of(124, "meatball bibimbap", 15000, 13, "퓨전분식", "Y")
        );
    }

@SpringBootTest
public class ManyToOneServiceTests {
    @Autowired
    private ManyToOneService manyToOneService; //field injection

    @DisplayName("Test N:1 연관관계 객체 삽입 테스트")
    @ParameterizedTest
    @MethodSource("getMenuInfo")
    void manyToOneInsertTest(int menuCode, String menuName, int menuPrice,
                             int categoryCode, String categoryName,
                             String orderableStatus){
        //given
        //입력 받은 걸 DTO로 만들어주는 과정이 필요함
        MenuDTO menuInfo =  new MenuDTO(
                menuCode,
                menuName,
                menuPrice,
                new CategoryDTO(
                        categoryCode,
                        categoryName,
                        null
                ),
                orderableStatus
        );
        //when

        //then
        //registMenu(menuInfo)가 예외 던지지 않는지 확인
        assertDoesNotThrow(
                () -> manyToOneService.registMenu(menuInfo)
        );
    }
}

# Results : insert가 tbl_category와 tbl_menu에 각각 한 번씩 총 두 번 나온다.
Hibernate: 
    insert 
    into
        tbl_category
        (category_name, ref_category_code, category_code) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        tbl_menu
        (category_code, menu_name, menu_price, orderable_status, menu_code) 
    values
        (?, ?, ?, ?, ?)


# section02
package com.ohgiraffers.associationmapping.section02.onetomany;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity(name="Section02Menu")
@Table(name="tbl_menu")
public class Menu {
    @Id
    private int menuCode;

    private String menuName;
    private int menuPrice;
    private int categoryCode;
    private String orderableStatus;
    //섹션1에서 메뉴 테이블에서 카테고리 테이블을 참조하는 걸 봤다면,
    // 이번엔 카테고리 테이블에서 메뉴 테이블을 참조하는 걸 보는 것이 목표이다.

    public Menu(){}

    public Menu(int menuCode, String menuName, int menuPrice, int categoryCode, String orderableStatus) {
        this.menuCode = menuCode;
        this.menuName = menuName;
        this.menuPrice = menuPrice;
        this.categoryCode = categoryCode;
        this.orderableStatus = orderableStatus;
    }

    public int getMenuCode() {
        return menuCode;
    }
   ...
    public void setOrderableStatus(String orderableStatus) {
        this.orderableStatus = orderableStatus;
    }

    @Override
    public String toString() {
        return "Menu{" +
                "menuCode=" + menuCode +
                ", menuName='" + menuName + '\'' +
                ", menuPrice=" + menuPrice +
                ", categoryCode=" + categoryCode +
                ", orderableStatus='" + orderableStatus + '\'' +
                '}';
    }
}

package com.ohgiraffers.associationmapping.section02.onetomany;

import jakarta.persistence.*;

import java.util.List;

@Entity(name = "category_and_menu")
@Table(name = "tbl_category")
public class Category {
    @Id
    private int categoryCode;

    private String  categoryName;
    private Integer refCategoryCode;

    @OneToMany
    @JoinColumn(name = "categoryCode")
    //@JoinColumn해줄 때 두 tbl이 각 key 이름이 다르다면
    //PK에 해당하는 key속성의 이름 말고
    //***FK에 해당하는 key 속성의 이름***을 적어줘야한다.
    private List<Menu> menuList;

    public Category(){}

    public Category(int categoryCode, String categoryName, Integer refCategoryCode, List<Menu> menuList) {
        ...
    }

    public int getCategoryCode() {
        return categoryCode;
    }
...
    public void setMenuList(List<Menu> menuList) {
        this.menuList = menuList;
    }

    @Override
    public String toString() {
        ...
    }
}

package com.ohgiraffers.associationmapping.section02.onetomany;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class OneToManyService {
    //Service는 Repository를 불러오는 역할을 하기 때문에 생성자 방식으로 의존성을 주입해준다.
    private OnetoManyRepository onetoManyRepository;

    public OneToManyService(OnetoManyRepository onetoManyRepository){
        this.onetoManyRepository = onetoManyRepository;
    }

    @Transactional
    public Category findCategory(int categoryCode){
        Category category = onetoManyRepository.find(categoryCode);
        System.out.println("Category : " +category);
        return category;
    }
}

package com.ohgiraffers.associationmapping.section02;

import com.ohgiraffers.associationmapping.section02.onetomany.Category;
import com.ohgiraffers.associationmapping.section02.onetomany.OneToManyService;
import jakarta.persistence.Table;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class OneToManyServiceTests {
    //field injection with @Autowired
    @Autowired
    private OneToManyService oneToManyService;

    @DisplayName("test searching 1:N relation")
    @Test
    void OneToManyFindTest(){
        //given
        int categoryCode = 4;

        //when
        Category category = oneToManyService.findCategory(categoryCode);

        //then
        assertNotNull(category);
    }
}

# 결과 Results : OneToManyservice에  System.out.println("Category : " +category); 없으면 
Hibernate: 
    select
        c1_0.category_code,
        c1_0.category_name,
        c1_0.ref_category_code 
    from
        tbl_category c1_0 
    where
        c1_0.category_code=? 
# 이것만 뜸

Hibernate: 
    select
        c1_0.category_code,
        c1_0.category_name,
        c1_0.ref_category_code 
    from
        tbl_category c1_0 
    where
        c1_0.category_code=?
Hibernate: 
    select
        ml1_0.category_code,
        ml1_0.menu_code,
        ml1_0.menu_name,
        ml1_0.menu_price,
        ml1_0.orderable_status 
    from
        tbl_menu ml1_0 
    where
        ml1_0.category_code=?
Category{categoryCode=4, categoryName='한식', refCategoryCode=1, menuList=[Menu{menuCode=5, menuName='앙버터김치찜', menuPrice=13000, categoryCode=4, orderableStatus='N'}, Menu{menuCode=6, menuName='생마늘샐러드', menuPrice=12000, categoryCode=4, orderableStatus='Y'}, Menu{menuCode=7, menuName='민트미역국', menuPrice=15000, categoryCode=4, orderableStatus='Y'}, Menu{menuCode=8, menuName='한우딸기국밥', menuPrice=20000, categoryCode=4, orderableStatus='Y'}]}


# section01 - Menu.java에서
    // FetchType.EAGER = 즉시 로딩
    // FetchType.LAZY = 지연 로딩
    // @ManyToOne일 때는 EAGER(즉시 로딩)가 Default
    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)
# 로 바꾸면, Result = 
Hibernate: 
    select
        m1_0.menu_code,
        m1_0.category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status 
    from
        tbl_menu m1_0 
    where
        m1_0.menu_code=?

# 다시 ...로 바꾸면
    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
# Result
   select
        m1_0.menu_code,
        c1_0.category_code,
        c1_0.category_name,
        c1_0.ref_category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status 
    from
        tbl_menu m1_0 
    left join
        tbl_category c1_0 
            on c1_0.category_code=m1_0.category_code 
    where
        m1_0.menu_code=?


# OneToMany의 Default = FetchType.LAZY (지연로딩)
# 만약 section02 - Category에서
    @OneToMany(fetch = FetchType.EAGER)
# 로 바뀐다면 
# Result
select
        c1_0.category_code,
        c1_0.category_name,
        c1_0.ref_category_code,
        ml1_0.category_code,
        ml1_0.menu_code,
        ml1_0.menu_name,
        ml1_0.menu_price,
        ml1_0.orderable_status 
    from
        tbl_category c1_0 
    left join
        tbl_menu ml1_0 
            on c1_0.category_code=ml1_0.category_code 
    where
        c1_0.category_code=?
Category : Category{categoryCode=4, categoryName='한식', refCategoryCode=1 ...... Menu{menuCode=8, menuName='한우딸기국밥', menuPrice=20000, categoryCode=4, orderableStatus='Y'}]}

package com.ohgiraffers.associationmapping.section02;

import com.ohgiraffers.associationmapping.section02.onetomany.Category;
import com.ohgiraffers.associationmapping.section02.onetomany.CategoryDTO;
import com.ohgiraffers.associationmapping.section02.onetomany.MenuDTO;
import com.ohgiraffers.associationmapping.section02.onetomany.OneToManyService;
import jakarta.persistence.Table;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class OneToManyServiceTests {
    //field injection with @Autowired
    @Autowired
    private OneToManyService oneToManyService;

    private static Stream<Arguments> getMenuInfo() {
        return Stream.of(
                Arguments.of(321, "스파게티 돈가스", 30000, 321, "분식퓨전", "Y")
        );
    }
    @DisplayName("1:N 연관관계 객체 삽입 테스트")
    @ParameterizedTest
    @MethodSource("getMenuInfo")
    void oneToManyInsertTest(
            int menuCode, String menuName, int menuPrice,
            int categoryCode, String categoryName, String orderableStatus
    ) {
        //given
        CategoryDTO categoryInfo = new CategoryDTO(
                categoryCode, categoryName, null, null
        );
        List<MenuDTO> menuList = new ArrayList<>();
        MenuDTO menuInfo = new MenuDTO(
                menuCode, menuName, menuPrice,categoryCode, orderableStatus
        );
        menuList.add(menuInfo);
        categoryInfo.setMenuList(menuList);
        //when
        //then
        Assertions.assertDoesNotThrow(
                () -> oneToManyService.registCategory(categoryInfo)
        );
    }
}

# Result 1 
Hibernate: 
    insert 
    into
        tbl_category
        (category_name, ref_category_code, category_code) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        tbl_menu
        (category_code, menu_name, menu_price, orderable_status, menu_code) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    update
        tbl_menu 
    set
        category_code=? 
    where
        menu_code=?

# Result 2 : tbl_menu, tbl_category 추가 완료 확인
# tbl_menu
# 321,스파게티 돈가스,30000,321,Y
# tbl_category
# 321,분식퓨전, <null>


package com.ohgiraffers.associationmapping.section01.manytoone;

import jakarta.persistence.*;

@Entity(name="menu_and_category")
@Table(name="tbl_menu")
public class Menu {
    @Id
    private int menuCode;
    private String menuName;
    private int menuPrice;

    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    // .PERSIST : 영속성 전이
    // (cascade = CascadeType.PERSIST) 이걸 넣어야
    // "category도 같이 영속화할게요(=카테고리도 같이 추가할게요)"가 됨.

    /* 영속성 전이
     * 특정 엔티티를 영속화 할 때 연관 된 엔티티도 함께 영속화 한다는 의미이다.*/
    /* 기본적으로는 즉시 로딩되지만 필요에 따라 지연 로딩으로 변경할 수 있다. */

    // FetchType.EAGER = 즉시 로딩
    // FetchType.LAZY = 지연 로딩
    // @ManyToOne일 때는 EAGER 즉시 로딩이 Default
    @JoinColumn(name = "categoryCode") //@JoinColumn의 이름은 FK 이름으로 적어야 한다
    private Category category;
    //연관관계 매핑을 보고 싶기 때문에 categoryCode라고 안 적고 category라고 적은 후
    //Category entity class에서 연관관계 매핑 사용하는 방법을 알아본다.

    private String orderableStatus;

    public Menu(){}

    public Menu(int menuCode, String menuName, int menuPrice, Category category, String orderableStatus) {
        this.menuCode = menuCode;
        ...
        this.orderableStatus = orderableStatus;
    }

    public int getMenuCode() {
        return menuCode;
    }
...
    public void setOrderableStatus(String orderableStatus) {
        this.orderableStatus = orderableStatus;
    }

    @Override
    public String toString() {
       ...
    }
}
