# 20250719 Developing Day 11
## 1. [FIX] JwtTokenProvider : generateTokenDTO method
(Now)

    public TokenDTO generateTokenDTO(User user) {
        log.info("[TokenProvider] generateTokenDTO() Start");

        long now = System.currentTimeMillis();
        Date accessTokenExpiresIn = new Date(now + expiration);

        // User 엔티티의 isAdmin 필드를 기반으로 권한 정보를 가져옵니다.
        // isAdmin 필드를 통해 "ROLE_USER" 또는 "ROLE_ADMIN" 권한을 부여하는 예시입니다.
        String authorities = user.isAdmin() ? "ROLE_ADMIN" : "ROLE_USER";

        // JWT 토큰 생성
        String accessToken = Jwts.builder()
                // 토큰의 주체 (사용자 ID) 설정
                .setSubject(user.getUserId())
                // 권한 정보를 클레임으로 추가
                .claim(AUTHORITIES_KEY, authorities)
                // 토큰 만료 시간 설정
                .setExpiration(accessTokenExpiresIn)
                // 서명에 사용할 키와 알고리즘
                .signWith(key, SignatureAlgorithm.HS512)
                .compact();

        System.out.println("조립된 accessToken 확인 = " + accessToken);

        log.info("[TokenProvider] generateTokenDTO() End");

        // TokenDTO 생성 시 사용자 이름(userId)과 토큰 만료 시간을 사용합니다.
        // user.getUserId()를 사용하여 사용자 ID를 직접 전달합니다.
        return new TokenDTO(BEARER_TYPE, user.getUserId(), accessToken, accessTokenExpiresIn.getTime());
    }

(Before)

      public JwtTokenProvider(@Value("${jwt.secret}") String secret,
                            @Value("${jwt.token-validity-in-milliseconds}") long tokenValidityInMilliseconds, AuthUserService authUserService) {
        // 시크릿 키를 Base64 디코딩하여 Key 객체 생성
        this.key = Keys.hmacShaKeyFor(secret.getBytes());
        this.expiration = tokenValidityInMilliseconds;
        this.authUserService = authUserService;
    }

    public TokenDTO generateTokenDTO(User user) {
        log.info("[TokenProvider] generateTokenDTO() Start");

        long now = System.currentTimeMillis();
        Date accessTokenExpiresIn = new Date(now + expiration);

        // JWT 토큰 생성
        String accessToken = Jwts.builder()
                // 토큰의 주체 (사용자 ID) 설정
                .setSubject(user.getUserId())
                // 권한 정보를 클레임으로 추가
                .claim(AUTHORITIES_KEY, authorities)
                // 토큰 만료 시간 설정
                .setExpiration(accessTokenExpiresIn)
                // 서명에 사용할 키와 알고리즘
                .signWith(key, SignatureAlgorithm.HS512)
                .compact();

        System.out.println("조립된 accessToken 확인 = " + accessToken);

        log.info("[TokenProvider] generateTokenDTO() End");

        // TokenDTO 생성 시 필요한 사용자 이름은 authentication.getName()에서 가져올 수 있습니다.
        // 만약 TokenDTO에 userName 대신 userId가 필요하다면, UserDetails 구현체에서 해당 정보를 가져와야 합니다.
        // 여기서는 authentication.getName()을 사용자 이름으로 가정합니다.
        return new TokenDTO(BEARER_TYPE, user.getUserId(), accessToken, accessTokenExpiresIn.getTime());
    }

## 2. [FIX] JwtTokenProvider: 
(Now)
    
    /**
     * JWT 토큰으로부터 인증 정보를 추출합니다.
     * @param token JWT 토큰
     * @return 인증 객체 (Authentication)
     */
    public Authentication getAuthentication(String token) {
        // 토큰에서 클레임(Claims) 정보를 파싱합니다.
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();

        // 클레임에서 권한 정보를 추출하여 GrantedAuthority 컬렉션으로 변환합니다.
        // 권한 정보가 콤마로 구분된 문자열이라고 가정합니다.
        Collection<? extends GrantedAuthority> authorities =
                Arrays.stream(claims.get(AUTHORITIES_KEY).toString().split(","))
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList());

        // UserDetails 객체를 생성합니다.
        // AuthUserService를 통해 UserDetails를 로드합니다.
        // 이 방법이 더 안전하고 Spring Security의 UserDetailsService 계약을 따릅니다.
        UserDetails principal = authUserService.loadUserByUsername(claims.getSubject());

        // UsernamePasswordAuthenticationToken을 반환하여 SecurityContext에 저장할 수 있도록 합니다.
        // principal (UserDetails), credentials (비밀번호, 여기서는 빈 문자열), authorities
        return new UsernamePasswordAuthenticationToken(principal, "", authorities);
    }

(Before)

    /**
     * JWT 토큰으로부터 인증 정보를 추출합니다.
     * @param token JWT 토큰
     * @return 인증 객체 (Authentication)
     */
    public Authentication getAuthentication(String token) {
        // 토큰에서 클레임(Claims) 정보를 파싱
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();

        // 클레임에서 권한 정보를 추출하여 GrantedAuthority 컬렉션으로 변환합니다.
        Collection<? extends GrantedAuthority> authorities =
                Arrays.stream(claims.get("auth").toString().split(","))
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList());

        // UserDetails 객체를 생성합니다. (여기서는 Spring Security의 User 클래스를 사용)
        UserDetails principal = new User(claims.getSubject(), "", authorities); 
        //authorities에서 오류 빨간줄 생김. required type은 boolean인데 Provided type은 Colletion <capture of ?extends GrantedAuthority>여서

        // UsernamePasswordAuthenticationToken을 반환하여 SecurityContext에 저장할 수 있도록 합니다.
        return new UsernamePasswordAuthenticationToken(principal, "", authorities);
    }

## 3. Edit LoginSuccessHandler


## 4. Revise generateTokenDTO in JwtTokenProvider
(Now)
    
    

(Before)

    public TokenDTO generateTokenDTO(User user) {
        log.info("[TokenProvider] generateTokenDTO() Start");

        long now = System.currentTimeMillis();
        Date accessTokenExpiresIn = new Date(now + expiration);

        // User 엔티티의 isAdmin 필드를 기반으로 권한 정보를 가져옵니다.
        // isAdmin 필드를 통해 "ROLE_USER" 또는 "ROLE_ADMIN" 권한을 부여하는 예시입니다.
        String authorities = user.isAdmin() ? "ROLE_ADMIN" : "ROLE_USER";

        // JWT 토큰 생성
        String accessToken = Jwts.builder()
                // 토큰의 주체 (사용자 ID) 설정
                .setSubject(user.getUserId())
                // 권한 정보를 클레임으로 추가
                .claim(AUTHORITIES_KEY, authorities)
                // 토큰 만료 시간 설정
                .setExpiration(accessTokenExpiresIn)
                // 서명에 사용할 키와 알고리즘
                .signWith(key, SignatureAlgorithm.HS512)
                .compact();

        System.out.println("조립된 accessToken 확인 = " + accessToken);

        log.info("[TokenProvider] generateTokenDTO() End");

        // TokenDTO 생성 시 사용자 이름(userId)과 토큰 만료 시간을 사용합니다.
        // user.getUserId()를 사용하여 사용자 ID를 직접 전달합니다.
        return new TokenDTO(BEARER_TYPE, user.getUserId(), accessToken, accessTokenExpiresIn.getTime());
    }

## 5. LoginSuccessHandler 관련 질문
### 현재 오류 분석: `String.valueOf(jwtTokenProvider.generateTokenDTO(loginUserDTO));`

제공해주신 사진에는 `onAuthenticationSuccess` 메서드 시그니처만 보이지만, 가장 최근의 대화 내용으로 미루어 짐작컨대 오류는 바로 이 줄에서 발생했을 가능성이 큽니다:

```java
String jwtToken = String.valueOf(jwtTokenProvider.generateTokenDTO(loginUserDTO));
```

**왜 오류가 발생할까요?**

이전 대화에서 우리가 `JwtTokenProvider`의 `generateTokenDTO` 메서드를 `public TokenDTO generateTokenDTO(LoginUserDTO loginUserDTO)`로 수정했죠? 이 메서드는 이제 `TokenDTO`라는 **객체**를 반환합니다.

문제는 그 다음 줄 `String jwtToken = String.valueOf(...)`에 있습니다.

* `String.valueOf()` 메서드는 모든 종류의 객체를 문자열로 변환해주는 유틸리티 메서드입니다.
  * 하지만 `TokenDTO` 객체를 `String.valueOf()`로 변환하면, 단순히 `TokenDTO` 객체의 `toString()` 메서드가 호출됩니다. 특별히 `toString()`을 오버라이드 하지 않았다면, `TokenDTO` 객체의 메모리 주소와 같은 의미 없는 문자열(예: `com.header.header.auth.model.dto.TokenDTO@abcdef12`)이 될 가능성이 높습니다.
  * 우리가 `jwtToken` 변수에 넣고 싶은 것은 **순수한 JWT 문자열**이지, `TokenDTO` 객체 전체의 문자열 표현이 아닙니다.

\*\*결론적으로, `jwtTokenProvider.generateTokenDTO()`가 반환하는 `TokenDTO` 객체에서 우리가 원하는 \*\*실제 JWT 문자열(AccessToken)**을 직접 꺼내야 하는데, `String.valueOf()`는 그렇게 해주지 못하기 때문에 문제가 되는 것입니다.**

-----

### 올바른 코드 수정 및 자세한 설명

자, 그럼 어떻게 수정해야 할까요? `TokenDTO` 객체 안에서 우리가 필요한 `accessToken` 필드를 직접 꺼내야 합니다.

**수정된 `LoginSuccessHandler` 코드:**

```java
package com.header.header.auth.config.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.header.header.auth.config.JwtTokenProvider;
import com.header.header.auth.model.AuthDetails;
import com.header.header.auth.model.dto.LoginUserDTO;
import com.header.header.auth.model.dto.TokenDTO; // TokenDTO 임포트 추가!
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@Component
public class LoginSuccessHandler implements AuthenticationSuccessHandler {

    private final JwtTokenProvider jwtTokenProvider;
    private final ObjectMapper objectMapper;

    public LoginSuccessHandler(JwtTokenProvider jwtTokenProvider, ObjectMapper objectMapper) {
        this.jwtTokenProvider = jwtTokenProvider;
        this.objectMapper = objectMapper;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {

        AuthDetails authDetails = null;
        if (authentication.getPrincipal() instanceof AuthDetails) {
            authDetails = (AuthDetails) authentication.getPrincipal();
        }

        LoginUserDTO loginUserDTO = null;
        if (authDetails != null) {
            loginUserDTO = authDetails.getLoginUserDTO();
        }

        Map<String, Object> responseBody = new HashMap<>();

        responseBody.put("message", "로그인 성공입니다.");

        // **** 이 부분이 핵심 수정 포인트입니다! ****
        // 1. generateTokenDTO는 TokenDTO 객체를 반환합니다.
        TokenDTO tokenDto = jwtTokenProvider.generateTokenDTO(loginUserDTO);
        
        // 2. TokenDTO 객체에서 실제 JWT 문자열(accessToken)을 추출합니다.
        String accessToken = tokenDto.getAccessToken(); // TokenDTO에 getAccessToken() 메서드가 있다고 가정합니다.

        responseBody.put("token", accessToken); // 추출한 accessToken을 응답에 담습니다.

        if (loginUserDTO != null) {
            responseBody.put("userInfo", loginUserDTO);
        }

        response.setStatus(HttpServletResponse.SC_OK);
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        objectMapper.writeValue(response.getWriter(), responseBody);
    }
}
```

-----

### 수정된 코드의 흐름 및 자세한 설명 (초보자용)

자, 이제 수정된 부분을 중심으로 코드를 다시 한 번 자세히 설명해 드릴게요.

**1. `TokenDTO tokenDto = jwtTokenProvider.generateTokenDTO(loginUserDTO);`**

* **무슨 일이 일어나나요?** 이전에 `JwtTokenProvider`의 `generateTokenDTO` 메서드를 `LoginUserDTO`를 받도록 수정했죠? 이 메서드는 JWT 토큰 문자열 하나만 덜렁 반환하는 것이 아니라, `TokenDTO`라는 \*\*"정보 묶음 객체"\*\*를 반환하도록 설계되어 있습니다.
    * `TokenDTO` 안에는 아마 `accessToken` (실제 JWT 문자열), `refreshToken` (있다면), `grantType` (Bearer 같은), `expiresIn` (만료 시간) 등 여러 정보들이 함께 들어 있을 거예요.
  * `jwtTokenProvider.generateTokenDTO(loginUserDTO)`를 호출하면, `JwtTokenProvider`가 로그인한 사용자(`loginUserDTO`) 정보를 바탕으로 JWT를 만들고, 그 JWT를 포함한 `TokenDTO` 객체를 생성해서 반환합니다.
  * 우리는 이 반환된 `TokenDTO` 객체를 `tokenDto`라는 변수에 저장합니다. `tokenDto`는 이제 여러 JWT 관련 정보를 담고 있는 '상자'라고 생각하면 됩니다.

**2. `String accessToken = tokenDto.getAccessToken();`**

* **무슨 일이 일어나나요?** 앞서 `tokenDto`라는 '상자'를 얻었죠? 이제 이 상자 안에서 우리가 클라이언트에게 넘겨주고 싶은 \*\*"실제 JWT 토큰 문자열"\*\*만 꺼내야 합니다.
  * `TokenDTO` 클래스에는 `getAccessToken()`이라는 메서드가 있을 거예요 (만약 없다면, `TokenDTO` 클래스에 `private String accessToken;` 필드와 `public String getAccessToken() { return accessToken; }` 메서드를 추가해야 합니다).
  * 이 `getAccessToken()` 메서드를 호출하면 `TokenDTO` 상자 안에 있던 순수한 JWT 토큰 문자열만을 얻을 수 있습니다.
  * 이렇게 얻은 순수한 JWT 토큰 문자열을 `accessToken`이라는 `String` 타입 변수에 저장합니다.

**3. `responseBody.put("token", accessToken);`**

* 이제 `accessToken` 변수에는 클라이언트에게 보내야 할 정확한 JWT 토큰 문자열만 들어 있습니다.
  * 이 `accessToken`을 `responseBody` 맵에 "token"이라는 키로 담아서 JSON 응답에 포함시킵니다.

-----

**왜 `String.valueOf()`가 문제가 되었을까요? 다시 한번 상기\!**

`String.valueOf(객체)`는 그 객체의 `toString()` 메서드를 호출해서 문자열로 변환합니다. `TokenDTO` 클래스에 `toString()` 메서드를 따로 구현하지 않았다면, 자바 기본 `Object` 클래스의 `toString()`이 호출될 텐데, 이는 `클래스명@해시코드` 형태의 문자열(예: `com.header.header.auth.model.dto.TokenDTO@abcdef12`)을 반환합니다.

클라이언트가 이 `"com.header.header.auth.model.dto.TokenDTO@abcdef12"` 같은 문자열을 JWT 토큰으로 인식하고 사용하려고 하면 당연히 오류가 나겠죠? 우리가 필요한 건 진짜 토큰 문자열이니까요.

-----

**핵심 정리:**

* 메서드가 **객체**를 반환하면, 그 객체 안의 원하는 **필드 값**을 `.get필드명()`으로 직접 꺼내야 합니다.
  * `String.valueOf()`는 단순히 객체의 문자열 표현을 얻는 것이지, 객체 안의 특정 필드를 추출하는 것이 아닙니다.

### 하지만 String jwtToken = jwtTokenProvider.generateTokenDTO(loginUserDTO); 를 String.valueOf로 감싸지 않으면 사진과 같은 오류가 생겨. 이건 왜 생기는 거야?
-----

아하, 드디어 딱 맞닥뜨린 문제네요\! `String jwtToken = jwtTokenProvider.generateTokenDTO(loginUserDTO);` 이 줄에서 **`Required type: String`인데 `Provided: TokenDTO`** 라는 오류가 발생하는 이유를 아주 자세히 설명해 드릴게요. 스프링 시큐리티를 처음 배우는 학생의 눈높이에서요.

-----

### 오류 원인 분석: `Required type: String`, `Provided: TokenDTO`

이 오류는 아주 간단하면서도 중요한 자바의 기본 규칙 때문에 발생합니다.

**1. `jwtTokenProvider.generateTokenDTO(loginUserDTO)`의 반환 값:**

* 우리가 방금 `JwtTokenProvider` 클래스에서 `generateTokenDTO` 메서드를 `public TokenDTO generateTokenDTO(LoginUserDTO loginUserDTO)` 이렇게 수정했죠?
* 이 메서드는 이름 그대로 `TokenDTO`라는 \*\*객체(Object)\*\*를 만들어 반환합니다. `TokenDTO`는 JWT 토큰(문자열), 만료 시간, 토큰 타입 등 여러 정보를 담고 있는 **상자** 같은 존재예요.

**2. `String jwtToken = ...` 의 변수 타입:**

* `String jwtToken` 이렇게 선언된 부분은 `jwtToken`이라는 변수에는 \*\*오직 `String` 타입의 값 (즉, 문자열)\*\*만 담을 수 있다고 선언한 것입니다.

**3. 문제 발생:**

* `String jwtToken =` 오른쪽에 `TokenDTO` 객체가 오고, 왼쪽에 `String` 타입 변수가 있습니다.
* 자바는 "야, `jwtToken` 변수에는 `String`만 넣을 수 있는데, 네가 지금 `TokenDTO` 객체를 넣으려 하네? 이건 타입이 안 맞잖아\!" 라고 불평하는 것입니다.
* 컴퓨터는 `TokenDTO` 객체 자체를 바로 문자열로 인식하지 못해요. 우리가 명시적으로 "이 객체 안에서 어떤 문자열을 가져와서 넣어라"고 지시해 줘야 합니다.

**비유로 설명해 볼까요?**

* `TokenDTO`는 **선물 상자**입니다. 이 상자 안에는 "선물" (진짜 JWT 문자열)도 있고, "포장지 색깔" (토큰 타입), "유통기한" (만료 시간) 같은 여러 정보가 들어있습니다.
* `String jwtToken`은 \*\*"오직 선물 내용물만 담을 수 있는 주머니"\*\*입니다.
* `String jwtToken = jwtTokenProvider.generateTokenDTO(loginUserDTO);`는 "선물 상자 통째로 주머니에 넣어\!" 라고 하는 것과 같습니다.
* 당연히 주머니에는 상자가 통째로 들어가지 않습니다. 주머니에는 **상자 안의 내용물(진짜 JWT 문자열)만** 넣을 수 있는 거죠.

-----

### 해결 방법: `TokenDTO`에서 `accessToken` 필드 직접 꺼내기

이 문제를 해결하는 방법은 바로 `TokenDTO` 상자에서 우리가 필요로 하는 \*\*"진짜 JWT 토큰 문자열" (즉, `accessToken` 필드)\*\*을 명시적으로 꺼내는 것입니다.

`TokenDTO` 클래스에는 아마 `getAccessToken()`이라는 메서드가 있을 거예요. 이 메서드를 사용해야 합니다.

**수정 코드 다시 확인:**

```java
// AuthDetails에서 LoginUserDTO를 안전하게 가져옵니다.
LoginUserDTO loginUserDTO = null;
if (authentication.getPrincipal() instanceof AuthDetails) {
    AuthDetails authDetails = (AuthDetails) authentication.getPrincipal();
    loginUserDTO = authDetails.getLoginUserDTO(); // AuthDetails에서 LoginUserDTO를 가져옵니다.
}

Map<String, Object> responseBody = new HashMap<>();
responseBody.put("message", "로그인 성공입니다.");

// 1. jwtTokenProvider.generateTokenDTO(loginUserDTO) 호출의 결과는 TokenDTO 객체입니다.
TokenDTO tokenDto = jwtTokenProvider.generateTokenDTO(loginUserDTO);

// 2. TokenDTO 객체에서 실제 JWT 문자열(accessToken)을 추출합니다.
//    TokenDTO 클래스에 getAccessToken() 메서드가 있다고 가정합니다.
String jwtToken = tokenDto.getAccessToken(); // <--- 핵심 수정!

responseBody.put("token", jwtToken); // 이제 String 타입의 JWT 토큰이 제대로 들어갑니다.

if (loginUserDTO != null) {
    responseBody.put("userInfo", loginUserDTO);
}

response.setStatus(HttpServletResponse.SC_OK);
response.setContentType("application/json");
response.setCharacterEncoding("UTF-8");
objectMapper.writeValue(response.getWriter(), responseBody);
```

**새로운 흐름:**

1.  `jwtTokenProvider.generateTokenDTO(loginUserDTO)`를 호출합니다. 이 메서드는 `TokenDTO`라는 "선물 상자"를 반환합니다.
2.  이 "선물 상자"를 `TokenDTO tokenDto`라는 변수에 저장합니다.
3.  `tokenDto.getAccessToken()`을 호출하여 "선물 상자" 안의 "선물 내용물" (진짜 JWT 문자열)을 꺼냅니다.
4.  꺼낸 진짜 JWT 문자열을 `String jwtToken` 변수에 저장합니다. 이제 타입이 딱 맞습니다\!
5.  `responseBody.put("token", jwtToken)`로 클라이언트에게 진짜 JWT 문자열을 보냅니다.

-----

### 왜 `String.valueOf()`로 감싸면 오류가 안 났을까요? (하지만 잘못된 방식)

`String jwtToken = String.valueOf(jwtTokenProvider.generateTokenDTO(loginUserDTO));` 이렇게 했을 때 오류가 사라진 이유는, `String.valueOf()`가 **모든 객체를 강제로 문자열로 만들어주기 때문**입니다.

* `String.valueOf(TokenDTO 객체)`를 하면, 자바는 `TokenDTO` 객체의 `toString()` 메서드를 호출합니다.
* 만약 `TokenDTO` 클래스에 `toString()` 메서드를 따로 구현하지 않았다면, 기본적으로 `com.header.header.auth.model.dto.TokenDTO@abcdef12`와 같은 "클래스명@메모리주소" 형태의 문자열이 반환됩니다.
* 이 반환된 "클래스명@메모리주소" 문자열은 `String` 타입이므로, `String jwtToken` 변수에 할당하는 데에는 **타입 오류가 발생하지 않습니다.**

**하지만 이것은 올바른 JWT 토큰이 아닙니다.** 클라이언트는 `Bearer com.header.header.auth.model.dto.TokenDTO@abcdef12` 같은 헤더를 받고는 "이게 뭐야?" 하고 이해하지 못할 것입니다. 결국 인증 실패로 이어지게 됩니다.

따라서 `String.valueOf()`로 감싸서 오류를 피하는 것은 `TokenDTO` 상자를 주머니에 억지로 구겨 넣는 것과 같으며, 실제로는 원하는 결과를 얻지 못하는 **잘못된 해결 방법**입니다.

-----

이제 이 설명으로 왜 오류가 났고, 어떻게 수정해야 하는지 명확히 이해하셨기를 바랍니다\!

## 6. Rewrite LoginSuccessHandler - onAuthenticationSuccess

(Before2)

     @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {

        LoginUserDTO loginUserDTO = null;
        if (authentication.getPrincipal() instanceof AuthDetails) {
            AuthDetails authDetails = (AuthDetails) authentication.getPrincipal();
            loginUserDTO = authDetails.getLoginUserDTO(); // AuthDetails에서 LoginUserDTO를 가져옵니다.
        }

        Map<String, Object> responseBody = new HashMap<>();
        responseBody.put("message", "로그인 성공입니다.");

    // 1. jwtTokenProvider.generateTokenDTO(loginUserDTO) 호출의 결과는 TokenDTO 객체입니다.
    TokenDTO tokenDto = jwtTokenProvider.generateTokenDTO(loginUserDTO);
    
    // 2. TokenDTO 객체에서 실제 JWT 문자열(accessToken)을 추출합니다.
    //    TokenDTO 클래스에 getAccessToken() 메서드가 있다고 가정합니다.
    String jwtToken = tokenDto.getAccessToken(); // <--- 핵심 수정!

        responseBody.put("token", jwtToken); // 이제 String 타입의 JWT 토큰이 제대로 들어갑니다.

        if (loginUserDTO != null) {
            responseBody.put("userInfo", loginUserDTO);
        }

        response.setStatus(HttpServletResponse.SC_OK);
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        objectMapper.writeValue(response.getWriter(), responseBody);

        // 7. 응답 본문에 JSON 데이터 작성
        // 준비된 responseBody Map을 JSON으로 변환하여 클라이언트에게 전송합니다.
        objectMapper.writeValue(response.getWriter(), responseBody);
    }

(Before 1)

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        User user = null;
        if (authentication.getPrincipal() instanceof AuthDetails) {
            user = ((AuthDetails) authentication.getPrincipal()).getUser();
        }

        Map<String, Object> responseBody = new HashMap<>();

        // 모든 성공적인 로그인에 대해 동일한 성공 메시지
        responseBody.put("message", "로그인 성공입니다.");

        String jwtToken = jwtTokenProvider.generateTokenDTO(authentication);
        responseBody.put("token", jwtToken);

        if (user != null) {
            // user 객체에 isAdmin 정보가 포함되어 ObjectMapper에 의해 JSON으로 직렬화됩니다.
            // 클라이언트는 userInfo.isAdmin을 통해 관리자 여부를 확인할 수 있습니다.
            responseBody.put("userInfo", user);
        }

        response.setStatus(HttpServletResponse.SC_OK);

        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        objectMapper.writeValue(response.getWriter(), responseBody);
    }

(Far before)

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        // JWT 토큰을 생성합니다.
        String jwtToken = jwtTokenProvider.generateTokenDTO(authentication);

        // 응답 본문에 포함할 데이터를 구성합니다.
        Map<String, Object> responseBody = new HashMap<>();
        responseBody.put("message", "로그인 성공");
        responseBody.put("token", jwtToken); // 생성된 JWT 토큰을 응답에 포함

        // 응답 헤더 설정
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        response.setStatus(HttpServletResponse.SC_OK); // HTTP 상태 코드 200 OK

        // 응답 본문에 JSON 데이터를 작성합니다.
        objectMapper.writeValue(response.getWriter(), responseBody);
    }

## 7. Fixed LoginSuccessHandler

    package com.header.header.auth.config.handler;
    ......
    /**
    * 로그인 성공 시 JWT 토큰을 생성하여 응답에 포함시키는 핸들러.
    * 사용자 정보를 응답 본문에 포함하며, 특정 사용자 상태에 따른 메시지를 제공한다.
    */
      @Component
      public class LoginSuccessHandler implements AuthenticationSuccessHandler {
    
      private final JwtTokenProvider jwtTokenProvider; // JWT 토큰 생성 및 관리를 위한 프로바이더
      private final ObjectMapper objectMapper; // JSON 직렬화를 위한 ObjectMapper
    
      /**
        * LoginSuccessHandler의 생성자입니다.
        * @param jwtTokenProvider JWT 토큰 프로바이더
        * @param objectMapper JSON 객체 매퍼
          */
          public LoginSuccessHandler(JwtTokenProvider jwtTokenProvider, ObjectMapper objectMapper) {
          this.jwtTokenProvider = jwtTokenProvider;
          this.objectMapper = objectMapper;
          }

      /**
        * 인증 성공 시 호출되는 메서드입니다.
        * JWT 토큰을 생성하고, 이를 응답 본문에 JSON 형태로 포함하여 클라이언트에 전송합니다.
        * @param request HTTP 요청 객체
        * @param response HTTP 응답 객체
        * @param authentication 인증 객체
        * @throws IOException 입출력 예외
        * @throws ServletException 서블릿 예외
          */
          @Override
          public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {
    
          // 응답 본문에 담을 데이터를 위한 Map 준비
          Map<String, Object> responseBody = new HashMap<>();
          responseBody.put("message", "로그인 성공입니다."); // 기본 성공 메시지 설정
    
          // 1. 인증된 사용자 정보 가져오기 (핵심!)
          // LoginUserDTO 변수를 여기서 바로 초기화하지 않고, 아래 if 블록 안에서 할당합니다.
          LoginUserDTO loginUserDTO = null;
    
          // Spring Security가 로그인에 성공하면, Authentication 객체 안에 UserDetails 타입의 Principal을 넣어줍니다.
          // 우리 프로젝트에서는 이 Principal이 바로 AuthDetails 객체입니다.
          if (authentication.getPrincipal() instanceof AuthDetails) {
          AuthDetails authDetails = (AuthDetails) authentication.getPrincipal();
          loginUserDTO = authDetails.getLoginUserDTO(); // AuthDetails에서 LoginUserDTO를 가져와 loginUserDTO에 할당
          }
    
          // 2. JWT 토큰 생성 및 사용자 정보 포함 로직
          // loginUserDTO가 성공적으로 가져와졌을 때만 (null이 아닐 때만) 토큰을 생성하고 사용자 정보를 추가합니다.
          if (loginUserDTO != null) { // loginUserDTO가 null이 아닌지 확인!
          // 2.1. jwtTokenProvider.generateTokenDTO(loginUserDTO) 호출의 결과는 TokenDTO 객체입니다.
          TokenDTO tokenDto = jwtTokenProvider.generateTokenDTO(loginUserDTO);
    
               // 2.2. TokenDTO 객체에서 실제 JWT 문자열(accessToken)을 추출합니다.
               String accessToken = tokenDto.getAccessToken();
    
               // 2.3. 추출한 accessToken을 응답 본문에 담습니다.
               responseBody.put("token", accessToken);
    
               // 2.4. 사용자 정보 (LoginUserDTO) 응답 본문에 포함
               responseBody.put("userInfo", loginUserDTO);
    
               // 2.5. HTTP 응답 상태 코드 설정 (200 OK)
               response.setStatus(HttpServletResponse.SC_OK);
    
          } else {
          // 만약 어떤 이유로든 loginUserDTO를 가져오지 못했다면 (이런 경우는 흔치 않지만, 방어적인 코딩)
          // 로그인 성공 핸들러까지 왔는데 사용자 정보가 없다는 것은 이상 상황이므로
          // 다른 상태 코드 (예: 500 Internal Server Error)를 보내거나,
          // 더 구체적인 에러 메시지를 보낼 수 있습니다.
          // 여기서는 일단 SC_INTERNAL_SERVER_ERROR를 예시로 들어봅니다.
          responseBody.put("message", "사용자 정보를 가져오는데 실패했습니다.");
          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
          }
    
          // 3. 공통 응답 헤더 설정
          response.setContentType("application/json");
          response.setCharacterEncoding("UTF-8");
    
          // 4. 응답 본문에 JSON 데이터 작성
          objectMapper.writeValue(response.getWriter(), responseBody);
          }
      }
