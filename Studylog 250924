Q: Is the modularization in JS is similar with encapsulation in JAVA?
A: (Professor's answer) Sort of. In OOP, modularization contain encapsulation.
// Asked specific explanation to Gemini in Korean: 
// https://g.co/gemini/share/b89463a48a34

//Javascript practice
//main.js
// - 문제 1. 기본 내보내기 (default export)
//   - circle.js 파일을 만들고, 반지름을 받아 원의 넓이를 반환하는 함수를 default export 하세요.
//   - main.js에서 불러와서 반지름이 5일 때 넓이를 출력하세요.
//   - (원의 넓이 공식: π × r², π는 3.14 사용)
// - 문제 2. default + named export 혼합
//   - utils.js 파일을 만들고:
//   - 문자열을 뒤집는 함수 reverseString(str) → default export
//   - 문자열을 대문자로 바꾸는 함수 toUpperCase(str) → named export
//   - main.js에서 두 함수를 모두 불러와서:
//   - "hello" → 뒤집기
//   - "world" → 대문자 변환
//   - 결과를 출력하세요.
import getRadius from "./circle.js";
import reverseString, { toUpperCase } from "./utils.js";

// import { reverseString, toUpperCase } from './utils.js';
/** This is the wrong approach since the reverseString is called by default export.
* {}중괄호로 utils.js에 있던 함수 두개를 동시에 불러오려고 했는데
* reverseString은 defaul로 정의되어서 그런지 중괄호로 불러와지지 않았다.
* SyntaxError: The requested module './utils.js' does not provide an export named 'reverseString'
* 대신 SyntaxError가 뜸.
*/

// At last, I combine the import statement with importing both function.
/**
* Now
* import reverseString, { toUpperCase } from "./utils.js";
*
* before 
* import reverseString from "./utils.js";
* import { toUpperCase } from "./utils.js";
*/

console.log(getRadius(5));
console.log(reverseString('hello'));
console.log(toUpperCase('world'));

//circle.js
// - 문제 1. 기본 내보내기 (default export)
//   - circle.js 파일을 만들고, 반지름을 받아 원의 넓이를 반환하는 함수를 default export 하세요.
//   - main.js에서 불러와서 반지름이 5일 때 넓이를 출력하세요.
//   - (원의 넓이 공식: π × r², π는 3.14 사용)
export default function getRadius (r){
  let result = 3.14 * (r * r);
  // when you use javascript, let or const (Declaring Variables) must attached.
  // 자바스크립트에서 변수를 쓸 때는 Declaring Variables을 꼭 써야하는 것 같다.
  // result = 3.14 * (r ** 2);
  // 처음에 이렇게 썼더니 
  /**
   * file:///Users/jaysmac/101ofJavaScript/04_javascript_practice/circle.js:6
  result = 3.14 * (r ** 2);
         ^
  ReferenceError: result is not defined
   */
  //위와 같은 오류가 떴다.
  return result;
}

//util.js
// - 문제 2. default + named export 혼합
//   - utils.js 파일을 만들고:
//   - 문자열을 뒤집는 함수 reverseString(str) → default export
//   - 문자열을 대문자로 바꾸는 함수 toUpperCase(str) → named export
//   - main.js에서 두 함수를 모두 불러와서:
//   - "hello" → 뒤집기
//   - "world" → 대문자 변환
//   - 결과를 출력하세요.
export default function reverseString(str) {
  let result = str.split('').reverse().join('');
  // reverse() method must used in char data type.
  /**
   * file:///Users/jaysmac/101ofJavaScript/04_javascript_practice/utils.js:10
  result = str.reverse();
               ^
  TypeError: str.reverse is not a function
   */
  return result;
}

export function toUpperCase(str){
  let result = str.toUpperCase();
  return result;
}


//Javascript Class and Instance practice
// - Book 클래스 작성 및 인스턴스 만들기
//   - Book 클래스를 작성하세요.
//     - 속성property: title, author
//     - 메서드method: printInfo() → "제목: OOO, 저자: XXX" 형식으로 출력
//     - new 키워드로 인스턴스를 만들고 메서드를 실행하세요.
class Book{
  constructor(title, author){
    this.title = title;
    this.author = author;
  }

  printInfo(title, author){
    console.log(`제목: ${title}, 저자: ${author}`);
  }
}

const result = new Book;
//new Book()이어도 되고 new Book이어도 기능은 제대로 작동함.
result.printInfo("모던 JS프로그래밍", "길벗춭판사");
//제목: 모던 JS프로그래밍, 저자: 길벗춭판사

// const result2 = new Book("JS프로그래밍 입문", "해냄출판사");
// result.printInfo(); // 제목: undefined, 저자: undefined

// const result2 = new Book("JS프로그래밍 입문", "해냄출판사");
// console.log(result);  //Book { title: undefined, author: undefined }
