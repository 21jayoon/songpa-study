package com.ohgiraffers.section01.exception;

public class Application1 {
    public static void main(String[] args) throws Exception {
        /*예외에 대해 이해하고 처리하기 위한 문법을 이용할 수 있다.
        * 예외처리
        * Java program 작성 시 자바 문법에 맞지 않는 경우
        * 코드를 컴파일하려고 할 때 컴파일 에러를 발생시킨다. 엄밀히 말하면 문법 상의 오류이다.
        * 혹은 Java 문법에 맞게 작성하여 컴파일에 문제가 없더라도,
        * 실행되면서 예상치 못하게 오류가 발생할 수 있다.
        * 컴퓨터 프로그램이 동작하는 도중에 예상치 못한 사태가 발생해
        * 실행 중인 프로그램이 영향을 받는 것을 오류Error와 예외Exception 두 가지로 구분할 수 있다.
        *
        * 오류 Error
        * 시스템 상에서 프로그램에 심각한 문제가 발생해 실행 중인 프로그램이 종료되는 것을 말한다.
        * 이러한 오류는 개발자가 미리 예측하여 처리하는 것이 불가능하며, 오류에 대한 처리는 할 수 없다.
        *
        * 예외 Exception (예외Exception의 최상위 클래스)
        * 오류와 마찬가지로 실행 중인 프로그램을 비정상적으로 종료시키지만
        * 발생할 수 있는 상황을 미리 예측하고 처리할 수 있는 미약한 오류를 말한다.
        * 개발자는 이러한 예외에 대해 예외처리를 통해 예외 상황을 적절히 처리하여
        * 코드의 흐름을 컨트롤할 수 있다.
        * */

        /* 강제로 예외 발생시킴
        * - throw new 예외클래스명();
        * 예외 처리 방법
        * 1. throw로 위임
        * 2. try-catch구문으로 처리
        * */

        /* 1. throw로 위임 */
        ExceptionTest et = new ExceptionTest();

        //et.checkEnoughMoney(10000, 50000);
        // error 뜬다. 왜? ExceptionTest에서 강제로 예외처리한 메소드checkEnoughMoney를 쓰고 있으니
        // 여기서도 ALT+ENTER 혹은 throws Exception으로 (예외처리) 위임을 해줘야 쓸 수 있음
        /* public class ExceptionTest에서 throw new Exception(); 삽입으로 수정 후 결과 :
        갖고 있는 돈은 50000원 입니다.
        상품을 구입하기 위한 금액이 충분합니다.
        즐거운 쇼핑 되세요~*/
        et.checkEnoughMoney(50000,10000);
        // FAILURE: Build failed with an exception.
        // Execution failed for task ':com.ohgiraffers.section01.exception.Application1.main()'.
        //> Process 'command 'C:\dev\jdk-17\bin\java.exe'' finished with non-zero exit value 1
    }
}
package com.ohgiraffers.section01.exception;

public class Application2 {
    public static void main(String[] args) {
        /*try-catch 블럭을 이용하여 예외처리를 할 수 있다.*/
        /* 2. try-catch구문으로 처리 */
        ExceptionTest et = new ExceptionTest();

//        try {
//            //1-try 실행
//            et.checkEnoughMoney(10000,50000); // 2-이 구문에서 예외가 발생치 않을 경우 그대로 출력
//        } catch (Exception e) {
//            //3-그러나 만일 위 구문에서 예외가 발생하면 catch쪽으로 떨어짐
//            throw new RuntimeException(e);
//            //4-catch 내 구문(throw) 실행
//        }
        try {
            /*예외 발생 가능성이 있는 메소드는 try 블럭 안에서 호출*/
            et.checkEnoughMoney(80000,50000);

            /*위의 메소드 호출 시 예외가 발생치 않는 경우 이후 내용이 실행됨*/
            System.out.println("==========상품 구입 가능==========");

        } catch (Exception e) {
            /*위의 메소드 호출 시 예외가 발생하는 경우 catch 블럭의 모드가 실행됨*/
            System.out.println("==========상품 구입 불가능==========");

        }
        System.out.println("프로그램을 종료합니다.");
        /* (상품가격 만원, 지갑에 5만원 있는 경우)
        갖고 잇는 돈은 50000원 입니다.
        상품을 구입하기 위한 금액이 충분합니다.
        즐거운 쇼핑 되세요~
        ==========상품 구입 가능==========
        프로그램을 종료합니다.
        */
        /* (상품가격 8만원, 지갑에 5만원있는 경우)
        갖고 있는 돈은 50000원 입니다.
        ==========상품 구입 불가능==========
        프로그램을 종료합니다.
        */
    }
}
package com.ohgiraffers.section01.exception;

public class ExceptionTest {
    public void checkEnoughMoney(int price, int money) throws Exception {
        System.out.println("갖고 있는 돈은 " + money+"원 입니다.");

        if(money >= price) {
            System.out.println("상품을 구입하기 위한 금액이 충분합니다.");
        } else {
            //강제로 예외발생(돈 없으면 상품 살 수 없잖아?)
            throw new Exception();
            /* 예외 발생 시키고 메소드 헤드(선언부)에 throws 구문 추가한다.
            (안 그러면 에러 떠서 컴파일 안 됨. ALT+ENTER로도 해결(=throw추가) 가능)
            예외를 발생시킨 쪽에서는 throws로 예외에 대한 책임을 위임해서
            해당 예외에 대한 처리를 강제화한다.
             */
        }
        System.out.println("즐거운 쇼핑 되세요~");
    }
}
package com.ohgiraffers.section02.userexception.exception;

public class MoneyNegativeException extends NegativeException {
    public MoneyNegativeException(String message) {
        super(message);
    }
}
package com.ohgiraffers.section02.userexception.exception;

public class NegativeException extends RuntimeException {
    public NegativeException(String message) {
        super(message);
    }
}
package com.ohgiraffers.section02.userexception.exception;

public class NotEnoughMoneyException extends Exception {

    public NotEnoughMoneyException() {}

    public NotEnoughMoneyException(String message) {
        super(message);
    }
}
package com.ohgiraffers.section02.userexception.exception;

public class PriceNegativeException extends NegativeException {
    public PriceNegativeException(String message) {
        super(message);
    }
}
package com.ohgiraffers.section02.userexception;

import com.ohgiraffers.section02.userexception.ExceptionTest;

public class Application1 {
    public static void main(String[] args) {
        /*사용자 정의 예외클래스 정의 후 발생한 사용자 정의의 예외를 처리할 수 있다.*/

        ExceptionTest et = new ExceptionTest();

        try {
            /* et.checkEnoughMoney(50000, 30000);
            //userexception.exception.NotEnoughMoneyException: 가진 돈보다 상품가격이 더 비쌉니다. */

            /* et.checkEnoughMoney(-50000, 50000);
            //userexception.exception.PriceNegativeException: 상품 가격은 음수일 수 없습니다. */

            /* et.checkEnoughMoney(50000, -60000);
            //com.ohgiraffers.section02.userexception.exception.MoneyNegativeException: 갖고 있는 돈은 음수일 수 없습니다. */

            et.checkEnoughMoney(30000, 50000); // 가진 돈이 충분합니다. 즐거운 쇼핑하세요!

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
package com.ohgiraffers.section02.userexception;

import com.ohgiraffers.section02.userexception.exception.MoneyNegativeException;
import com.ohgiraffers.section02.userexception.exception.NotEnoughMoneyException;
import com.ohgiraffers.section02.userexception.exception.PriceNegativeException;

public class Application2 {

    public static void main(String[] args) {

        /* comment. 다양한 타입의 예외를 multi block을 이용해서 처리할 수 있다. */

        ExceptionTest et = new ExceptionTest();

        try {
            // et.checkEnoughMoney(-20000, 30000);
            /* PriceNagativeException 발생!
            상품 가격은 음수일 수 없습니다.
            finally 블럭의 내용이 동작함 */

            // et.checkEnoughMoney(1000, -3000);
            /* MoneyNagativeException 발생!
            갖고 있는 돈은 음수일 수 없습니다.
            finally 블럭의 내용이 동작함*/

            et.checkEnoughMoney(50000, 30000);
            /* NotEnoughMoneyException 발생!
            가진 돈보다 상품가격이 더 비쌉니다.
            finally 블럭의 내용이 동작함*/
        } catch (PriceNegativeException e) {
            System.out.println("PriceNagativeException 발생!");
            System.out.println(e.getMessage());
        } catch (MoneyNegativeException e) {
            System.out.println("MoneyNagativeException 발생!");
            System.out.println(e.getMessage());
        } catch (NotEnoughMoneyException e) {
            System.out.println("NotEnoughMoneyException 발생!");
            System.out.println(e.getMessage());
        } finally {
            /* 예외 발생 여부와 상관 없이 실행할 내용 */
            System.out.println("finally 블럭의 내용이 동작함");
        }
    }
}
package com.ohgiraffers.section02.userexception;

import com.ohgiraffers.section02.userexception.exception.MoneyNegativeException;
import com.ohgiraffers.section02.userexception.exception.NotEnoughMoneyException;
import com.ohgiraffers.section02.userexception.exception.PriceNegativeException;

public class Application3 {

    public static void main(String[] args) {

        /* comment. multi-catch 블럭으로 동일한 레벨의 다른 타입의 예외를 하나의 catch 블럭으로 처리할 수 있다. */

        ExceptionTest et = new ExceptionTest();

        try {
            et.checkEnoughMoney(20000, 10000);
            /*finally 블럭의 내용이 동작함
            프로그램을 종료합니다.
            */

        } catch (NotEnoughMoneyException e) {
            // 예외 클래스명, 예외발생 위치, 예외 메세지 등을 stack 호출 역순으로
            // 빨간색 글씨를 이용해서 로그 형태로 출력해주는 기능
            e.printStackTrace();

        } catch (PriceNegativeException | MoneyNegativeException e) {

            // 발생한 예외 클래스의 이름
            System.out.println(e.getClass() + "발생!");
            System.out.println(e.getMessage());

        } finally {
            System.out.println("finally 블럭의 내용이 동작함");
        }

        System.out.println("프로그램을 종료합니다.");
    }
}
package com.ohgiraffers.section02.userexception;

import com.ohgiraffers.section02.userexception.exception.MoneyNegativeException;
import com.ohgiraffers.section02.userexception.exception.NotEnoughMoneyException;
import com.ohgiraffers.section02.userexception.exception.PriceNegativeException;

public class ExceptionTest {
    public void checkEnoughMoney(int price, int money) throws NotEnoughMoneyException {
        if(price<0) {
            throw new PriceNegativeException("상품 가격은 음수일 수 없습니다.");
        }
        if(money<0) {
            throw new MoneyNegativeException("갖고 있는 돈은 음수일 수 없습니다.");
        }
        if(money < price) {
            throw new NotEnoughMoneyException("가진 돈보다 상품가격이 더 비쌉니다.");
        }
        System.out.println("가진 돈이 충분합니다. 즐거운 쇼핑하세요!");
    }
}
package com.ohgiraffers.section03.override;

import java.io.FileNotFoundException;
import java.io.IOException;

public class SubClass extends SuperClass {

//    @Override
//    public void method() {} // 예외 없이 오버라이딩 가능 (예외 처리방법 1)

    // 같은 예외를 던져주는 구문으로 오버라이딩 해야한다.
//    @Override
//    public void method() throws IOException {}

    // 부모의 예외처리 클래스보다 상위의 예외로는 후손클래스에서 오버라이딩 불가능
//    @Override
//    public void method() throws Exception {}

    // 부모의 예외처리 클래스보다 더 하위에 있는 예외(즉, 더 구체적인 예외상황)인 경우 오버라이딩 가능
    @Override
    public void method() throws FileNotFoundException {}
}
package com.ohgiraffers.section03.override;

import java.io.IOException;

public class SuperClass {
    public void method() throws IOException{}
}
