# 보안 강화 리팩토링 Refactoring for security
https://pine-fibula-aee.notion.site/Security-oriented-Refactoring-256fc892a16f80eda789c64048f82810

# 회원가입 및 프로필 수정 비밀번호 인식 오류 수정
https://pine-fibula-aee.notion.site/FIX-profile-phone-number-unrecognized-256fc892a16f8078bc69fe621d23bbb6?pvs=74

# [FE] Sidebar 권한 부여 불가 문제 수정
https://pine-fibula-aee.notion.site/HOTFIX-Rollback-to-get-a-full-loginuserDTO-256fc892a16f807b9712f000fe3b49eb

이전에 loginUserDTO의 모든 정보가 노출되지 않도록 수정했는데,
프론트엔드에서는 여전히 전체 loginUserDTO를 사용해서 사용자 유형(admin 또는 customer)을 판단하고 있는 것 같았다.
그래서 아래와 같이 백엔드 코드를 원래대로 되돌리자, 사이드바가 다시 정상적으로 작동했습니다.
이를 통해 loginUserDTO가 FE의 권한 부여 로직에 관여한다는 것을 알게 되었다.

```javascript
return ResponseEntity
    .ok()
    .body(new ResponseDTO(HttpStatus.OK, "사용자 정보 로드 성공", loginUserDTO));
```


이전에는 아래 코드와 같았다. 비밀번호 노출을 위해 아래처럼 수정했던 것인데,
FE 어디에서 어떻게 권한을 받아오는 건지 정확히 알기 전까지는 loginUserDTO형태로 놔둬야할 것 같다.

```javascript
return ResponseEntity
    .ok()
    .body(new ResponseDTO(
        HttpStatus.OK,
        "사용자 정보 로드 성공",
        java.util.Map.of(
            "userId",    loginUserDTO.getUserId(),
            "role",      loginUserDTO.isAdmin(),
            "shopCode",  java.util.Objects.toString(loginUserDTO.getShopCode(), "")
        )
    ));
```

이 상태에서는 admin 사용자건 일반 이용자건 일반 권한만이 부여되어서, admin 사용자가 admin-user 페이지에 접근할 수 없었다.

팀원들이 개발을 원활히 진행할 수 있도록, 프론트엔드 쪽에서 적절한 해결책을 찾을 때까지는 임시로 다시 전체 loginUserDTO를 사용하는 방식으로 코드를 되돌렸다.
