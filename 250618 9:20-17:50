# 오늘 배운 강의 내용 Today's lecture
# JPA - Persistence context

# EntityManager와 EntityManagerFactory, Persistence Context 간의 관계 정리
https://github.com/copilot/share/0263400e-4080-8c80-a840-d20fa0976919

# 내용 요약 summary
Step 1: Find
[Database]
   v
[EntityManager] ----> [Menu (menuCode: 11, menuPrice: 10000)]
                      (Managed, tracked by EntityManager)


Step 2: After Detach (also change the detached entity's price)
[Database]
   |
   v
[EntityManager]    [Menu (menuCode: 11, menuPrice: 10000 -> 1000)]
   |                      ^
   |                      |
   |                (Detached, not tracked) : You can still change the value with foundMenu.setMenuPrice(1000), but the EntityManager (teacher) does not see or care about this change.
   v
[No connection to Menu in memory anymore]


Step 3: Find Again
[Database] (menuPrice: 10000)
   |
   v
[EntityManager] ----> [Menu (menuCode: 11, menuPrice: 10000)]  // secondMenu (managed)
                      [Menu (menuCode: 11, menuPrice: 1000)]   // foundMenu (detached)

# 강의 메모 short memo of lecture
JPA는 자바의 ORM 표준 interface
(자바의 ORM기술을 쉽게 구현하도록 도와주는 API)

ORM: Obejct Relational Mapping
객체 관계 매핑 : "자바 객체"와 "DB 테이블" 간의 관계를 기반으로 해서 mapping 해준다.

가장 보편적으로 쓰는 구현체 : Hibernate
(실질적으로 library를 추가할 때는 build.gradle에 hibernate를 추가한다)

JPA 사용의 장점 
유지보수성 증가
생산성 증가 : query(SQL문)를 작성하거나 수정하지 않아도 됨. 
DB의 dialect 알아서 수정함 :  MySQL 쓰다가 Oracle 써도 되고, 다른 DBMS 써도 됨. 알아서 수정해주니까
영속성 컨택스트에서 cashing을 사용해준다. : 영속성 컨택스트에 관리된 객체를 바로 반환해줄 수 있다.(cashing이 되기 때문에 바로 사용할 수 있다.)

JPA 사용의 단점
복잡한 SQL문을 사용해야하는 경우 JPA에는 한계가 있기 때문에 MyBatis등의 다른 library를 사용해야 한다

https://ccomccomhan.tistory.com/131



MyBatis와 JPA의 비교
영속성 프레임워크 JPA(O) MyBatis(O)
JPA -> ORM
MyBatis -> SQL

MySQL 사용 => GenerationType.IDENTITY
e.g.  @GeneratedValue(strategy = GenerationType.IDENTITY)


# 강의 응용 Application problem with the lecture source
package com.ohgiraffers.jpa02mapping_pracitce.entity;

import jakarta.persistence.*;

import java.util.Date;

/*@Entity 어노테이션은 JPA에서 사용되는 엔티티 클래스임을 표시한다.
이 어노테이션을 사용하면 해당 클래스가 DB의 테이블과 매핑된다.
@Entity 어노테이션은 클래스 선언 위에 위치해야 한다.
name 속성을 사용하여 엔티티 클래스와 매핑될 테이블의 이름을 지정할 수도 있는데,
생략하면 자동으로 클래스 이름을 엔티티명으로 사용한다.
프로젝트 내에 다른 패키지에도 동일한 엔티티가 존재하는 경우
해당 엔티티를 식별하기 위한 중복 되지 않는 name을 지정해주어야 한다.

기본 생성자는 필수로 작성해야 한다. -> class 구현체 {} 내부에 여러 필드 중
PK가 될 필드를 @Id로 지정
final 클래스, enum, interface, inner class 에서는 사용할 수 없다.
저장할 필드에 final을 사용하면 안된다.
*/
@Entity(name = "entityMerchandise")
@Table(name = "tbl_merch")
public class Merchandise {
    /*Primary key 에는 @Id 어노테이션과 @GeneratedValue 어노테이션을 사용한다.
     @Id 어노테이션은 엔티티 클래스에서 primary key 역할을 하는 필드를 지정할 때 사용된다.
     @GeneratedValue 어노테이션을 함께 사용하면 primary key 값을 자동으로 생성할 수 있다.*/
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "merch_no")
    private int merchNo;

    /*데이터베이스마다 기본 키를 생성하는 방식이 서로 다르다.
    @GeneratedValue 어노테이션은 다음과 같은 속성을 갖고 있다.
    strategy : 자동 생성 전략을 지정
        GenerationType.IDENTITY : 기본 키 생성을 데이터베이스에 위임(MySQL의 AUTO_INCREMENT)
        GenerationType.SEQUENCE : 데이터베이스 시퀀스 객체 사용(ORACLE의 SEQUENCE)
        GenerationType.TABLE : 키 생성 테이블 사용
        GenerationType.AUTO : 자동 선택 (MySQL이라면 IDENTITY, ORACLE이라면 SEQUENCE로 선택)
    generator : strategy 값을 GenerationType.TABLE로 지정한 경우 사용되는 테이블 이름을 지정
    initialValue : strategy 값을 GenerationType.SEQUENCE로 지정한 경우 시퀀스 초기값을 지정
    allocationSize : strategy 값을 GenerationType.SEQUENCE로 지정한 경우 시퀀스 증가치를 지정
    */

    @Column(
            name = "member_id", unique = true,
            nullable = false, columnDefinition = "varchar(10)"
    )
    private String memberId;

    @Column(name = "merch_type")
    private String merchType;

    @Column(name = "merch_name")
    private String merchName;

    @Column(name = "merch_price")
    private int merchPrice;

    @Column(name = "send_abroad_available")
    private boolean sendAbroadAvailable;

    @Column(name = "enroll_date")
    private Date enrollDate;

    /*@Column 어노테이션은 엔티티 클래스의 필드와 데이터베이스의 컬럼 매핑을 지정한다.
     이 어노테이션을 사용하면 필드의 이름과 데이터베이스의 컬럼명, 자료형 등을 지정할 수 있다.
     */ 
}


# 강의 코드 lecture source
package com.ohgiraffers.section02.crud;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;

import java.util.Scanner;

public class EntityManagerCRUD {
    //엔티티 매니저를 갖고 조회하고 저장한다. 그러므로 엔티티 매니저 필요함
    private EntityManager entityManager;

    /*1. 특정메뉴코드로 메뉴 조회하는 기능*/
    public Menu findMenuByMenuCode(int menuCode){
        entityManager = EntityManagerGenerator.getInstance();
        return entityManager.find(Menu.class, menuCode);
        // .find(Menu.class, menuCode);
        // = 메뉴라는 엔티티에서 이런 메뉴코드를 PK로 갖고 있는 엔티티를 찾아와줘요
    }
    Scanner sc = new Scanner(System.in);

    /*2. 새로운 메뉴 저장*/
    public Long saveAndReturnAllCount(Menu newMenu){
        entityManager = EntityManagerGenerator.getInstance();
        // .persist 위에서 transaction 처리 필요
        EntityTransaction entityTransaction = entityManager.getTransaction();
        entityTransaction.begin(); //start transaction

        entityManager.persist(newMenu);

        //'저장한 뒤 transaction을 commit하겠습니다'라는 뜻
        entityTransaction.commit();

        return getCount(entityManager);  //같은 클래스 내에 getCount 메소드 만들어줌
    }

    /*메뉴 개수 조회 기능*/
    private Long getCount(EntityManager entityManager) {
        /*JPQL 문법 -> 나중에 다른 챕터에서 다룰 예정. 오늘은 간단하게만 사용*/
        return entityManager.createQuery("SELECT COUNT(*) FROM Section02Menu"
                                            , Long.class).getSingleResult();
    }

    /*3. 메뉴 이름 수정하기*/
    public Menu modifyMenuName(int menuCode, String menuName){
        entityManager = EntityManagerGenerator.getInstance();
        Menu foundMenu  = entityManager.find(Menu.class, menuCode); //일단 Menu와 menuCode를 찾아온다
        //.find is working with PK

        EntityTransaction transaction = entityManager.getTransaction();
        transaction.begin();

        foundMenu.setMenuName(menuName);

        transaction.commit();

        return foundMenu;  //이름 바꾼 메뉴를 return 해준다.
    }

    /*4. 메뉴 삭제하기*/
    public Long removeAndReturnAllCount(int menuCode){
        //Why is this Long? not a menu? ->
        entityManager = EntityManagerGenerator.getInstance();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);

        EntityTransaction transaction = entityManager.getTransaction();
        transaction.begin();

        //User remove method to delete
        entityManager.remove(foundMenu);
/*Transaction not successfully started
java.lang.IllegalStateException: Transaction not successfully started
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:95)
	at com.ohgiraffers.section02.crud.EntityManagerCRUD.removeAndReturnAllCount(EntityManagerCRUD.java:70)*/
        transaction.commit();
        return getCount(entityManager);
        //메뉴 삭제 후 전체 열이 몇 개인지(?) 세기 위해 Long을 넣었던 것. 그리고 getCount(entityManager)를 넣어
        //실제 횟수를 세게 만든다
    }
}


package com.ohgiraffers.section02.crud;

import com.ohgiraffers.section01.entitymanager.EntityManagerFactoryGenerator;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;

public class EntityManagerGenerator {
    private static EntityManagerFactory factory
            = Persistence.createEntityManagerFactory("jpatest");

    private EntityManagerGenerator(){}

    public static EntityManager getInstance(){
        return factory.createEntityManager();
        // entity manager는 요청이 생길 때마다 다른 객체로 생성해줘야함.
        // entity manager가 하나 만들어질 때 PersistenceContext도 하나 생성된다.
    }
}


package com.ohgiraffers.section02.crud;

import jakarta.persistence.*;

//이름 지어주는 이유?: 중복 방지, 만약 name 속성 따로 주지 않으면 메소드 이름이 entity 이름이 됨
@Entity(name = "Section02Menu")
@Table(name = "tbl_menu")
//@Table : 어떤 테이블과 연동할 것인가?
public class Menu {
    // DTO 데이터를 전송하기 위한 Transfer 객체

    //PK를 지정해줘야 method 이름 아래에 붙은 빨간 줄 지워짐.
    // @Id 어노테이션을 꼭 붙이도록.(그래야 private 필드를 PK로 인식함)
    @Id
    @Column(name = "menu_code")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int menuCode;

    // 자동 매핑도 가능하지만 아직 초반이므로 명시적으로 매핑해주도록 하겠음
    @Column(name = "menu_name")
    private String menuName;

    @Column(name = "menu_price")
    private int menuPrice;

    @Column(name = "category_code")
    private int categoryCode;

    @Column(name = "orderable_status")
    private String orderableStatus;

    //생성자 하나 생성. protected = 외부에서 new Menu로 생성되게 하지 않겠다
    protected Menu(){}

    //그러나 테스트를 위해서 public 생성자를 따로 하나 생성한다. (원래는 public 생성자 따로 작성 권장하지 않음)
    public Menu(String menuName, int menuPrice, int categoryCode, String orderableStatus) {
        this.menuCode = menuCode;
        this.menuName = menuName;
        this.menuPrice = menuPrice;
        this.categoryCode = categoryCode;
        this.orderableStatus = orderableStatus;
    }
    //PK이자 AUTO_INCREMENT인 int menuCode는 없앤다

    //getter setter도 생성
    public int getMenuCode() {
        return menuCode;
    }

    public void setMenuCode(int menuCode) {
        this.menuCode = menuCode;
    }

   ...

    public String getOrderableStatus() {
        return orderableStatus;
    }

    public void setOrderableStatus(String orderableStatus) {
        this.orderableStatus = orderableStatus;
    }

    @Override
    public String toString() {
        return "Menu{" +
                "menuCode=" + menuCode +
                ", menuName='" + menuName + '\'' +
                ", menuPrice=" + menuPrice +
                ", categoryCode=" + categoryCode +
                ", orderableStatus='" + orderableStatus + '\'' +
                '}';
    }
}


package com.ohgiraffers.section03;

import com.ohgiraffers.section03.entity.EntityLifeCycle;
import com.ohgiraffers.section03.entity.EntityManagerGenerator;
import com.ohgiraffers.section03.entity.Menu;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.*;

public class EntityLifeCycleTests {
    private EntityLifeCycle lifeCycle;

    @BeforeEach
    void setup(){
        this.lifeCycle = new EntityLifeCycle();
    }

    //entitycontext가 관리하지 않는 상내 = 비영속

    @DisplayName("비영속 테스트")
    @ParameterizedTest
    @ValueSource(ints = {2})
    void testTransient(int menuCode){
        //when
        Menu foundMenu = lifeCycle.findeMenuByMenuCode(menuCode);

        Menu newMenu = new Menu(
                foundMenu.getMenuCode(),
                foundMenu.getMenuName(),
                foundMenu.getMenuPrice(),
                foundMenu.getCategoryCode(),
                foundMenu.getOrderableStatus()
        );

        EntityManager entityManager = lifeCycle.getManagerInstance();
        //현재 사용중인 엔티티 매니저의 반환 값을 받았다


        //then
        assertNotEquals(foundMenu, newMenu);
        assertTrue(entityManager.contains(foundMenu));
        assertFalse(entityManager.contains(newMenu));
    }

    @DisplayName("다른 엔티티 매니저가 관리하는 엔티티의 영속성 테스트")
    @ParameterizedTest
    @ValueSource(ints = {3})
    void testManagedOtherEntityManager(int menuCode){
        //when
        Menu menu1 = lifeCycle.findeMenuByMenuCode(menuCode);
        Menu menu2 = lifeCycle.findeMenuByMenuCode(menuCode);
        //menu1과 menu2는 다르다

        //then
        assertNotEquals(menu1, menu2);
        /*when you see the console, you can see the query executed twice.
        so the menu1 and menu2 is different.
        * Hibernate:
    select
        m1_0.menu_code,
        m1_0.category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status
    from
        tbl_menu m1_0
    where
        m1_0.menu_code=?
Hibernate:
    select
        m1_0.menu_code,
        m1_0.category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status
    from
        tbl_menu m1_0
    where
        m1_0.menu_code=? */
    }

    @DisplayName("Same EntityManager가 관리하는 엔티티의 영속성 테스트")
    @ParameterizedTest
    @ValueSource(ints = {3})
    void testManagedSameEntityManager(int menuCode) {
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();

        //when
        Menu menu1 = lifeCycle.findeMenuByMenuCode(menuCode);
        // menu1을 통해 db에서 찾아온 3번(key)이라는 객체의 값(value)을 Persistence Context에 넣어준다.
        Menu menu2 = lifeCycle.findeMenuByMenuCode(menuCode);
        // menu2에서는 이미 3번이라는 객체가 Persistence Context에 있기 때문에 3번을 그냥 꺼내와만 준다.
        // 그러므로 여기서 menu1과 menu2는 같고 둘은 영속성을 가진다

        //then
        assertNotEquals(menu1, menu2);
    }

    @DisplayName("준영속화 detach test")
    @ParameterizedTest
    @CsvSource("11,1000")
    void testDetachEntity(int menuCode, int menuPrice){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        EntityTransaction entityTransaction = entityManager.getTransaction();

        //when
        entityTransaction.begin();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);
        //menuCode가 11번은 걸 Menu db에서 찾아오겠습니다

        //detach: 특정 엔티티만 준영속 상태**로 만든다.
        // ** 영속성 컨텍스트가 관리하던 객체를 관리하지 않는(연결이 끊긴) 상태
        entityManager.detach(foundMenu);
        foundMenu.setMenuPrice(menuPrice);
        //MenuPrice를 찾아온 뒤 전달 받은 값(1000)으로 set해준다(수정해준다)

        //flush : 영속성 컨텍스트의 상태를 DB에 내보낸다. commit하지 않은 상태이므로 rollback available.
            //commit : flush 기능 내포. but when you 'commit', you cannot do rollback(되돌리기).
        entityManager.flush();

        //Compare menuPrice vs entityManager.find(Menu.class, menuCode).getMenuPrice();
        // detach 했다가 다시 entityManager.find를 하면, 중간에 detach로 entityManager 내에서의
        // 연결이 끊겼었기 때문에 entityManager.find를 한 그 시점에 다시 DB로부터 11번(key)의 값을 갖고온다.
        // 그러면 11번의 원래 menuPrice 값인 10000원을 갖고 오게 되고
        // 이미 위에서 foundMenu.setMenuPrice(menuPrice);로 price를 1000원으로 바꿔준
        // entityManager에서 관리가 안 됐던 11번(detached 상태의 11번 엔티티)과 다른 값이 된다.

        //'임의의 11번'이라는 표현은 조금 모호할 수 있습니다. -임의의 11번 -> eM에서 관리가 안 됐던 11번으로 변경
        //여기서 11번은 menuCode가 11인 엔티티인데, detach 이후에 값을 바꾼 것이죠.
        //detach 상태의 엔티티는 DB나 EntityManager가 관리하는 값이 아니라,
        // 오직 자바 객체 안에서만 값이 바뀐 상태입니다.
        /* The first attached entity doesn’t disappear—
         it just stops "being watched" by the EntityManager when you detach.
        If you change its value, only your copy in memory(detached entity) knows about it.

         */

        //then
        assertNotEquals(menuPrice, entityManager.find(Menu.class, menuCode).getMenuPrice());
        entityTransaction.rollback();
    }

    @DisplayName("준영속화 detach 후 다시 영속화 테스트")
    @ParameterizedTest
    @CsvSource("11,1000")
    void testDetachAndMerge(int menuCode, int menuPrice){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        EntityTransaction entityTransaction = entityManager.getTransaction();

        //when
        entityTransaction.begin();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);
        //menuCode가 11번은 걸 Menu db에서 찾아오겠습니다

        //detach: 특정 엔티티만 준영속 상태**로 만든다.
        // ** 영속성 컨텍스트가 관리하던 객체를 관리하지 않는(연결이 끊긴) 상태
        entityManager.detach(foundMenu);
        // foundMenu entity만 준영속 상태로 만들었다.
        foundMenu.setMenuPrice(menuPrice);

        //merge를 통해 준영속성 상태를 영속성 상태로 되돌릴 수 있다
        entityManager.merge(foundMenu);
        entityManager.flush();

        //then
        assertEquals(menuPrice, entityManager.find(Menu.class, menuCode).getMenuPrice());
        // 둘은 값이 같다.
        entityTransaction.rollback();
    }
    @DisplayName("Test update after merging detached data")
    @ParameterizedTest
    @CsvSource("11,soup")
    void testDetachAndMerge(int menuCode, String menuName){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);
        entityManager.detach(foundMenu);

        //when
        foundMenu.setMenuName(menuName);
        Menu refoundMenu = entityManager.find(Menu.class, menuCode);

        entityManager.merge(foundMenu);

        //then
        assertEquals(menuName, refoundMenu.getMenuName());
        //Expected :soup
        //Actual   :정어리빙수
        //<Click to see difference>
        //
        //org.opentest4j.AssertionFailedError: expected: <soup> but was: <정어리빙수>
        //>> ???을 위해   entityManager.merge(foundMenu); 를 붙이고 다시 한 번 run
    }

    @DisplayName("준영속화 clear test")
    @ParameterizedTest
    @ValueSource(ints={6})
    void testClearPersistenceContext(int menuCode){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);

        //when
        entityManager.clear();

        //then
        Menu expectedMenu = entityManager.find(Menu.class, menuCode);
        assertNotEquals(foundMenu, expectedMenu);
    }

    @DisplayName("준영속화 close test")
    @ParameterizedTest
    @ValueSource(ints={6})
    void testClosePersistenceContext(int menuCode){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);

        //when
        // close : 영속성 컨텍스트를 종료한다.
        entityManager.close();

        //then2
        assertThrows(
                IllegalStateException.class,
                () -> entityManager.find(Menu.class, menuCode)
        );
        //then1
        // Menu expectedMenu = entityManager.find(Menu.class, menuCode);
        //assertNotEquals(foundMenu, expectedMenu); //Error: Session/EntityManager is closed
    }

    @DisplayName("Test Persistence Context erase")
    @ParameterizedTest
    @ValueSource(ints = {6})
    void testRemoveEntity(int menuCode){
        //given
        EntityManager entityManager = EntityManagerGenerator.getInstance();
        EntityTransaction entityTransaction = entityManager.getTransaction();
        Menu foundMenu = entityManager.find(Menu.class, menuCode);

        //when
        entityTransaction.begin();
        /*remove : 엔티티를 영속성 컨텍스트 및 데이터베이스에서 삭제
        * 단, 트랜젝션을 제어하지 않으면 DB에 영구 반영되지는 않는다.
        * 트랜잭션을 커밋하는 순간 영속성 컨텍스트에서 관리하는 엔티티 객체가 DB에 반영된다*/
        entityManager.remove(foundMenu);

        //flush : 영속성 컨택스트의 변경 내용(여기선 remove)을 데이터 베이스에 동기화하는 작업
        entityManager.flush();
        // DB에 동기화(반영)를 했기 때문에 이 이후에 DB에선 6번 값을 찾을 수 없을 것.
        // = null 값으로 나올 것. 그러나 아직 commit은 안 해서 DB에 영구적으로 반영되진 않음

        //현재 아직 test Run 안 한 상태의 DB: 6,생마늘샐러드,12000,4,Y
        //then
        Menu refoundMenu = entityManager.find(Menu.class, menuCode);
        assertNull(refoundMenu); //여기까지만 쓰고 run했을 때 assertNull 문제 없이 돌아감 = Null이 true라는 것.
        entityTransaction.rollback();
        //DB에 최종적으로 반영하지 않기 위해서 rollback 해준다
        }
}


# chapter02 - mapping
# application.yml
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/menudb
    username: ohgiraffers
    password: ohgiraffers
  jpa:
    show-sql: true
    database: mysql
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true

package com.ohgiraffers.jpa02mapping.section01.entity;

import jakarta.persistence.*;

import java.time.LocalDateTime;

//Entity class로 할 거니까 annotation달기 =>DB와 mapping될 것임을 미리 알려줌
@Entity(name = "entityMember")
@Table(name = "tbl_member")   //tbl_member라는 테이블이 생성되도록
public class Member {
    //entity 등록할 때는 PK가 필수이다.
    // PK를 만들거나 @Id를 통해 불러와주지 않으면 method이름 아래에 계속 빨간 줄이 나온다
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "member_no")
    private int memberNo;

    @Column(
            name = "member_id", unique = true,
            nullable = false, columnDefinition = "varchar(10)"
    )
    private String memberId;

    @Column(name = "member_pwd", nullable = false)
    private String memberPwd;

    @Column(name = "member_name")
    private String memberName;

    @Column(name = "phone")
    private String phone;

    @Column(name = "address", length = 900)
    private String address;

    @Column(name = "enroll_date")
    private LocalDateTime enrollDate;

    @Column(name = "member_role")
    @Enumerated(EnumType.STRING)
    private MemberRole memberRole;

    @Column(name = "status", columnDefinition = "char(1) default 'Y'")
    private String status;

    //기본생성자 필수 작성
    protected Member(){}

    public Member(String memberId, String memberPwd, String memberName, String phone, String address, LocalDateTime enrollDate, MemberRole memberRole, String status) {
        this.memberId = memberId;
        this.memberPwd = memberPwd;
        this.memberName = memberName;
        this.phone = phone;
        this.address = address;
        this.enrollDate = enrollDate;
        this.memberRole = memberRole;
        this.status = status;
    }

    public int getMemberNo() {
        return memberNo;
    }

    public void setMemberNo(int memberNo) {
        this.memberNo = memberNo;
    }
...
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Member{" +
                " memberId='" + memberId + '\'' +
                ", memberPwd='" + memberPwd + '\'' +
                ", memberName='" + memberName + '\'' +
                ", phone='" + phone + '\'' +
                ", address='" + address + '\'' +
                ", enrollDate=" + enrollDate +
                ", memberRole=" + memberRole +
                ", status='" + status + '\'' +
                '}';
    }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import java.time.LocalDateTime;

public class MemberRegistDTO {
    private String memberId;
    private String memberPwd;
    private String memberName;
    private String phone;
    private String address;
    private LocalDateTime enrollDate;
    private MemberRole memberRole;
    private String status;

    public MemberRegistDTO() {
    }

    public MemberRegistDTO(
            String memberId, String memberPwd, String memberName,
            String phone, String address, LocalDateTime enrollDate,
            MemberRole memberRole, String status
    ) {
        this.memberId = memberId;
        this.memberPwd = memberPwd;
        this.memberName = memberName;
        this.phone = phone;
        this.address = address;
        this.enrollDate = enrollDate;
        this.memberRole = memberRole;
        this.status = status;
    }
    public String getMemberId() {
        return memberId;
    }
    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }
    public String getMemberPwd() {
        return memberPwd;
    }
    public void setMemberPwd(String memberPwd) {
        this.memberPwd = memberPwd;
    }
    public String getMemberName() {
        return memberName;
    }
    public void setMemberName(String memberName) {
        this.memberName = memberName;
    }
    public String getPhone() {
        return phone;
    }
    public void setPhone(String phone) {
        this.phone = phone;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public LocalDateTime getEnrollDate() {
        return enrollDate;
    }
    public void setEnrollDate(LocalDateTime enrollDate) {
        this.enrollDate = enrollDate;
    }
    public MemberRole getMemberRole() {
        return memberRole;
    }
    public void setMemberRole(MemberRole memberRole) {
        this.memberRole = memberRole;
    }
    public String getStatus() {
        return status;
    }
    public void setStatus(String status) {
        this.status = status;
    }
    @Override
    public String toString() {
        return "MemberRegistDTO{" +
                "memberId='" + memberId + '\'' +
                ", memberPwd='" + memberPwd + '\'' +
                ", memberName='" + memberName + '\'' +
                ", phone='" + phone + '\'' +
                ", address='" + address + '\'' +
                ", enrollDate=" + enrollDate +
                ", memberRole=" + memberRole +
                ", status='" + status + '\'' +
                '}';
    }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class MemberRegistService {
    private MemberRepository memberRepository;

    //의존성 주입 받기 (@Autowired 생략된 생성자 주입 방식 이용)
    public MemberRegistService(MemberRepository memberRepository){
        this.memberRepository = memberRepository;
    }

    @Transactional
    public void registMember(MemberRegistDTO newMember){

        Member member = new Member(
                newMember.getMemberId(),
                newMember.getMemberPwd(),
                newMember.getMemberName(),
                newMember.getPhone(),
                newMember.getAddress(),
                newMember.getEnrollDate(),
                newMember.getMemberRole(),
                newMember.getStatus()
        );
        memberRepository.save(member);
    }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

//@Repository = DB에 접근하는 클래스들이 Bean으로 등록되어야 할 때(?) 달아주는 어노테이션
@Repository //bean registered
public class MemberRepository {
    @PersistenceContext  //어노테이션 붙여서 EntityManager 사용가능케 만듦
    private EntityManager entityManager;

    public void save(Member member){
        entityManager.persist(member);  //전달받은 member 엔티티를 persist(저장)한다
    }
}

package com.ohgiraffers.jpa02mapping.section01.entity;

public enum MemberRole {
    //enum은 관련된 상수의 집합
    ROLE_MEMBER,
    ROLE_ADMIN
}

package com.ohgiraffers.jpa02mapping.section01.entity;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDateTime;
import java.util.stream.Stream;

@SpringBootTest
class Chap02MappingApplicationTests {

    @Autowired
    private MemberRegistService memberRegistService;

    private static Stream<Arguments> getMember() {
        return Stream.of(
                Arguments.of(
                        "user01",
                        "pass01",
                        "홍길동",
                        "010-1234-5678",
                        "서울시 종로구",
                        LocalDateTime.now(),
                        "ROLE_MEMBER",
                        "Y"
                ),
                Arguments.of(
                        "user02",
                        "pass02",
                        "유관순",
                        "010-8765-4321",
                        "서울시 서초구",
                        LocalDateTime.now(),
                        "ROLE_ADMIN",
                        "Y"
                )
        );
    }
    @DisplayName("테이블 생성 테스트")
    @ParameterizedTest
    @MethodSource("getMember")
    void testCreateTable(
            String memberId, String memberPwd,
            String memberName, String phone, String address,
            LocalDateTime enrollDate, MemberRole memberRole, String status
    ) {
        //given
        MemberRegistDTO newMember = new MemberRegistDTO(
                memberId,
                memberPwd,
                memberName,
                phone,
                address,
                enrollDate,
                memberRole,
                status
        );
        //when

        //then
        Assertions.assertDoesNotThrow( //exception없이 정상적으로 수행되나요?
                () -> memberRegistService.registMember(newMember)
        );
    }
}
