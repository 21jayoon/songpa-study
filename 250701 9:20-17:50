# React 실습 React practice
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>03_data-component_05_example_pokemon</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        .card {
            border: 1px solid black;
            width: 300px;
            margin: 10px;
            padding: 20px;
            display: inline-block;
        }
        .card>* {
            display: inline-block;
        }
        .card>img {
            width: 100px;
            height: 100px;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        //1. React에서 useState와 useEffect 둘 다 꺼내오기  12:39
        const {useState, useEffect} =React;

        function Title() {
            return(
                <h1>List of Pokemon</h1>
            )
        }

        //포켓몬 목록에 대한 API 주소 요청하는 PokemonList 함수형 컴포넌트 생성 12:03
        function PokemonList() {
            const [pokemons, setPokemons]=useState([]);
            //아래 return에서 배열state에서 쓸 수 있는 .map를 사용하고 있다.
            //map은 []에서만 사용가능한 함수이기 때문에 useState({});로 되어있던 걸
            // useState([]);로 변경한다.  13:31

            //전체 포켓몬 목록에 대한 api요청
            // https://pokeapi.co/api/v2/pokemon
            useEffect(() =>{
                fetch(`https://pokeapi.co/api/v2/pokemon`)
                .then(response => response.json())
                .then(data => setPokemons(data.results));                        
            }, []);
                
            return( 
                <div>
                   {pokemons.map(pokemon => 
                        <Card pokemon={pokemon}/>
                   )}
                </div>
                /*<Card pokemon={pokemon}/> : 
                Card 컴포넌트에 pokemon이란 변수에 받아온 배열 값을 
                 Card에서도 쓸 수 있도록 url props로 넘겨준다.
                 (pokemon 배열의 각 원소(pokemon 객체)를 Card 컴포넌트의 props로 전달한다.
                이렇게 하면 Card 컴포넌트 안에서 {pokemon}으로 해당 데이터를 사용할 수 있다.
                이 때 props.pokemon이 아니라 {pokemon}형태로 사용가능한 이유는 Card에서 구조분해할당을 쓰기 때문이다.)
                 또한 return()안의 값을 통해 PokemonList에서 Card 컴포넌트를 불러왔으므로
                 최종적으로 render될 App에서는 PokemonList 컴포넌트 하나만 return에 들어가면 된다. 
                 (PokemonList에서 Card를 반복 렌더링하므로, App에서는 PokemonList만 렌더링하면 된다.) 14:14*/
            )
        }


        function Card({pokemon}){
            //image를 받아오기 위한 state 설정 12:52
            const [image, setImage]=useState('');

            //return의 No. 뒤에서 쓸 {id}를 만들어주기 위해 state 설정한다 14:03
            const [id, setId]=useState('');

            //한 포켓몬의 이미지 주소 요청(이전 api 요청 결과의 url 속성으로 존재함)
            // EX. https://pokeapi.co/api/v2/pokemon/1
            //앞모습 이미지 속성 : sprites.front_default 사용

            useEffect(() => {
                fetch(pokemon.url)
                //pokemon의 상세 정보를 사용하기 위해 pokemon의 url 속성을 갖고 와야 한다. 
                // 이때 {pokemon.url} 말고 (pokemon.url)이라고 작성해야 함 13:56
                    .then(response => response.json())
                    .then(data => {
                        setImage(data.sprites.front_default);
                    })
                    //여기에서 setImage 사용  12:53
                // 'https://pokeapi.co/api/v2/pokemon/숫자1-20/'의 속성 중 하나인 id를 사용하기 위해서 useEffect 안에서 fetch 해온다. 14:11   
                fetch(pokemon.url)
                    .then(response => response.json())
                    .then(data => {
                        setId(data.id);
                    })             
            })

            return(
                <div className="card">
                    {/*PokemonList에서 pokemon이란 변수(?)를 통해
                        배열 map으로 받아온 https://pokeapi.co/api/v2/pokemon 에는 
                        name과 url이 있다. 이 중 img가 있을 url을 pokemon의 속성 url이란 뜻(?)으로 img src에 넘겨준다
                        {pokemon.url}  13:35*/}
                    <img src={image} alt="pokemon image"/>
                    {/*위에서 setImage(data.sprites.front_default);로 image 값을 state에 저장해줬기 때문에
                        여기서는 img src={pokemon.url}로 쓰지 않고 img src={image}로 이미지 값을 넣어줘야 한다.  13:58*/}
                    <div className="info">
                        <h2>No. {id}</h2>
                        {/*img src={image}와 비슷하게, {pokemon.url.id} 대신 {id} 만 넣어준다? -> 안 됨*/}
                        <h3>name: {pokemon.name}</h3>
                        {/*name: 뒤에 각 순서에 맞는 포켓몬 이름이 나와야하므로 
                            map배열로 받은 pokemon의 속성 두 개 중 하나, name을
                            pokemon.name이란 props로 불러온다 13:37
                            pokemon.name은 props로 전달된 객체의 속성이다. */}
                    </div>
                </div>        
            )
        }

        //PokemonList와 Card를 합성할 App 컴포넌트 생성 12:06
        function App() {
            return(
                <>
                    <Title/>
                    <PokemonList/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
    
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-02_API-04githubApiEmoji</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        //use REST API  250630 예시 답안 15:29
        //1. make input box 
        /*어떤 값이 state로? -> input 박스에 들어가는 text 값이 state가 되어야 함
        비동기 통신은 어떻게?
        props는 무엇이 내려와야할까? -> 검색창에 들어간 text값이 props로 내려와야할 듯*/
        const {useState} = React;

        /*요청 주소:   https://api.github.com/emojis */

        function SearchBox({setImgUrl}){
            const[emojiName, setEmojiName]=useState('');
            const onClickHandler = () => {
                fetch('https://api.github.com/emojis')
                    .then(res => res.json())
                    .then(data =>
                        {
                            console.log(data);
                            setImgUrl(data[emojiName])
                        }
                    );
                    /*axios.get('https://api.github.com/emojis')
                                .then(res => {
                                setImgUrl(res.data[emojiName]);
                    })*/
            }
            return(
                <>
                    <input type="text" 
                            name="emojiName" 
                            value={emojiName} 
                            onChange={e => setEmojiName(e.target.value)}/>
                    <button onClick={onClickHandler}>검색</button>
                </>
            )
        }

        //function ImageBox 수정 15:31
        function ImageBox({ imgUrl }) {
            return (
                //조건부 렌더링&& 추가 
                <>
                  {imgUrl && <img src={imgUrl}/>}
                </>
            );
        }

        function App() {
            const [imgUrl, setImgUrl] = useState("")

            return(
            <>
                {/*input box 컴포넌트
                <SearchBox name={text}/>*/}
                <SearchBox setImgUrl={setImgUrl} />
                <br/>            
                <ImageBox imgUrl={imgUrl}/>
                {/*image출력하는 컴포넌트*/}
            </>
        )
        }

        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-02_API-04githubApiEmoji</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        //use REST API  250630 14:10
        //1. make input box 
        /*어떤 값이 state로? -> input 박스에 들어가는 text 값이 state가 되어야 함
        비동기 통신은 어떻게?
        props는 무엇이 내려와야할까? -> 검색창에 들어간 text값이 props로 내려와야할 듯*/
        const {useState} = React;

        /*요청 주소:   https://api.github.com/emojis */

        // function SearchBox({text, setText})안에 onSearch 추가 
        function SearchBox({text, setText, onSearch}){
            //const clickHandler = ({text}) => setText({text});
            return(
                <>
                    <input type="text" 
                            value={text} 
                            name="searchBox" 
                            onChange={e=>setText(e.target.value)}/>
                    <button onClick={onSearch}>검색</button>
                </>
            )
            //<button onClick={clickHandler}>을 {onSearch}로 바꿈(search 상태를 변경해 전달해주기 위해) 15:04
        }
        //엥? input box 나왔다. 14:58

        //function ImageBox 수정 15:16
        function ImageBox({ emojiUrl }) {
            return (
                //아래 삼항 연산자 굳이 필요없는 코드(쓸데없이 긴 코드)일지도? 04_...copy 참조해서 수정하던가 해야겠음 250701 9:29
                <>
                  {emojiUrl ? (
                      <img src={emojiUrl} alt="emoji" />
                  ) : ('')} 
                  {/*자바스크립트(JSX)에서
                    {emojiUrl ? ( <img ... /> ) : ()}
                    이렇게 삼항 연산자의 "else" 부분을 빈 괄호 ()로 남기면 문법 오류가 납니다.
                    
                    이유: JSX에서 ()는 아무것도 반환하지 않는 "빈 식"이 아닙니다.
                    ()는 JS 문법적으로 함수 호출, 식(표현식), 그룹화 등으로 쓰이지만,
                    JSX에서 ()만 단독으로 쓰면 값이 아니므로 파싱 에러가 발생합니다.
                    (예: undefined, null, '', <></> 등은 가능함) */}
                </>
            );
        }
        /*function ImageBox({text}){
            //State 사용해서 text값을 받아온다. 14:30
            //비동기 통신 사용 : Rest API, json
           fetch ('https://api.github.com/emojis')
            .then(response => {
                console.log(response)
                return response.json()
            })
            .then(data => console.log(data))
        } */

        function App() {
            const [text, setText] = useState("")
            const [emojiUrl, setEmojiUrl] = useState("")

            // 검색 버튼 클릭 시 실행할 함수
            const handleSearch = () => {
                fetch("https://api.github.com/emojis")
                    .then(res => res.json())
                    .then(data => {
                     // 입력값이 key로 있는지 확인 후, 있으면 url 저장
                    if (data[text]) {
                        setEmojiUrl(data[text]);
                    } else {
                        setEmojiUrl(""); // 없으면 빈 값(또는 에러 메시지도 가능)
                    }
                });
            };
            /* 250701 9:44 부모 컴포넌트에 state 선언해놓으면 rerendering이 계속 일어나기 때문에 비효율적이라는데? 
            250630 15: 28 왜 handleSearch를 App에 두는가?
            1. 상태(state) 관리의 주체가 App이기 때문 : 
            emoji 데이터(검색 결과)를 저장하는 state(emojiUrl)는 App에 있습니다.
            fetch를 통해 받아온 데이터를 이 state에 저장해야 하므로,
            fetch 로직(즉, 검색 버튼 클릭 시 동작) 역시 App에서 관리해야 합니다.
            
            2. 데이터 흐름의 일관성(단방향 데이터 흐름) : 
            React의 핵심 원칙: 부모 → 자식 방향으로 데이터와 함수를 전달(props)
            만약 SearchBox 내부에서 fetch를 하고 결과를 관리하면,
            App이 그 결과를 알 수 없어 하위 컴포넌트끼리 데이터가 분리됩니다.
            App이 모든 상태와 로직을 관리하면,
            여러 컴포넌트가 "공유된 결과"를 props로 쉽게 받을 수 있습니다.
            
            3. 역할 분리의 명확성 : 
            SearchBox: 입력값을 받고, 버튼 클릭 시 이벤트만 발생시키는 "UI 컴포넌트"
            App: "상태"와 "비즈니스 로직(API 호출, 결과 저장 등)"을 관리하는 "컨테이너 컴포넌트"
            
            만약 SearchBox에 handleSearch가 있다면? : 
            fetch 결과를 SearchBox가 알아서 처리해야 하고,
            그 결과를 App에 올려주려면 또 props로 함수를 받아야 함(복잡해짐).
            여러 하위 컴포넌트가 결과를 써야 할 때(예: ImageBox),
            데이터 공유가 어렵고 앱 구조가 복잡해짐.
            
            React의 대표적인 패턴 :
            상태와 데이터, 주요 로직은 상위 컴포넌트(App)가 가지고,
            입력/버튼 같은 UI와 이벤트 트리거는 하위 컴포넌트가 담당한다.
            
            정리 예시 :
            1. App
            상태: text, emojiUrl
            함수: handleSearch (fetch & setEmojiUrl)
            하위 컴포넌트에 props로 text, setText, handleSearch, emojiUrl 등 전달
            
            2. SearchBox
            입력값 변경: setText를 props로 받아서 사용
            검색 버튼 클릭: onClick={onSearch} (props로 받은 함수 호출만 함)
            
            결론 : 
            검색 버튼 클릭 시 수행할 fetch/search 로직은,
            1) 결과 상태를 보관하고,
            2) 여러 컴포넌트에 공유해야 하며,
            3) 앱의 "상위 컨테이너" 역할인 App이 담당하는 것이 가장 React답고, 유지보수에 좋기 때문입니다!*/

            return(
            <>
                {/*input box 컴포넌트
                <SearchBox name={text}/>*/}
                <SearchBox text={text} setText={setText} onSearch={handleSearch} />
                <br/>            
                <ImageBox emojiUrl={emojiUrl}/>
                {/*image출력하는 컴포넌트*/}
            </>
        )
        }

        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-03_datacomponent-01</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        //useEffect, useState React로부터 동시에 꺼내오기 250701 9:34
        const {useState, useEffect} = React;

        //함수형 컴포넌트 생성 250701 9:30
        function Title (){
            return (
                <h1>List of members</h1>        
            )
        }
        
        function ItemList() {
            /*state를 어떤 컴포넌트에서 관리해야하는지 고려해서 선언한다
            App에서 관리할 경우  props로 전달할 수 있긴 하지만
            수정이 생길 경우 App단위로 rerendering되므로 비효울적이다.  9:58*/

            //state users, setUsers 선언 9:39
            const [users, setUsers] = useState([]);
            //*** 여기 useState() 안에 배열 []을 넣어줘야한다. 9:56
            
            /*컴포넌트 생성과 함께 데이터를 보여줘야하는 경우 useEffect의 callback함수에서 api를 호출한다.
            조회 용도로만 이용하기 위해서 두 번째 인자로 빈 배열(empty array)을 전달한다.  9:59*/
            //useEffect의 callback 함수는 componentDidMount 다음에 작동한다.  9:48
            useEffect(() => {
                fetch('https://jsonplaceholder.typicode.com/users')
                        .then(res => res.json())  //json을 통해 받아온 걸 파싱한다.
                        .then(responseusers => setUsers(responseusers));                           
            }, []);

            console.log('users : ', users);

            /*최초 render시에는 users가 undefined이므로 map메소드 호출 시 오류가 발생한다
            조건부 랜더링을 통해 users가 존재할 경우만 랜더링하도록 변겨하면 (users && 조건 걸기)
            api 호출을 통해 users 데이터가 존재하게 되었을 경우 랜더링이 처리된다  10:02*/
            return(
                // ***여기서 map(배열)을 썼기 때문에  9:56
                <div>
                    {users && users.map(user => <Item key={user.id} user={user}/>)}
                </div>
                //'users가 있을 때만 users.map을 불러와라'라고 하기 위헤 {user.map...} 앞에
                // 조건  user &&를 건다. (조건부 랜더링)  10:00
            )
        }

        //Make Item component  9:51
        //({user}) : user 객체의 구조분해할당으로 받아온다. 
        function Item({user}) {
            return(
                <div>
                    <h4>{user.name}</h4>
                    userId : {user.id} <br/>
                    email : {user.email} <br/>
                    phone : {user.phone} <br/>
                    {/*user의 company 안에는 또다른 다양한 배열이 있기 때문에 key( .name )를 하나 더 추가한다  10:04
                        
                        user, company, name → 이들은 프로퍼티(property, 속성) 또는 "키(key)"라는 용어가 더 적합합니다.
                        예를 들어, user는 객체의 변수명(혹은 상위 객체), company는 user 객체의 속성, name은 company 객체의 속성입니다.
                        user.company.name → 이 전체 표현은 프로퍼티 체이닝(property chaining) 또는 객체 체이닝이라고 부릅니다.  10:25*/} 
                    company : {user.company.name}                 
                </div>
            )
        }

        //rendering될 component : App  9:31
        function App () {
            return (
                <>
                    <Title/>
                    <ItemList/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
    
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-03_datacomponent-02</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // https://openweathermap.org/ 의 api 이용 0701 10:35
        
        const API_KEY = '58db9a21771b7e4f056707155dcc2f30'

        //React에서 useState와 useEffect 꺼내오기  10:41
        const {useState, useEffect} = React;

        function Weather() {

            //위치정보(위도, 경도)를 state를 이용해 객체 형태로 저장한다.  10:46
            const [position, setPosition] = useState({latitude : '', longitude: ''});       
            
             //화면에 표시할 api 값들을 state로 저장해놓는다 10:54(2)
            const [cityName, setCityName]=useState('');
            const [weather, setWeather]=useState('');
            const [wind, setWind]=useState('');

            useEffect(() => {
                // https://ipapi.co/json/ 로 요청을 하면 내 ip주소를 기반으로 위도와 경도가 불러와진다.  10:42
                // fetch('https://ipapi.co/json/')
                fetch('https://ipinfo.io/json')
                    .then(res => res.json())
                    //response로 받아와지는 값을 json으로 파싱해준다. 10:43
                    .then(data => {
                        const latitude = data.latitude;
                        const longitude = data.longitude;

                        console.log(latitude, longitude);

                        //setPosiotion을 쓰고, 구조분해할당으로 위도, 경도 값 갖고 오기 10: 47
                        setPosition( { latitude, longitude });

                        //return 값으로 날씨 api를 요청한다.  10:48
                        return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`)
                        //api key를 사용하기 위해 컴포넌트 선언부 바로 밑에서 변수로 선언한다 . 10:49
                        //표현식을 사용하기 위해 api url을 감쌌던 작은 따옴표를 백틱으로 바꾸고 
                        // lat={lat}&lon={lon}&appid={API key}으로 되어있는 것들을 표현식 ${}로 바꾼다.  10:51
                    })
                    .then(response => response.json())
                    .then(json =>{
                        //얻어온 데이터를 화면에 표시해준다.  10:54(1)
                        console.log(json);
                        setCityName(json.name);
                        setWeather(json.weather[0]);
                        setWind(json.wind);
                    })
                   /*if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                        (pos) => {
                         const { latitude, longitude } = pos.coords;
                            setPosition({ latitude, longitude });

                            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=kr`)
                              .then(res => res.json())
                                .then(json => {
                                 setCityName(json.name);
                                    setWeather(json.weather && json.weather[0]);
                                setWind(json.wind);
                        })
                        .catch((err) => {
                            alert('날씨 정보를 불러오는 중 오류 발생');
                        });
                },
                (err) => {
                    alert('위치 정보를 가져올 수 없습니다.');
                }
            );
        }*/
            }, []) //의존성 객체 추가 : 빈 배열 10:58
            return(
                <>
                    <h3>Location</h3>
                    <h4>{`경도 : ${position.longitude}  위도 : ${position.latitude}`}</h4>
                    <h4>{`조회 도시: ${cityName}`}</h4>
                    <h4>{`날씨 : ${weather.main} / 설명 : ${weather.description}`}</h4>
                    <h4>{`풍향 : ${wind.deg}도 / 풍속: ${wind.speed} m/s`}</h4>
                </>
            );
        }

        function App() {
            return (
                <>
                    <h1>Today's weather</h1>
                    <Weather/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
    
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-03_data-component_03</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // https://openweathermap.org/ 의 api 이용 0701 10:35
        
        const API_KEY = '58db9a21771b7e4f056707155dcc2f30'

        //React에서 useState와 useEffect 꺼내오기  10:41
        const {useState, useEffect} = React;

        function Weather() {

            //위치정보(위도, 경도)를 state를 이용해 객체 형태로 저장한다.  10:46
            const [position, setPosition] = useState({});       
            
             //화면에 표시할 api 값들을 state로 저장해놓는다 10:54(2)
            const [cityName, setCityName]=useState('');
            const [weather, setWeather]=useState({});
            const [wind, setWind]=useState({});

            useEffect(() => {
                new Promise((resolve) => {
                    navigator.geolocation.getCurrentPosition(
                        //callback함수 선언  11:24
                        (currentPosition) => {
                            console.log(currentPosition);
                            setPosition({
                                latitude : currentPosition.coords.latitude,
                                longitude : currentPosition.coords.longitude
                            });
                            resolve(currentPosition.coords);
                        }
                    );
                }).then((coords) => {
                    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}`)
                    .then(response => response.json())  //json으로 파싱  11:31
                    .then(json =>{
                        //얻어온 데이터를 화면에 표시해준다.  10:54(1)
                        console.log(json);
                        setCityName(json.name);
                        setWeather(json.weather[0]);
                        setWind(json.wind);
                    });
                });
            }, []);  //의존성 객체 추가 : 빈 배열 10:58

            return(
                <>
                    <h3>Location</h3>
                    <h4>{`경도 : ${position.longitude}  위도 : ${position.latitude}`}</h4>
                    <h4>{`조회 도시: ${cityName}`}</h4>
                    <h4>{`날씨 : ${weather.main} / 설명 : ${weather.description}`}</h4>
                    <h4>{`풍향 : ${wind.deg}도 / 풍속: ${wind.speed} m/s`}</h4>
                </>
            );
        }

        function App() {
            return (
                <>
                    <h1>Today's weather</h1>
                    <Weather/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
    
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04_async-03_data-component_04</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // https://openweathermap.org/ 의 api 이용 0701 10:35
        
        const API_KEY = '58db9a21771b7e4f056707155dcc2f30'

        //React에서 useState와 useEffect 꺼내오기  10:41
        const {useState, useEffect} = React;

        function Weather() {
            //위치정보(위도, 경도)를 state를 이용해 객체 형태로 저장한다.  10:46
            const [position, setPosition] = useState({});       
            
             //화면에 표시할 api 값들을 state로 저장해놓는다 10:54(2)
            const [cityName, setCityName]=useState('');
            const [weather, setWeather]=useState({});
            const [wind, setWind]=useState({});

            //useEffect component 바깥 쪽에 geolocation을 통해 "위도경도 알아오는" 기능적인 함수를 하나 작성한다. 11:44
        function getPosition() {
            return new Promise((resolve) => {
                    navigator.geolocation.getCurrentPosition(
                        //geolocation의 callback함수 선언  11:24
                        (currentPosition) => {
                            console.log(currentPosition);
                            setPosition({
                                latitude : currentPosition.coords.latitude,
                                longitude : currentPosition.coords.longitude
                            });
                            resolve(currentPosition.coords);
                        }
                    );
                })
        }

        //날씨 정보 얻어오는(날씨 API 요청하는) 기능적인 함수 하나 더 선언 11:46
        function getWeather(coords){
            //coords 받아와서 사용할 수 있도록 함수 선언부() 인자에 coords 넣기 11:47
            return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}`)
                    .then(response => response.json())  //response를 json으로 파싱
        }


            useEffect(() => {
                const loadData = async () => {
                    //비동기적인 작업: getPosition함수를 이용해 현재 위치 정보를 갖고 온다.  11:49
                    const coords = await getPosition();
                    //await 없으면 getPosition에 promise가 담긴다.  11:50

                    //날씨 API 요청: getWeather();이용  11:49(2)
                    const result = await getWeather(coords);

                    setCityName(result.name);
                    setWeather(result.weather[0]);
                    setWind(result.wind);
                }
                //실행하기 위해 loadDate();호출  11:52
                loadData();
            }, [])

            return(
                <>
                    <h3>Location</h3>
                    <h4>{`경도 : ${position.longitude}  위도 : ${position.latitude}`}</h4>
                    <h4>{`조회 도시: ${cityName}`}</h4>
                    <h4>{`날씨 : ${weather.main} / 설명 : ${weather.description}`}</h4>
                    <h4>{`풍향 : ${wind.deg}도 / 풍속: ${wind.speed} m/s`}</h4>
                </>
            );
        }

        function App() {
            return (
                <>
                    <h1>Today's weather</h1>
                    <Weather/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
    
</body>
</html>
<!--<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>03_data-component_02_weather</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const API_KEY = '58db9a21771b7e4f056707155dcc2f30'
        const {useState, useEffect} = React;

        // getPosition 함수는 setPosition을 사용하지 않고 위치 객체만 resolve
        function getPosition() {
            return new Promise((resolve) => {
                navigator.geolocation.getCurrentPosition(
                    (currentPosition) => {
                        resolve({
                            latitude: currentPosition.coords.latitude,
                            longitude: currentPosition.coords.longitude
                        });
                    }
                );
            });
        }

        // 반드시 return으로 fetch Promise 반환!
        function getWeather(coords){
            return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}&units=metric&lang=kr`)
                .then(response => response.json());
        }

        function Weather() {
            const [position, setPosition] = useState({});
            const [cityName, setCityName] = useState('');
            const [weather, setWeather] = useState({});
            const [wind, setWind] = useState({});

            useEffect(() => {
                const loadData = async () => {
                    const coords = await getPosition();
                    setPosition(coords);

                    const result = await getWeather(coords);
                    setCityName(result.name);
                    setWeather(result.weather[0]);
                    setWind(result.wind);
                }
                loadData();
            }, []);

            return(
                <>
                    <h3>Location</h3>
                    <h4>{`경도 : ${position.longitude}  위도 : ${position.latitude}`}</h4>
                    <h4>{`조회 도시: ${cityName}`}</h4>
                    <h4>{`날씨 : ${weather.main} / 설명 : ${weather.description}`}</h4>
                    <h4>{`풍향 : ${wind.deg}도 / 풍속: ${wind.speed} m/s`}</h4>
                </>
            );
        }

        function App() {
            return (
                <>
                    <h1>Today's weather</h1>
                    <Weather/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
    </script>
</body>
</html>
