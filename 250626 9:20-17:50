# Review JSX
# JSX?
# createElement로 엘리먼트를 정의하는 방식은 번거롭고 가독성도 좋지 않다.
# 그래서 리액트 팀은 ReactElement를 정의하기 위해 JSX문법을 제공한다.
# JSX는 JavsScript의 확장 문법으로 
# JavaScript에서 HTML의 markup(태그) 방식처럼 엘리먼트를 생성하여 Component를 만들 수 있다.
# 단, JSX는 공식적인 JavaScript 문법이 아니므로 바벨(babel)이라는 트랜스파일링 툴을 필요로 한다

# Babel?
# 개념
# ES6(ECMAScript 2015+) 코드(상위)를 
# 이전 웹 브라우저 및 환경에서 돌아갈 수 있는 
# 하위 버전의 코드로 변경(호환, Cross Browser)해주는 transpiler이다.
# JSX를 처리하기 위한 표준으로 자리 잡았다.

# JSX의 활용
# 1. Javascript 표현식 활용
# JSX 문법 내에서는 중괄호를 활용하여 JavaScript 표현식을 적용할 수 있다.

# 그 외에 ‘기존 html의 attribute와는 다른 이름(onclick → onClick)을 사용해야 한다’든지 
# ‘inline 방식으로 style attribute에 적용할 attribute 값은 객체로 적용해야 한다’와 같이 
# 기존 HTML, JavaScript의 문법과 달리 주의 해야 할 문법들이 존재한다

# 주석도 중괄호를 활용해야 작성 가능하다.
const element = (
  <>
    <h1
      className="text" // 한줄 주석
    >
      주석 추가해 보기
      {
        // 한 줄 주석
      }
    </h1>
    {
      /*
        여러줄
        주석
      */
    }
    /* 노출 되는 내용(주석처리 안 됨) */
    // 노출 되는 내용(이 방식은 주석처리 안 됨)
  </>
);

ReactDOM.createRoot(document.getElementById('root')).render(element);


# Fragment를 활용한 element 생성
# React의 엘리먼트는 최상위 노드는 하나로만 구성해야 한다.
# (하나의 DOM Tree로 작성해야 한다.)
# 최상위 부모 엘리먼트로 쓰일 태그가 있다면 해당 태그를 쓰면 되지만 
# 그렇지 않다면 Fragment를 활용하여 하나의 DOM Tree가 생성되게 할 수 있다.

# 최상위 엘리먼트가 2개 이상일 때는 에러가 발생한다.
const element = (
	<h1>My favorite fruit is an 최상위 엘리먼트1</h1>
	<h3>Apple최상위 엘리먼트2</h3>
)
ReactDOM.createRoot(document.getElementById('root')).render(element);

# 최상위 엘리먼트 2개를 피하기 위한 방법1
# div 태그를 최상위 부모 엘리먼트로 작성한다
const element = (
	<div>
		<h1>My favorite fruit is an</h1>
		<h3>Apple</h3>
	</div>
)
ReactDOM.createRoot(document.getElementById('root')).render(element);

# 방법 2 : React.Fragment 활용
const element = (
	<React.Fragment>
		<h1>My favorite fruit is a</h1>
		<h3>Banana</h3>
	</React.Fragment>
);
ReactDOM.createRoot(document.getElementById('root')).render(element);

# 방법 3 : 축약 문법 사용
const element = (
	<>
		<h1>My favorite fruit is a</h1>
		<h3>PineApple</h3>
	</>
);
ReactDOM.createRoot(document.getElementById('root')).render(element);

# attribute
# JSX를 이용해 엘리먼트를 정의할 시 속성(attribute)도 정의할 수 있다.
# 주의할 사항은 class 속성은 className이라는 속성명을 사용해야 한다.

# 엘리먼트에 attribute 적용
const id = "kinds1";
const className = "animal";
const element = <h1 id={id} className={className} onClick={test}>cat</h1>;
ReactDOM.createRoot(document.getElementById('root')).render(element);

# inline-styling-attribute
# JSX를 활용한 element 생성 시 inline 방식으로 style를 적용할 때 
# JavaScript의 객체를 활용할 수 있다.
# 단, css속성명은 camel-case로 작성해야 한다.(kebab-case 아님)
# 또한 단위가 있는 css 속성은 단위를 사용 시에는 
# 문자열로 처리하고 단위를 작성하지 않으면 숫자로 작성한다.(ex: ‘10px’ 또는 10)
const style = {
	backgroundColor: 'red',
	color: 'white',
	marginTop: 30,
	// padding: '20px' 
	// 단위를 작성하려면 문자열로 사용하지만 단위를 생략하면 숫자만 사용 가능(생략 시 px를 붙인다.)
	padding: 20
}
const element = (
	<>
		<h1 style={style}>Worst Fruit</h1>
		<h3>Kiwi</h3>
	</>
);
ReactDOM.createRoot(document.getElementById('root')).render(element);


# event-attribute
# JSX를 활용한 element 작성 시 중괄호를 활용하여 이벤트를 작성할 수 있다.
# 단, 이벤트 관련 속성명은 camel case로 작성해야 한다.(소문자 아님)
const element = (
  <>
    <button onClick={() => alert('클릭했당')}>클릭하지마시오</button>
  </>
)
ReactDOM.createRoot(document.getElementById('root')).render(element);


# comment-in-JSX
# JSX 방식을 적용하는 코드에서의 주석은 일반 JavaScript 주석을 작성할 때와 조금 다르다.
# 기본적으로 중괄호를 활용하여 주석을 작성하며 태그 안에서 주석을 작성할 수도 있다.
# (시작 태그에는 주석을 작성하지만 종료 태그에는 일반적으로 주석을 작성하지 않는다.)
{/* 중괄호를 활용한 주석 */}
{
	// 중괄호를 한줄 주석과 다른 줄에 작성하면 한줄 주석도 작성 가능하다.
}
<h1
	id="title1" // 태그에 주석 시에는 중괄호를 사용하지 않아도 된다.
>
제목1
{
	// 한줄 주석
}
</h1>
