******프로젝트 중요!! 
파라미터로 내가 아이디랑 비번 넘겨서
로그인할 때 로그인 아이디와 비번 URL에 공개되는 치명적인 오류 있었음!!!



스레드 공유(공유되는 메모리 공간): static 변수
가장 큰 차이점은 메모리 공유 여부

프론트엔드?
요청은 싱글스레드, 그 이후는 멀티스레드.
멀티스레드 상황에서는 .....?
동기는 블로킹으로 구현, 비동기는 논 블로킹으로 많이 막음.
동기= 블로킹은 아님

자바
기본 데이터 타입(기초 자료형, 원시 자료형)
참조 데이터 타입(레퍼런스 데이터 타입): String, Array, Class, Interface 등
-> 참조= 주소값(메모리 주소, 실제 데이터가 저장된 메모리의 주소)을 참조한다.
-> 레퍼런스 데이터 타입은 스택에 저장

오버로딩은 정적 바인딩. 정적 바인딩: 코드를 로딩할 때 이미 결정되는 것
오버라이딩: 동적 바인딩. 프로그래밍이 실행될 때 그제서야 어떤 메소드가 실행될 지 아는 것.
->스프링에서는 동적 바인딩 많이 사용. 프로젝트에서 구현한 빈들이 모두 동적 바인딩임.

자바의 접근 제어자: public, protected, default, private

(배열과 리스트에 관한 질문은 면접 빈출, 필수 체크(?)임)
ArrayList 등을 직접 만들어 써보는 걸 추천.

강사님 면접질문
1. Integer 타입의 오버플로우 문제
2. try-catcy-finally 동작 과정

예외처리가 실무에선 정말 중요함

면접빈출
1. 클래스, 객체, 인스턴스에 대해 설명하시오
서버는 개념, 인스턴스는 그 서버가 구체화된 선물(??)(1개)
클래스는 객체의 설계도

DBMS 엔진이 쿼리를 해석하는 순서가 있음. 쿼리순서, 실행 횡성알아둬야 함

DB에서의 트랜잭션, 스프링 부트의 트랜잭션은 어떻게 사용되는지 따로따로 공부하기(둘은 같은 개념이 아님)

spring framwork가 뭐예요? 가장 핵심적인 역할을 하는 건 뭐예요? => IoC 컨테이너


프레임워크: 큰 흐름을 소프트웨어가 규정하는 내용. 그 안에있는 걸 내가 필요에 의해 사용하는 것.
테스트를 하려면 외부에서 생성자 주입을 통해 주입받아야 함.

자바 어플리케이션이 DB와 커넥트 하기 위해선 JDBC가 필수적임. JPA도 뜯어보면 JDBC 사용하는 것.
API도 결국 인터페이스임. 
"JPA를 사용했다" (X) => "Spring JPA를 사용했다." (O)

ORM(Object Relational Mapping)은 JPA 뿐만 아니라 모든 언어에 통용되는 말이다.

실무에서 OneToMany는 안 씀. 거의 다 ManyToOne 사용.

면접 빈출 (중요관점: 실제 데이터가 어디에 있는 건지 알고 있는가?):
쿠키와 세션에 관한 질문
-> 쿠키에 저장하는 거 맞아? 다른 대안은 없어? 왜 그렇게 구현했는지에 대한 고민이 포토폴리오에 들어가야함.
특히 JWT 구현 담당자의 경우 해당 사항에 관한 고민을 포토폴리오에 반드시 넣어야함.

TCP/IP 스택이 제일 먼저 와닿는 개념이기 때문에 해당 사항에 관한 공부를 먼저 할 것.


고도화 작업, 면접 시 어떻게 표현할지 전략적인 방안 마련 필요

실문에서 캐싱 많이 사용. 그러니 캐싱의 메커니즘과 어떤 구성으로 만들 수 있는지 알 수 있는 것 중요.


팀 프로젝트 조언: 통합 테스트 구현

아키텍처: 마이크로 서비스 아키텍처는 신입이 알 필요는 없다고 생각함

디자인 패턴은 나중에 공부

Docker 공부 필요

Message Brokers는 플러스 알파라서 필수는 아닌데 해놓으면(이해하고 썼는지, 구현하면서 어떤 고민을 했는지) 포폴에서 튈 수 있음


배포 다 같이 해서 적어도 어떤 식으로 돌아가는지 알아야 면접 대비 가능함

GraphQl 안 급함


트러블슈팅해서 성능을 개선했다-> 지표가 필요함. 얼만큼??->그러기 위해선 성능테스트가 필요하고, 그를 위해선 모니터링이 필요함


기술의 탄생배경에서 나오는 언어, 프레임워크 등의 특성을 알 수 있다. 이 특성을 통해 해당 언어, 프레임워크 등의 핵심 기능을 알아놔야한다.


***중요!!***
뭐가 됐든 선택에 그에 대한 이유가 필요함. 강사님 생각으론 "공부할려고요"라고 답해도 괜찮을 거라 생각함.
"남들이 다 쓰니까 썼어요"가 최악의 답변.

포토폴리오 구성: 범용적으으로 준비해야함
트러블슈팅 자세히 적고 이후 채용공고 내용에 따라 답변.

지원하려는 회사에 따라 코딩테스트를 그냥 포기하는 방법도 있음. 강사님은 그럴게 선택과 집중에 따라 취업을 준비했음.

기간 내에 구현하는 것이 1차 목표

"제가 예전 부분이 마음에 안 들어서 이런 식으로 개선을 했습니다. 개선 결과, 여기가 저떻게 매선이 됐습ㄴ다."라고 발표하기

금융권 취업희망 시 DB와 트랜잭션 관리에 관한 내용이 완벽히 구성되어있어야 함.


***CRM feedback: ***
고객과 접점이 되는 것에 대한 포인트
어떤 성향의 분들이 어떤 시술들을 할까? 이런 고민이 필요함.

DB 부하 올 때 처리를 캐싱으로? 아님 DB를 나눠야할까?  중간 정산 테이블 필요하겠다 이런 다양한 관점과 상상력으로 
기능 고도화 필요

업무 사항: "코드 리팩토링 및 테스트 기반 품질 개선" = 실무에선 테스트 코드 할 수 있는 상황이 잘 없음. 그러나 팀 바이 팀이긴 함.
이 부분은 "경험을 해봤다"정도로만 해도 괜찮고 오히려 '우리 회사는 테스트 코드 안 하는 데 괜찮겠어요?', 
'우리 회산 코드리뷰 안 하는 데 괜찮겠어요?' 물을 수 있음.
'어 여긴 코드리뷰도 안 하네? 망해가는 회산가?'하고 뽑아놓은 신입이 떠날 수도 있기 때문


SI / 솔루션 / 서비스 이렇게 크게 3가지로 구분을 하면 좋음
SI : 프로그램 사용자(고객사) 존재. 고객사에 소프트웨어 만들어서 납품
SI 개발자는 파견 근무해야할 때도 있음("우리 회사는 DB 오픈 못해요!" 하면 파견 근무 가야함)
솔루션: 본인들의 코어 프로그램이 있고, 그 프로그램을 갖고 회사에 맞춰 커스텀해갖고 개발하는 일이 솔루션 회사가 하는 일
주로 코어 PG 개발 팀과 고객사에 맞춰 커스텀하는 팀 크게 2가지로 나뉨 (월급 많이 줌)
프로젝트한 게(CRM, 그룹웨어) 다 솔루션 기반



백엔드 언어 Node로 갈아탈 수 있도록 준비를 미리미리 해놓는 것을 추천.
노드는 싱글 스레드로 처리되고 멀티 스레드로 나중에 처리 됨.

DB에 저장하고 하는 것들은 io작업.
암호화, 파싱 등은 CPU 작업.
웹에서는 io작업이 훨씬 많기 때문에 백엔드를 노드로 하는 시장이 점점 더 커지고 있는 거 같음(강사님 의견)
특히 작은 기업일 수록 요즘은 노드로 시작하는 경우가 많음

SI만 하는 회사, SI/SM 모두 하는 회사 SM만 하는 회사 이렇게 다양함
SM: 납품한 거 유지보수, 운영. 한동안은 파견가서 근무하는 경우가 많았는데 요즘은 원격근무 하는 거 같음.

기술문서 작성 잘 하는 방법 배워야 함.


홈서버 (배포) 운영 시도와 '인증서 발급', 'PKI' keyword 관련 있음


보통 쓰는 '웹서비스 프로토콜': HTTP

프로젝트 한 내용 자신감 갖고, 해당 기능에 대해 사용 이유 등을 잘 답할 수 있도록 연습만 열심히 하길!



현업에서는 FE개발자와 BE 개발자가 소통할 때 API 문서를 통해 개발하기 때문에
SWAGGER를 꼭 알아둬야한다. (특히 java spring의 경우 swagger많이 씀)
API문서에는 200이 떨어지면 뭐가 나오고 400이 나오면 뭐가 생기고 이런 것과 관련된 내용이 다 API문서에 나옴


mysql의 경우 "rdb"로 필수 기술 스택을 추가

Langchain은 LLM 프레임워크.
"솔직히 말하면 파이썬과 LLM 버리고 java와 JS에 집중하겠다?저는 이것도 괜찮은 선택이라고 생각은 합니다.
하지만 이미 AI가 모든 산업에서 쓰이고 있는 상황이기 때문에 AI에 대한 기초적이고 전반적인 이해는 필요하다고 생각합니다."



**포토폴리오 작성 시**
내가 가진 건 무엇인지 꾸준히 고민하기
1. Introduction
어필하고 싶은 역량 
[예시. 웹 어플리케이션 구현 & 배포 경험 (그리고 논거), 
꾸준한 성장능력(꾸준한 코드작성 습관, 나만의 학습루틴을 지금까지 이어가고 있으며 학습한 내용을 내 것으로 소화하는 "기술블로그(하이퍼링크)" 운영 중,
업무 책임감과 커뮤니케이션(일정관리 역량으로 담당 기능을 약속한 기한 내에 완성함, 회의 및 소통 시 필요한 핵심내용을 미리 정리하고 대화를 시작하는 습관)]
-> 강사님도 부트캠프에서 PM 맡았어서 "일정관리 역량으로 담당 기능을 약속한 기한 내에 완성함" 넣었음

2. 연락처

3. Skills
Backend : Java, Spring boot, JPA Querydsl, JUnit5, Swagger

Database: MySQL, H2, Redis

CI/CD: AWS EC2, Aws RDB, 등등

Tools: Github, Stack, Notion

4. Project
000
웹 어플리케이션
API 개발

4-1. 프로젝트 기헙 바로가기(링크)
4-2. 배포된 웹 어플리케이션 바로 가기
-> test 용 ID / PW : abd@kakao.com/password

4-3. 기간: 총 42일 (2022-00-00 ~ 2022-00-00)
4-4. 개발 인원 총 5명 (프론트엔드 2명 + 백엔드 3명)
4-5. 담당 역할
- RestfulAPI 개발
......
* 팀장 역할 수행
- 프로젝트 노션페이지 기획
- 스프린트 계획 및 회고 회의 주도

프로젝트 포토폴링에 대한 내용과 제 고민은 여기(하이퍼링크)와 같습니다.

5. Education 
어디 스쿨
2022.00 ~ 2022.00
- 학습 내용
* Java, Spring boot, JPA, MySQL, Git, Redis, Spring Security, Swagger
* 자료구조 및 알고리즘
* CS 기초지식(운영체제, 네트워크 등)


PJ 포폴
가계부 프로젝트 포토폴리오
......
성과: 기간 내 서비스 구현 성공, ......
프로젝트 아키텍처 넣으면 좋다.
코드 상세 내용 안 궁금함. 아키텍처를 얼마나 잘 구성했는지가 궁금함

3) ERD + 와이어 프레임
-> 테이블 구성 이유도 면접 질문에 나왔음. 

4) 프로젝트 전체 구현 기능
(영상)

4-1) 프로젝트 세부 기능


1) 직접 구현한 기능
1. 수입한 기능
2.보고서 조회 중 월간 수입, 연간......
표(URL, 메소드, 상태, body...)

2) 프로젝트에서 발휘한 역량과 성장한 점
아래 내용은 모두 '제가 주도적으로 직접' 경험하고 해결한 내용입니다.

> PJ에서의 높은 기여도 35/ 100 (총 5명, 주관적인 점수)
>엑셀 출력기능에서의 컴포넌트 설계
* 엑셀 출력기능에서의 컴포넌트 설계 시 해당 기능을 1회성이 아닌 Component로 두어 확장성을 고려함
* 의존성 분리를 위해 Component는 엑셀 출력을 위한 데이터를 인자로 받으면...
>쿼리 및 성능 개선
* 문제 상황 및 원인
* 해결 방법 및 배운점 (예시. 이런 방법이 문제였고 하지만 이 상황에서 테이블을 추가할 순 없었으니......)
>PJ 구조에 대한 고민과 구현
* 하나의 컨트롤러 안에 여러 서비스 메서드를 호출하는 경우가 발생했는데 '그래도 괜찮을까?'에 대한 의문으로 시작해 PJ 구조에 대해 고민하게 됨(저장버튼이 1개라서 addIncome과 updateIncome 메소드가 함께 실행되었어야 했음)
* 서비스 Layer를 나눠 관리하기로 결정, 두 서비스를 묶는...
>서버 배포와 도커, CI/CD 경험
* CI/CD를 사용하기 위해 Jenkins를 PJ에 적용해야했기 때문에 스스로 학습하고 PJ에 적용함.
* Github에 PR이 Merge되면 webhook을 사용해...
* 직접 작성한 Jenkins Pipeline 코드
> 협업 툴 활용하여 업무 효율 극대화
> 협업 마인드
* 어떤 이슈가 생기거나 도전해 보고 싶은 부분이 생겼을 때 항상 'YES'마인드로 임하였습니다.
* 나중에 글을 읽은 팀원들이 요청자에게 질문했을 때 '(강사님 이름)님이 해결해주셨습니다'라는 피드백을 많이 받았다고 합니다.
* API 수정 요청 시 문제를 정확하게 전달하기 위해 Network HTTP 요청을 확인하고, 해당 이슈로 추론되는 부분의 내용을 검색해보고 공유하여 함께 해결함
* 이를 통해 프론트엔드 개발자의 관심사와 지식 및 업무 범위에 대한 내용을 알게 됨
(사진 캡처)
(사진 캡처)
* PJ에서 개선하거나 추가하고 싶은 부분 : 어쩌구저쩌구
> 

(포폴에서 기능에 대한 내용은 면접관들의 관심사가 아니라고 생각함.
대신 오히려 이거 하면서 어떤 문제상황이 있었을지가 궁금함. 
비슷한 문제가 실무에서 생겼을 때 어떻게 해결했는지를 알 수 있을 거라 생각함)



단위 테스트에 대한 목적은? : 해당 클래스의 그 기능 해당기능을 테스트하기 위한 것.

"사소한 부분이라도 해결해서 뿌듯했던 경험 크게 배운 내용있으면 무조건 어필하라"

내가 어필 가능한 분량: 버그나 머지가 되어야 다음 단계 개발로 넘어갈 수 있기 때문에 깃허브에서 pull request가 올라왔다는 말을 들으면 가장 먼저 코드 리뷰를 달려고 했다.


신입에게 필요한 역량: 해결하려다가 막히면 반나절 지나기 전에 보고하는 것.
"여기서 이런 문제가 있어서 저런 시도를 했는데 여기서 이렇게 되어서 막히고 있는 것 같습니다. 도와주세요!!"

스프링 부트 스레드 풀(?) 왜 기본 설정으로 했는지 근거와 이유가 명확해야한다



프로젝트에서 내가 사용한 기술은 책임있게 준비: 솔직하고 담백하게!
예. 짧게 다닌 알바. "그 부분은 제가 이렇게 저렇게 해결했기 때문에 이 회사에서 같은 일이 벌어지진 않을 것입니다."
"제가 이부분까진 알겠는데 이 부분은 모르겠습니다. (더 공부해서 오겠습니다)"이런식으로 담백하게


** 빌드업 답변 순서와 방법: 반드시 어필하고 싶은 부분이 있다면 이 빌드업 답변 방식을 쓸 것.
1. 기술의 목적(목표) : 노드에 대해 아시나요? 
2. 사용되는 핵심 특징: "노드는 어쩌구(한 줄)"
3. 반대되는, 혹은 다른 대안을 가진 기수로가 장단점
위 순서로 답변을 하되, 핵심 단어들을 위주로 이야기하여 추가로 그 핵심단어에 대한 질문을 자연스럽게 유도하기
이를 통해 내가 원하는 질문을 얻어낼 수 있고, 대화가 잘 된다는 이미지를 심어줄 수 있음

*** 가장 많이 받은 면접 질문
1. 학습 내용
2. 포트폴리오에서 사용한 기술
00은 왜 구현했나?, 왜 00을 사용했나? 00은 어떤 기술인가? 왜 00은 고려하지 않았나?, 만약 이렇게(DB가 요렇게 바뀌었다고 하면?) 변경된다면 어떻게 할텐가?
2-1. 회사 도메인과 관련한 질문
결제 서비스 회사 -> Transaction에 대해서
클라우드 백엔드 개발 -> Docker와 Jenkins 사용경험에 대해서 등

[인성질문]
비전공자인데, 왜 직무를 변경하였나?

경험 확인할 때는 대부분 느꼈던 점이나 가장 중요하거나 어려운 부분이 무엇이었는지 등을 물어보며 실제 본인이 한 것이 맞는지 검증하는 질문들 위주였음
함께 면접을 보는 사람이 있다면, 꼭 상대의 답변에도 귀기울일 것. 상대의 질문이 그대로 나에게 올 수 있고, 상대 답변에 대한 나의 생각을 묻는 경우가 있음.


* 강사님이 느낌 '면접관들이 궁금해 한 것'
[포토폴리오에 써있는 내용들이 어디까지가 진짜인가?]
내가 담당한 부분이 무엇이며 어디까지 내가 한 것인지
PJ에서 실제로 한 고민들과 그 고민들을 갖고 나름의 논리로 해결한 점을 이야기할 때 만족스러워하는 듯한 표정을 자주(?) 봄
코딩한 내용에서 문제점(쿼리가 많이 나간다거나 가독성이 떨어진다거나 등등)을 발견하고 고민하여 개선한 경험 역시 면접관들이 좋아하는 단골 질문이었음

[어떤 방식으로 학습하고 성장했는가?]
앞의로의 성장가능성과 성향을 확인해보려는 속셈...?

[내가 가진 강점이 무엇인지?]
우리 회사가 이 사람을 뽑으면 어떤 유익을 얻을 수 있는지 알아볼 속셈...?

[우리 팀에 적합한 사람인지]
기술스텍(적극 사용하고 있거나, 혹은 추가로 도입하고자 계획한 기술들을 사용한 경험이 있는지)
팀 구성에 나이, 성별, 성향 등이 적합한지

-아래는 취업한 다른 동기들의 경험에서 나온 것
포트폴리오에 작성한 PJ에서 쓰인 기술들을 왜 도입했는지
그 기술을 어느 정도까지 깊게 알고 있는지
다른 기술들에 비해 그 기술은 어떤 점이 좋아서(적합하다고 판단해서) 도입했는지-> 때문에 본인이 사용한 기술들에 대해서는 꽤 깊게 공부해갈 것을 강력 추천!
면접 대상자의 이력서에서 도드라지는 경험(워킹 홀리데이, 직무 전환 부분)
트러블 슈팅

* 코딩테스트: 프로그래머스 레벨 1,2 정도면 준비해볼만 하긴 함. 하지만 요즘 LLM(AI)이 이용되고 있어 앞으로 코딩테스트는 오히려 하향세일 것이라고 생각.


생각보다 중요했던 것
1. Git
2. 에러처리와 Null체크
3. 커뮤니케이션 스킬과 유연함, 수용력
-> 기술적인 이슈도 있지만 그보다는 비즈니스 로직에 대한 이해 중요



***어제 발표한 프로젝트 피드백
프로젝트 개요 이런 건 포토폴리오에 잘 안 들어감

개발환경에 카테고리가 잘못 묶여 있거나 잘못된 곳에 들어간 경우 있음
예시 빌드 툴 : 노드 js??

3-3. 형상관리 전략
-> 왜 개별로 레포지토리를 구성하셨나요?라고 질문이 나올 수 있음(꼭 개별로 레포를 분리해야만했던 이유가 있나요?)

3-3. 워크 플로우 
-> 단위 테스트 왜 하셨나요? 하니까 어떠셨어요? 안 좋은 점은 없었나요?

로직에 대한 표현 : "시퀀스 다이어리"를 개발자들은 가장 많이 사용
가독성 좋게

*무슨 문제가 있었고 어떻게 해결했는지, 트러블 슈팅, 내가 거기서 뭘 배웠는지를 면접관은 관심이 있음
前後 설명 시 수치 값 필요

트러블 슈팅 내용이 가장 흥미로움 (예람님이 만드신 것 중 54페이지가 제일 흥미로웠다고 하심. 스케일이 확장됐을 때(100개 생성)를 가정한 부분 등이 실무와 가장 가깝다고 느꼈음)


'공유 자원에 대한 접근'에 대한 고민이 필요함(멀티 스레드 문제가 반드시 일어날텐데 이것과 관련된 트러블 슈팅 정리를 해볼 것을 적극 추천함)
->우리 PJ 경우, 같은 16:30으로 예약 시도할 경우에 대한 테스트 필요 
-멀티 스레드의 공유자원을 막는 방법은 여러 개가 있기 때문에 그것만 한바닥 써도 트러블 슈팅과 관련된 포토폴리오가 가능할 것.
-기술적으론 이상한 결론이지만 PJ의 결과와 시점 지키기 혹은 배보다 배꼽이 큰 경우 등에는 기술이 나는 오류를 그냥 납두는 방법도 있음


시은님네 팀 '아워아워'PJ에서
공통 Response, Exception처리... 이 부분에서 제일 흥미를 느끼셨다고 함.
다만 이것과 관련해서 고민했던 내용이 나오진 않아서 아쉽다고 하심.
다음에는 "팀과 관련해서 이런 것 저런 상황에서 이러한 고민을 했고
이렇게 저렇게 결론을 내렸다." 이런 부분이 들어가면 좋을 듯이라고 하심.

"RESTful 원칙을 지키며 설계했습니다."-> 면접에서 물어뜯기 딱 좋은 답변


- 강사님의 2차 리팩토링에 대한 약간의 걱정(?)
기능을 추가로 덧붙이는 것 자체에 대한 근본적인 물음, 고민이 들어간 이후에 2차 리팩토링을 했으면 좋겠음
물론 새로운 기능을 추가하면서 (안 해봤다면) 공부하는 방향에서 기능을 추가하는 것도 괜찮지만, 
포토폴리오를 위한 프로젝트이기 때문에 있는 기능을 고도화하는 방식으로 2차 개발이 이루어지는 것이 나을 수도 있음.
그러한 부분도 고려했으면 좋겠음.


-프로젝트에서 맡은 기능이나 담당했던 부분에 대한 기술 작성할 때 (지원님 문제)
어떤 기능을 담당했다라고만 써도 면접관들은 프로젝트 규모가 이 정도 되었겠구나 대략 파악이 됨 
근데 이게 어떻게 동작하며 어쩌구저쩌구 이런 건 굳이 자세하게 안 써도 될 것이라 생각함
강사님이 포토폴리오 작성할 때 거기서 어떤 걸 배웠고 어떤 성장을 했고 어떤 트러블 슈팅을 했는지가 있다면 써도 
예를 들면 "내가 이걸 통해 자바 문법을 완벽히 배웠다/DTO의 사용법을 익혔다." 이런 부분은 쓰기 애매(안 쓰길 추천).
내 강점으로 내세운 것들과 일맥상통하는 것들이라면 적어야 함. 


-완성도가 떨어지는 코드더라도 팀원들간의 협동심을 보여준 코드(공통된 컨벤션을 잘 지킨 코드 예시)를 보여주는 게 맞는지?
아님 퀄리티 있는 코드를 보여주는 게 맞는지?(지원님 문제)
"제 소관이 아니었습니다." (X) ->
"면접관님이 얘기하신 부분이 맞습니다. 하지만 저희는 기간 내에 서비스를 완성하는 것을 제 1 목표로 삼았고, 해당 기간 내에 기능을 완성시키기 위해 집중을 하다보니 코드 컨벤션을 항상 지키는 것보다 다른 것을 추구했습니다. 또한 각자 맡은 기능을 개발하는 상황이었기 때문에 면접관님이 우려하시는 코드 컨벤션 안 지킴으로 인한 개발 퀄리티 하락은 일어나지 않았습니다." (o)
이런 식으로 말하면 좋음


-정말 강조하고 싶은 면접 관련 대비 공부
선형 자료 구조는 자바 언어로 다시 한 번 학습을 하는 걸 강력 추천함
정말 시간이 없다면 배열과 리스트는 어떻게 동작하는지, 차이가 뭔지
스트링 버퍼, 스트링 빌더에 관한 질문이 정말 자주 나옴. -> 관련 개념 복습 필요


강사님이 생각하시는 개발 직군의 좋은 점은
경력이 생기면서 연봉 상승이 잘 된다는 점임.


면접 마지막 질문으로
"제가 사실 비전공자이고 주변에 인맥이 없어서 취업준비를 잘 하고 있는지 모르겠습니다.
아무래도 면접관님들이 개발자 선배이기도 하니 오늘 한 면접에 대한 피드백을 주셨으면 좋겠습니다."
자주 사용하심. 강사님 인간대인간이라는 인격적인 어필을 위한 개인적인 전략이기도 했음.


현업에서는 액세스 토큰은 로컬 스토리지에 넣어서 쓰고 리프레쉬 토큰은 어디에 넣어서 쓸지 많은 고민을 하다가 쿠키에 넣어서 썼음
(반대일 수도 있음)
처음에는 둘 다 로컬 스토리지에 넣어서 썼는데 과정이 지금 당장은 기억 안 남.
->왜 바뀌었나? 로컬 스토리지에 둘 다 넣었다가 공격 가능성이 생겨서 둘 중 하나라도 털리는 걸 막기 위해 둘을 분리해서 저장하였음.

-마지막 질문 있나요?에 대한 고민(내 질문)
회사 내 팀이 어떻게 구성되는지, 합격하게 된다면 난 어떤 역할을 맡게 되는지. 이 회사는 어떤 사업을 주로 진행하나요?
이러한 업무관련 질문을 중점적으로 물어봤음. 실제 내가 회사 들어가면 어떻게, 어떤 업무를 하게 될지에 대한 부분
복지와 연봉에 관련된 건 합격전화 받고 나서 여쭤봐도 되니 면접 때는 묻지 않는다.(그 전에 내가 이정도 연봉이면 이 회사 간다 안간다 정도의 기분은 있어야 함)
희망연봉은 그 연봉 이하면 안 갈 거다 하면 당당하게 말하고 그냥 진짜 돈 크기 상관없이 갈 거다 하면 "회사 내규에 따르겠습니다" 답변도 ㄱㅊ.

-간단한 자기소개를 해달라고 할 때 간단하게가 어느 정도로 될지(시은님 질문)
"간단한 자기소개라고 하셨는데 1분 정도로 해도 될까요?" 물어본다.

