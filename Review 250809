# Review number one: Network
# Reference : Gene (2018). 그림으로 배우는 네트워크 원리. (김성훈, 역). 영진닷컴.
# 기타미 류지 (2022). 그림으로 이해하는 네트워크 용어. (성창규, 역). 길벗.


# 포트 번호의 역할
# 호스트에서 동작하는 application에 데이터를 배분하기 위해서는 각각의 애플리케이션을 식별할 수 있어야한다
# 애플리케이션 식별에는 "포트 번호"를 이용하는데, 이 "포트번호"란 TCP/IP의 애플리케이션을 식별하는 번호로,
# 'TCP 또는 UDP 헤더에 지정'된다. 포트 번호는 16비트 수치이기에 포트로 지정가능한 범위는 0부터 65535까지다.
# 각 범위마다 의미가 있다.
# 0 - 1023 : 웰노운 포트 (서버 애플리케이션으로 예약된 포트 번호) -> java spring 8080, node.js(javascript) 3000, HTTP 80
# 1024 - 49151 : 등록된 포트 (자주 이용되는 애플리케이션의 서버 쪽 포트 번호)
# 49152 - 65535 : 클라이언트 애플리케이션용 포트 번호

# 특히 중요한 것이 "웰노운 포트 번호well-known port number"이다.
# 서버 애플리케이션을 실행하면 웰노운 포트 번호(e.g. HTTP 80, HTTPS 443)로 클라이언트 애플리케이션의 요청을 기다린다.
# "등록된 포트registered port"는 웰노운 포트 이외에 자주 이용되는 서버 애플리케이션을 식별하기 위한 포트 번호이다.
# "동적/사설 포트"는 클라이언트 애플리케이션을 식별하기 위한 포트 번호입니다.
# 웰노운 포트나 등록된 포트와 달리 미리 정해져 있지 않고 클라이언트 애플리케이션이 통신할 때 동적으로 할당된다.
# 3-17 포트 번호로 어플리케이션에 할당한다

# [클라이언트] 
# [웹 브라우저]   ---------(data= 웹서버 애플리케이션에 보내는 데이터. 목적지 포트 번호 : 80) ----> [웹서버 애플리케이션(포트번호: 80)]
# [전자메일 소프트웨어] ---(data= 메일 서버 애플리케이션에 보내는 데이터. 목적지 포트 번호: 25) ---> [메일 서버 애플리케이션(포트번호: 25)]



# Review number two: JPA
# https://nbcamp.spartacodingclub.kr/blog/%EA%B0%9C%EB%85%90-%EC%BD%95-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-%ED%8E%B8-jpa%EB%9E%80-orm-hibernate-jpa--21323

# 2. JPA의 출현 Rise of the JPA
# JDBC : Java Database Connectivity

# 전통적으로, JAVA 어플리케이션에선 JDBC를 사용해 DB와 상호작용해왔다.
# 그러나 JDBC를 직접 사용하는 건 
# 반복적이고 boilerplate한 코드 작성,
# 객체 지향 프로그래밍과 관계형 DB 간의 불일치,
# DB에 종속적인 코드
# 등의 한계와 문제점을 갖고 있었다.

# 이것이 왜 문제냐면, 자바 어플리케이션에서는 persistence, 데이터 지속성이 중요하기 때문이다.
# 데이터 지속성이란 애플리케이션에서 생성되고 조작되는 데이터를 영구적으로 저장하고 관리하는 것을 말한다.
# 데이터 지속성persistence를 유지함으로써 
# 애플리케이션은 데이터의 무결성을 유지하고 
# 장기적으로 데이터를 보관하며 
# 필요할 때마다 데이터를 검색하고 활용할 수 있다.

# 이렇게 java에서 persistence가 중요했기 때문에
# JDBC의 문제점을 해결하기 위해 나타난 것이 JPA였다.
# JPA는 Java Persistence API의 약자로, 
# 자바 어플리케이션에서 관계형 DB를 사용하는 방식을 "표준화"한 API이다.
# 개발자는 JPA 사용 시 객체 지향적인 방식으로 데이터를 다룰 수 있고,
# DB에 대한 코드 종속성을 줄일 수 있게 되었다.

# JPA는 ORM,
# Object Relational Mapping 기술을 기반으로 하며
# 이 ORM 기술은 객체와 관계형 DB 간의 매핑을 자동화하여
# 개발자의 생산성과 코드의 유지보수성을 높인다.

# JPA는 ORM의 장점을 활용하면서도 표준API를 제공해
# 다양한 구현체를 사용할 수 있는 유연성을 제공한다.
