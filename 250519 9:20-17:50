# 오늘 나간 진도 Today's lecture
# MYSQL : WHERE, DISTINCT, JOIN, GROUPING, SUBQUERY

# SQL 실습문제 Practice of SQL
-- 모든 행 모든 컬럼 조회
-- 1. EMPLOYEE테이블에서 모든 정보를 조회하세요
SELECT *
  FROM employeedb.employee;
  
-- 원하는 컬럼 조회
-- 2. EMPLOYEE 테이블의 사번, 이름을 조회하세요
SELECT EMP_ID,
	   EMP_NAME
  FROM employeedb.employee;
  
-- 원하는 행 조회
-- 3. EMPLOYEE 테이블에서 부서코드가 D9인 사원을 조회하세요
SELECT DEPT_CODE,
	   EMP_NAME
  FROM employeedb.employee
 WHERE DEPT_CODE = 'D9';
 
-- 원하는 행과 컬럼 조회
-- 4. EMPLOYEE 테이블에서 급여가 300만원 이상인 직원의 사번, 이름, 부서코드, 급여를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       DEPT_CODE,
       SALARY
  FROM employeedb.employee
  WHERE SALARY >=3000000;

-- 5. 부서코드가 D6이고 급여를 200만원보다 많이 받는 직원의 이름, 부서코드, 급여를 조회하세요
SELECT EMP_NAME,
	   DEPT_CODE,
       SALARY
  FROM employeedb.employee
 WHERE DEPT_CODE = 'D6'
   AND SALARY >= 2000000;

-- NULL값 조회
-- 6. 보너스를 지급받지 않는 직원의 사번, 이름, 급여, 보너스를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       SALARY,
       BONUS
  FROM employeedb.employee
 WHERE BONUS IS NULL;
 
-- 7. EMPLOYEE테이블에서 급여를 350만원 이상, 550만원 이하를 받는 직원의 사번, 이름, 급여, 부서코드, 직급코드를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       SALARY,
       DEPT_CODE,
       JOB_CODE
  FROM employeedb.employee
WHERE SALARY BETWEEN 3500000 and 5500000;

-- 8. EMPLOYEE테이블에서 성이 김씨인 직원의 사번, 이름, 입사일을 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       HIRE_DATE
  FROM employeedb.employee
  WHERE EMP_NAME LIKE '김%';
/* WHERE EMP_NAME LIKE '김__'; */

-- 9. EMPLOYEE 테이블에서 '하'가 이름에 포함된 직원의 이름, 주민번호, 부서코드를 조회하세요
SELECT EMP_NAME,
       EMP_NO,
       DEPT_CODE
  FROM employeedb.employee
WHERE EMP_NAME LIKE '%하%';

-- 10. EMPLOYEE테이블에서 전화번호 국번이 9로 시작하는 직원의 사번, 이름, 전화번호를 조회하세요
-- HINT!! 와일드 카드 사용 : _(글자 한자리), %(0개 이상의 글자)
SELECT EMP_ID,
	   EMP_NAME,
       PHONE
  FROM employeedb.employee
WHERE PHONE LIKE '01_9%';
       
-- 11. EMPLOYEE테이블에서 전화번호 국번이 4자리 이면서 9로 시작하는 직원의 사번, 이름, 전화번호를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       PHONE
  FROM employeedb.employee
WHERE PHONE LIKE '01_9_______';

-- 12. 부서코드가 'D6' 이거나 'D8'인 직원의 이름, 부서, 급여를 조회하세요
-- HINT!! IN 연산자 : 비교하려는 값 목록에 일치하는 값이 있는지 확인
/*Previous check : Using INNER JOIN between DEPT_CODE and DEPT_TITLE*/
/* SELECT A.DEPT_CODE, B.DEPT_TITLE
		FROM employeedb.employee A
		INNER JOIN employeedb.department B ON A.DEPT_CODE = B.DEPT_ID; */
  
# 처음에는 JOIN 해줘야하는 두 열을 합쳐줘야하는 줄 알고
# SELECT A.DEPT_CODE, B.DEPT_ID로 합쳐줬는데
# 결과값에서 D9 D9  D8 D8 ...이런 식으로 나와서 뭔가 잘못된 것을 알았다.
# 이후 JOIN 해주려는 목적이 DEPT_CODE와 DEPT_TITLE의 연결인 것을 깨닫고
# SELECT A.DEPT_CODE, B.DEPT_TITLE로 바꿔주었다.
# First, I thought two columns must have the same value to use join,
# so I selected DEPT_CODE and DEPT_ID.
# But its output was unexpected like D9 D9, D8 D8...
# Than I realized my purpose is to join the DEPT_CODE and DEPT_TITLE.
# Eventually, I joined DEPT_CODE and DEPT_TITLE.

SELECT EMP_NAME,
	     B.DEPT_TITLE,
       SALARY
  FROM employeedb.employee A
  INNER JOIN employeedb.department B ON A.DEPT_CODE = B.DEPT_ID
where DEPT_CODE IN ('D6', 'D8');

-- 13. 이씨성이 아닌 직원의 사번, 이름, 이메일주소를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       EMAIL
  FROM employeedb.employee
  WHERE EMP_NAME NOT LIKE '이%';
/* WHERE EMP_NAME NOT LIKE '이__'; */
       
-- 14. J2직급의 급여 200만원 이상 받는 직원이거나 J7 직급인 직원의 이름, 급여, 직급코드를 조회하세요
SELECT EMP_NAME,
	   SALARY,
       JOB_CODE
  FROM employeedb.employee
WHERE (JOB_CODE = 'J2' AND SALARY >=2000000)
   OR JOB_CODE = 'J7';


# SQL JOIN 연습 문제
# MYSQL JOIN PRACTICE
# 최종 완성 코드 Solved Code : Latest
-- JOIN을 이용하여 여러 테이블을 조회 시에는 모든 컬럼에 테이블 별칭을 사용하는 것이 좋다.
-- 1. 직급이 대리이면서 아시아 지역에 근무하는 직원의 사번, 이름, 직급명, 부서명, 지역명, 급여를 조회하세요
SELECT EMP_ID,
	   EMP_NAME,
       B.JOB_NAME,
       C.DEPT_TITLE,
       D.LOCAL_NAME,
       /* C.NATIONAL_CODE, 
       근데 조건에 '아시아 지역에 근무하는'이라면 아시아 어느지역에 근무하는지 구분해주는게 데이터 구분에 더 낫지 않을까?(개인생각)*/
       SALARY
  FROM employee A
  INNER JOIN JOB B USING(JOB_CODE)
  INNER JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  INNER JOIN location D ON C.LOCATION_ID = D.LOCAL_CODE
  WHERE JOB_CODE='J6' AND D.LOCAL_NAME LIKE 'ASIA%';
  
-- 2. 주민번호가 70년대 생이면서 성별이 여자이고, 성이 전씨인 직원의 이름, 주민등록번호, 부서명, 직급명을 조회하세요.
SELECT EMP_NAME,
	   EMP_NO,
       B.DEPT_TITLE,
       C.JOB_NAME
FROM employee A
INNER JOIN job C USING(JOB_CODE)
INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 WHERE EMP_NO LIKE '7%'
     AND EMP_NO LIKE '%-2%'
     AND EMP_NAME LIKE '전%' ;
/*문자열 찾아서 반환해야할 때는 LIKE도 쓸 수 있단 것 잊지 말 것!
  WHERE EMP_NO = '7%'부터 안 됐음.
  EMP_NO LIKE '7%'로 바꿈 >> 됨
  그 아래 것들도 다 EMP_NO LIKE '%-2%' 이런 형태로 바꿔줌*/

-- 3. 이름에 '형'자가 들어가는 직원의 사번, 이름, 직급명을 조회하세요.
SELECT EMP_ID,
	   EMP_NAME,
       B.JOB_NAME
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 4. 해외영업팀에 근무하는 직원의 이름, 직급명, 부서코드, 부서명을 조회하세요.
SELECT EMP_NAME,
	   B.JOB_NAME,
       DEPT_CODE,
       C.DEPT_TITLE
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  WHERE C.DEPT_TITLE LIKE '해외영업%'; 

-- 5. 보너스포인트를 받는 직원의 이름, 보너스, 부서명, 지역명(KO? / LOCAL_NAME : ASIA1?)을 조회하세요.
SELECT EMP_NAME 이름,
	   FLOOR(BONUS * SALARY) 보너스,
       /*BONUS * SALARY하니까 소수점 10번째 자리까지 나옴. 안 깔끔함. 인터넷에서 'SQL 소수점 버리기' 검색해서 FLOOR함수 찾아냄*/
       B.DEPT_TITLE 부서명,
       C.LOCAL_NAME 지역명
  FROM employee A
 INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
 WHERE BONUS IS NOT NULL;

-- 6. 부서코드가 D2인 직원의 이름, 직급명, 부서명, 지역명을 조회하세오.
SELECT EMP_NAME,
	   B.JOB_NAME,
       C.DEPT_TITLE,
       E.NATIONAL_NAME
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  RIGHT JOIN location D ON C.LOCATION_ID = D.LOCAL_CODE
  /*이러면 location 테이블이 중심이 되겠지. local_code가 더 중심 요소(??)이므로 RIGHT JOIN 해봄.
    만약 department 테이블에 이상한 location_id 들어오면 location 중심으로 join했으니 해당 LOCATION_ID 값은
    무시되고 출력 안 되지 않을까? */
  JOIN nation E USING(NATIONAL_CODE)
  WHERE DEPT_CODE = 'D2';

-- 7. 한국(KO)과 일본(JP)에 근무하는 직원의 이름, 부서명, 지역명, 국가명을 조회하세요..
SELECT EMP_NAME,
	   B.DEPT_TITLE,
       C.LOCAL_NAME,
       D.NATIONAL_NAME
  FROM employee A
  INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
  INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
  JOIN nation D USING(NATIONAL_CODE)
  WHERE NATIONAL_CODE = 'KO'
     OR NATIONAL_CODE = 'JP'
 ORDER BY LOCAL_NAME;

# 완성코드 두 번째 Solved Code : Second
-- JOIN을 이용하여 여러 테이블을 조회 시에는 모든 컬럼에 테이블 별칭을 사용하는 것이 좋다.
-- 1. 직급이 대리이면서 아시아 지역에 근무하는 직원의 사번, 이름, 직급명, 부서명, 지역명, 급여를 조회하세요
SELECT EMP_ID,
	     EMP_NAME,
       B.JOB_NAME,
       C.DEPT_TITLE,
       D.LOCAL_NAME,
       /* C.NATIONAL_CODE, 
       근데 조건에 '아시아 지역에 근무하는'이라면 아시아 어느지역에 근무하는지 구분해주는게 데이터 구분에 더 낫지 않을까?(개인생각)*/
       SALARY
  FROM employee A
  INNER JOIN JOB B USING(JOB_CODE)
  INNER JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  INNER JOIN location D ON C.LOCATION_ID = D.LOCAL_CODE
  WHERE JOB_CODE='J6' AND D.LOCAL_NAME LIKE 'ASIA%';
  
-- 2. 주민번호가 70년대 생이면서 성별이 여자이고, 성이 전씨인 직원의 이름, 주민등록번호, 부서명, 직급명을 조회하세요.
SELECT EMP_NAME,
	     EMP_NO,
       B.DEPT_TITLE,
       C.JOB_NAME
FROM employee A
INNER JOIN job C USING(JOB_CODE)
INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 WHERE EMP_NO LIKE '7%'
     AND (EMP_NO LIKE '%-2%'
      OR EMP_NO LIKE '%-4%');
/*문자열 찾아서 반환해야할 때는 LIKE도 쓸 수 있단 것 잊지 말 것!
  WHERE EMP_NO = '7%'부터 안 됐음.
  EMP_NO LIKE '7%'로 바꿈 >> 됨
  그 아래 것들도 다 EMP_NO LIKE '%-2%' 이런 형태로 바꿔줌*/

-- 3. 이름에 '형'자가 들어가는 직원의 사번, 이름, 직급명을 조회하세요.
SELECT EMP_ID,
	     EMP_NAME,
       B.JOB_NAME
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 4. 해외영업팀에 근무하는 직원의 이름, 직급명, 부서코드, 부서명을 조회하세요.
SELECT EMP_NAME,
	     B.JOB_NAME,
       DEPT_CODE,
       C.DEPT_TITLE
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  WHERE C.DEPT_TITLE LIKE '해외영업%'; 

-- 5. 보너스포인트를 받는 직원의 이름, 보너스, 부서명, 지역명(KO? / LOCAL_NAME : ASIA1?)을 조회하세요.
SELECT EMP_NAME,
	     FLOOR(BONUS * SALARY),
       /*BONUS * SALARY하니까 소수점 10번째 자리까지 나옴. 안 깔끔함. 인터넷에서 'SQL 소수점 버리기' 검색해서 FLOOR함수 찾아냄*/
       B.DEPT_TITLE,
       C.LOCAL_NAME
  FROM employee A
 INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
 WHERE BONUS IS NOT NULL;

-- 6. 부서코드가 D2인 직원의 이름, 직급명, 부서명, 지역명을 조회하세오.
SELECT EMP_NAME,
	     B.JOB_NAME,
       C.DEPT_TITLE,
       D.NATIONAL_CODE
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  RIGHT JOIN location D ON C.LOCATION_ID = D.LOCAL_CODE
  /*이러면 location 테이블이 중심이 되겠지. local_code가 더 중심 요소(??)이므로 RIGHT JOIN 해봄.
    만약 department 테이블에 이상한 location_id 들어오면 location 중심으로 join했으니 해당 LOCATION_ID 값은
    무시되고 출력 안 되지 않을까? */
  WHERE DEPT_CODE = 'D2';

-- 7. 한국(KO)과 일본(JP)에 근무하는 직원의 이름, 부서명, 지역명, 국가명을 조회하세요..
SELECT EMP_NAME,
	     B.DEPT_TITLE,
       C.LOCAL_NAME,
       C.NATIONAL_CODE
  FROM employee A
  INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
  INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
  WHERE NATIONAL_CODE = 'KO'
     OR NATIONAL_CODE = 'JP'
 ORDER BY LOCAL_NAME;


# 완성코드 첫번째 Solved Code : First
-- JOIN을 이용하여 여러 테이블을 조회 시에는 모든 컬럼에 테이블 별칭을 사용하는 것이 좋다.
-- 1. 직급이 대리이면서 아시아 지역에 근무하는 직원의 사번, 이름, 직급명, 부서명, 지역명, 급여를 조회하세요
SELECT EMP_ID,
  	   EMP_NAME,
       D.JOB_NAME,
       B.DEPT_TITLE,
       C.NATIONAL_CODE,
       SALARY
  FROM employee A
  INNER JOIN JOB D USING(JOB_CODE)
  INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
  INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
  WHERE JOB_CODE='J6' AND C.LOCAL_NAME LIKE 'ASIA%';
  
-- 2. 주민번호가 70년대 생이면서 성별이 여자이고, 성이 전씨인 직원의 이름, 주민등록번호, 부서명, 직급명을 조회하세요.
SELECT EMP_NAME,
  	   EMP_NO,
       B.DEPT_TITLE,
       C.JOB_NAME
FROM employee A
INNER JOIN job C USING(JOB_CODE)
INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 WHERE EMP_NO LIKE '7%'
     AND (EMP_NO LIKE '%-2%'
      OR EMP_NO LIKE '%-4%');
/*문자열 찾아서 반환해야할 때는 LIKE도 쓸 수 있단 것 잊지 말 것!
  WHERE EMP_NO = '7%'부터 안 됐음.
  EMP_NO LIKE '7%'로 바꿈 >> 됨
  그 아래 것들도 다 EMP_NO LIKE '%-2%' 이런 형태로 바꿔줌*/

-- 3. 이름에 '형'자가 들어가는 직원의 사번, 이름, 직급명을 조회하세요.
SELECT EMP_ID,
	     EMP_NAME,
       B.JOB_NAME
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 4. 해외영업팀에 근무하는 직원의 이름, 직급명, 부서코드, 부서명을 조회하세요.
SELECT EMP_NAME,
	     B.JOB_NAME,
       DEPT_CODE,
       C.DEPT_TITLE
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  WHERE C.DEPT_TITLE LIKE '해외영업%'; 

-- 5. 보너스포인트를 받는 직원의 이름, 보너스, 부서명, 지역명(KO? / LOCAL_NAME : ASIA1?)을 조회하세요.
SELECT EMP_NAME,
	     FLOOR(BONUS * SALARY),
       /*BONUS * SALARY하니까 소수점 10번째 자리까지 나옴. 안 깔끔함. 인터넷에서 'SQL 소수점 버리기' 검색해서 FLOOR함수 찾아냄*/
       /*BONUS*/
       B.DEPT_TITLE,
       C.LOCAL_NAME
  FROM employee A
 INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
 INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
 WHERE BONUS IS NOT NULL;

-- 6. 부서코드가 D2인 직원의 이름, 직급명, 부서명, 지역명을 조회하세오.
SELECT EMP_NAME,
	     B.JOB_NAME,
       C.DEPT_TITLE,
       D.NATIONAL_CODE
  FROM employee A
  INNER JOIN job B USING(JOB_CODE)
  LEFT JOIN department C ON A.DEPT_CODE = C.DEPT_ID
  RIGHT JOIN location D ON C.LOCATION_ID = D.LOCAL_CODE
  /*이러면 location 테이블이 중심이 되겠지. local_code가 더 중심 요소(??)이므로 RIGHT JOIN 해봄.
    만약 department 테이블에 이상한 location_id 들어오면 location 중심으로 join했으니 해당 LOCATION_ID 값은
    무시되고 출력 안 되지 않을까*/
  WHERE DEPT_CODE = 'D2';

-- 7. 한국(KO)과 일본(JP)에 근무하는 직원의 이름, 부서명, 지역명, 국가명을 조회하세요..
SELECT EMP_NAME,
	     B.DEPT_TITLE,
       C.LOCAL_NAME,
       C.NATIONAL_CODE
  FROM employee A
  INNER JOIN department B ON A.DEPT_CODE = B.DEPT_ID
  INNER JOIN location C ON B.LOCATION_ID = C.LOCAL_CODE
  WHERE NATIONAL_CODE = 'KO'
     OR NATIONAL_CODE = 'JP'
 ORDER BY LOCAL_NAME;



# 프로그래머스 입문 문제 Day2 : 2문제 풀기 (JAVA)
# Programmers Entry-level training Day2 : Solve 2 practices
# Q : 정수 num1과 num2가 매개변수로 주어질 때, num1을 num2로 나눈 값에 1,000을 곱한 후 정수 부분을 return 하도록 solution 함수를 완성해주세요
# Q : Complete the method Solution. This method has int num1 and num2 as parameter. After dividing num1 with num2, multiple 1000 and return as int.
class Solution {
    public double solution(double num1, double num2) {
        double answer = (num1/num2) * 1000;
        return (int) answer;
    }
}


# Q : 정수 num1과 num2가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.
# Q : Complete the method solution. It has two parameter : int num1, num2. If two numbers are same, return 1. If not, return -1. 
class Solution {
    public int solution(int num1, int num2) {
        int answer = 0;
        if(num1 == num2) {
            answer = 1;
        } else {
            answer = -1;
        }
        return answer;
    }
}

# 코드리뷰 후 수정한 코드
# Re-edit the code after code-review
class Solution {
   public int solution(int num1, int num2) {
       int answer = (num1 == num2)? 1: -1;
       return answer;
  }
}

# 개인적으로 따로 day1 문제를 풀었다.
# Indiviually, solved the day 1 problems
# DAY1 : 두 수의 합 구하기 Calculating two numbers sum
 public int solution(int num1, int num2) {
     int answer = num1 + num2;
     return answer;
 }

# 두 수의 차 구하기 Subtract two numbers
 public int solution(int num1, int num2) {
    int answer = num1 - num2;
    return answer;
 }

# 두 수의 곱 구하기 Multiply two numbers
public int solution(int num1, int num2) {
        int answer = num1 * num2;
        return answer;
    }

# 두 수의 몫 구하기 Divide two numbers
public int solution(int num1, int num2) {
        int answer = num1 / num2;
        return answer;
    }


# 프로그래머스 기초 트레이닝 Day3 : 1문제 풀기 (JAVA)
# Programmers Basic coding training Day3 : Solve 1 practices
# Q : 문자열 곱하기 Multiple string k times
public String solution(String my_string, int k) {
        String answer = my_string.repeat(k);
        return answer;
    }


# 팀 리더 업무일지
# Daily (work) log (as a team-leader)
https://pine-fibula-aee.notion.site/250519-1-_-1-1f8fc892a16f80bbb820c1e9c6ae7cff
