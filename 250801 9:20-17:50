https://www.notion.so/Using-streamlit-audio-recorder-242fc892a16f803085ace8c857cc318f?source=copy_link
https://digitalbourgeois.tistory.com/133

https://pine-fibula-aee.notion.site/Daily-Log-1e0fc892a16f800ba3f9c9ea860e777f?p=242fc892a16f808c96dfdcb255c72846&pm=s

app.py
import streamlit as st
from audiorecorder import audiorecorder
import openai_api

def main():
    st.set_page_config(
        page_title='Voice Chatbot',
        page_icon='🍑',
        layout='wide'
    )
    st.header('Voice Chatbot')
    st.markdown('---')

    with st.expander('Voice Chatbot 프로그램을 사용하는 방법', expanded=False):
        st.write(
            """
            1. 녹음하기 버튼을 눌러 질문을 녹음합니다.
            2. 녹음이 완료되면 자동으로 Whisper 모델을 이용해 음성을 텍스트로 변환후 LLM에 질의합니다.
            3. LLM이 응답을 다시 TTS모델을 사용해 음성으로 변환하고 이를 사용자에게 응답합니다.
            4. LLM은 OpenAI사의 GPT모델을 사용합니다.
            5. 모든 질문/답변은 텍스트로도 제공합니다.
            """
    ) 
  
    system_instruction = '당신은 친절한 챗봇입니다.'

    # session state 초기화
    # - chats: 웹페이지 시각화용 대화내역
    # - messages : LLM 질문에 대한 질의응담 / 웹페이지 시각화를 위한 대화내역
    # - check_reset: 사이드바 초기화 버튼 활성화용

    if 'messages' not in st.session_state:
        st.session_state['messages'] = [
        # API response 받아올 때 messages라는 배열에 받아왔던 걸 session state에 초기화
              {'role': 'system', 'content': system_instruction}
        ]

    if 'check_reset' not in st.session_state:
        st.session_state['check_reset'] = False

    with st.sidebar:
        model = st.radio(label='GPT 모델', options=['gpt-3.5-turbo', 'gpt-4-turbo', 'gpt-4o'], index=2)
        print(model)
   
        if st.button(label='초기화'):
            st.session_state['messages']=[
                {'role': 'system', 'content': system_instruction}
            ]
            st.session_state['check_reset'] = True

    col1, col2 = st.columns(2) # 화면을 두 개의 열로 나눕니다.
    with col1:
        st.subheader('녹음하기')

        #audiorecorder 활용
        audio = audiorecorder()

        if (audio.duration_seconds > 0) and (st.session_state['check_reset'] ==  False):
            #화면 상의 재생기능
            st.audio(audio.export().read())
            query = openai_api.stt(audio)
            print('Q', query)

    with col2:
        st.subheader('질문/답변') 

if __name__ == '__main__':
    main() 


session_state.py
# 20250801 9:30
import streamlit as st

st.title("Session State")

st.subheader('전역변수 Count')

count = 0

# streamlit에서 버튼 만드는 법 : .button('버튼에 들어갈 내용')
# st.button('Increment - 전역변수 Count')

# 버튼을 눌렀을 때, count가 1씩 증가되도록 하고 싶으니 if문 사용
if st.button('Increment - 전역변수 Count'):
    count += 1

st.write(f'전역변수 Count: {count}')

# -------------------------------------------------- #
st.subheader("st.session_state Count")

# session_state 초기화
if 'count' not in st.session_state:
    st.session_state['count'] = 0

if st.button('Increment - st.session_state Count'):
    st.session_state['count'] += 1

st.write(f'전역변수 Count: {st.session_state['count']}')


openai_api.py
# 여기에서 함수를 정의해놓고 import해서 사용할 것임
from dotenv import load_dotenv
from openai import OpenAI
import os

load_dotenv()

client = OpenAI()

def stt(audio):
    filename = 'temp.mp3' # 오디오 데이터를 저장할 임시 파일명
    audio.export(filename, format='mp3')

    with open(filename, 'rb') as f:
        transcriptions = client.audio.transcriptions.create(
            model="whisper-1",
            file=f
        )
    # 임시파일의 역할은 다 했으니 활용한 임시파일은 삭제한다
    os.remove(filename)  #임시파일 삭제
    return transcriptions.text

# 녹음본 인식 결과:
# Q 초코파이 맛있어

# app.py 코드 추가
import streamlit as st
from audiorecorder import audiorecorder
import openai_api

def main():
    st.set_page_config(
        page_title='Voice Chatbot',
        page_icon='🍑',
        layout='wide'
    )
    st.header('Voice Chatbot')
    st.markdown('---')

    with st.expander('Voice Chatbot 프로그램을 사용하는 방법', expanded=False):
        st.write(
            """
            1. 녹음하기 버튼을 눌러 질문을 녹음합니다.
            2. 녹음이 완료되면 자동으로 Whisper 모델을 이용해 음성을 텍스트로 변환후 LLM에 질의합니다.
            3. LLM이 응답을 다시 TTS모델을 사용해 음성으로 변환하고 이를 사용자에게 응답합니다.
            4. LLM은 OpenAI사의 GPT모델을 사용합니다.
            5. 모든 질문/답변은 텍스트로도 제공합니다.
            """
    ) 
  
    system_instruction = '당신은 친절한 챗봇입니다.'

    # session state 초기화
    # - chats: 웹페이지 시각화용 대화내역
    # - messages : LLM 질문에 대한 질의응담 / 웹페이지 시각화를 위한 대화내역
    # - check_reset: 사이드바 초기화 버튼 활성화용

    if 'messages' not in st.session_state:
        st.session_state['messages'] = [
        # API response 받아올 때 messages라는 배열에 받아왔던 걸 session state에 초기화
              {'role': 'system', 'content': system_instruction}
        ]

    if 'check_reset' not in st.session_state:
        st.session_state['check_reset'] = False

    with st.sidebar:
        model = st.radio(label='GPT 모델', options=['gpt-3.5-turbo', 'gpt-4-turbo', 'gpt-4o'], index=2)
        print(model)
   
        if st.button(label='초기화'):
            st.session_state['messages']=[
                {'role': 'system', 'content': system_instruction}
            ]
            st.session_state['check_reset'] = True

    col1, col2 = st.columns(2) # 화면을 두 개의 열로 나눕니다.
    with col1:
        st.subheader('녹음하기')

        #audiorecorder 활용
        audio = audiorecorder()

        if (audio.duration_seconds > 0) and (st.session_state['check_reset'] ==  False):
            #화면 상의 재생기능
            st.audio(audio.export().read())
            query = openai_api.stt(audio)
            print('Q', query)

            # 녹음한 기록(대화기록)을 남길 수 있도록
            # 변환된 텍스트를 사용자의 메세지로 session_state에 추가해서
            #대화기록을 남긴다
            st.session_state['messages'].append({'role':'user', 'content': query})
            response = openai_api.ask_gpt(st.session_state['messages'], model)
            print('A: ', response)

    with col2:
        st.subheader('질문/답변') 

if __name__ == '__main__':
    main()

# 녹음한 질문:
# Q 삼성전자 추가가 더 오를까? (삼성전자 주가가 더 오를까?)
# A:  삼성전자의 주가가 앞으로 어떻게 변할지는 여러 가지 요인에 따라 결정됩니다. 이에 영향을 미치는 주요 요인들에는 글로벌 경제 상황, 반도체 산업의 동향, 삼성전자의 실적, 그리고 시장의 기대 등이 있습니다.
# 주식 시장은 불확실성이 높은 곳이므로, 정확한 예측은 어렵습니다. 투자를 고려하신다면 전문가의 조언을 듣고, 다양한 자료를 참고하여 신중하게 결정하시기를 권장합니다.
