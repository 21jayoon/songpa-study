# LLM : Large Language Model
# 대규모 데이터를 기반으로 학습된 초거대 '언어 모델'로,
# 자연어 생성, 번역, 요약 등 다양한 '언어'관련 작업을 수행할 수 있는 딥러닝 모델이다.

# 가장 근본적인 작업은 "다음에 올 단어 예측하기"

# 트랜스포머 아키텍처, 어텐션 매커니즘 : Transformer - Attention Mechanism
# 인간이 학습하는 과정에서도 모든 단어를 기억하지 않고(모든 것을 다 동일한 비중으로 기억하는 게 아니라)
# 형광펜으로 주요 단어를 밑줄치며 기억하는 등의 과정을 거칠 것임.
# Attention Mechanism은 그런 형광펜의 역할을 하는 매커니즘임. (파라미터가 너무 많기 때문에 점수를 부여해서 주요 단어 예측)

# 환각 Hallucination : 사실이 아닌 정보를 생성하는 것 - 학습 데이터의 불완전성, 과도한 일반화로 인해 발생
# -> 2차 검증이 필요하다

# 구글에 openai api 검색, 우측 상단 API 플랫폼 클릭, 로그인
# API 플랫폼 들어가서 우측 상단 Start building 누르고 Organization 만들 (I'll invite my team later 선택)
# Token 답변에 따라 비용이 측정됨. -> Max tokens를 적당히 작게 잡아야 비용이 덜 나감
# System message에 페르소나(e.g. '당신은 모든 답변을 해적처럼 말하는 유쾌한 AI 선장입니다.')
# User message에는 (아마도) User의 페르소나 설정 가능
# ChatGPT의 temperature(창의성?)은 0부터 2까지임. : 0으로 설정하면 최대한 방어적(보수적)으로 답변함
# 창의성이 낮을수록 예측가능한 일관적인, 사실 위주의 LLM : Large Language Model
# 대규모 데이터를 기반으로 학습된 초거대 '언어 모델'로,
# 자연어 생성, 번역, 요약 등 다양한 '언어'관련 작업을 수행할 수 있는 딥러닝 모델이다.

# 가장 근본적인 작업은 "다음에 올 단어 예측하기"

# 트랜스포머 아키텍처, 어텐션 매커니즘 : Transformer - Attention Mechanism
# 인간이 학습하는 과정에서도 모든 단어를 기억하지 않고(모든 것을 다 동일한 비중으로 기억하는 게 아니라)
# 형광펜으로 주요 단어를 밑줄치며 기억하는 등의 과정을 거칠 것임.
# Attention Mechanism은 그런 형광펜의 역할을 하는 매커니즘임. (파라미터가 너무 많기 때문에 점수를 부여해서 주요 단어 예측)

# 환각 Hallucination : 사실이 아닌 정보를 생성하는 것 - 학습 데이터의 불완전성, 과도한 일반화로 인해 발생
# -> 2차 검증이 필요하다

# 구글에 openai api 검색, 우측 상단 API 플랫폼 클릭, 로그인
# API 플랫폼 들어가서 우측 상단 Start building 누르고 Organization 만들 (I'll invite my team later 선택)
# Token 답변에 따라 비용이 측정됨. -> Max tokens를 적당히 작게 잡아야 비용이 덜 나감
# System message에 페르소나(e.g. '당신은 모든 답변을 해적처럼 말하는 유쾌한 AI 선장입니다.')
# User message에는 (아마도) User의 페르소나 설정 가능
# ChatGPT의 temperature(창의성?)은 0부터 2까지임. : 0으로 설정하면 최대한 방어적(보수적)으로 답변함
# 창의성이 낮을수록 예측가능한 일관적인, 사실 위주의 답변을 한다

# 지시사항을 구체적으로 할 수록 질 높은 결과를 얻게 된다.


1. VS code 확장 프로그램에서 'jupyter' 다운
2. .ipynb 파일 생성
3. 환경 설정 들어간 코드 run > ipykernel 설치하라고 나옴. 설치
4. %pip install openai run하면 커넬 선택(select kernel)하라고 나옴. > 미리 만들어뒀던 pythonstudy_env 환경 선택
5. .env 파일, .gitignore 파일 생성

16_LLM/02_prompt_engineering.ipynb
# Prompting Engineering w/ chatgpt
환경설정

%pip install openai

# OPENAI_API_KEY설정
import os
from dotenv import load_dotenv

load_dotenv() # 현재 경로의 .env 파일을 읽어 시스템 환경변수로 등록

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

#Chat Completion

from openai import OpenAI

#client-server 하나 설정
client = OpenAI(api_key=OPENAI_API_KEY)
# 나의 openai api키를 갖고 있는 클라이언트가 생성되었다.

response = client.chat.completions.create(
    model="gpt-4.1",
    messages=[
        {
            "role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "content": [
                        {
                            "type": "text",
                            "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                        }
                    ]
                }
            ]
        }
    ],
    response_format={
        'type': "text"
    },
    temperature=1.0, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
    max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
    top_p=1, # 사용할 상위누적확률
    frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
    presence_penalty=0 # 토큰 재사용에 대한 패널티
)

print(response.choices[0].message.content)

# 🚨에러!!
# 안녕하세요! 무엇을 도와드릴까요? 😊
# 라고만 뜸

# 원인 분석1. 코드가 잘못 됐나??
# -> 코드 비교
"role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
이 구조와 다르게
 "role": "user",
            "content": [
                {
                    "type": "text",
                    "content": [
                        {
                            "type": "text",
                            "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                        }
                    ]
                }
            ]
여기에서 두 번째 content 값이 중복 되는 거 같음.
"content": [
             {
               "type": "text",
               "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
             }
]
삭제하고 text 값만 "type" 아래에 넣음

# 수정 후
response = client.chat.completions.create(
    model="gpt-4.1",
    messages=[
        {
            "role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                }
            ]
        }
    ],
    response_format={
        'type': "text"
    },
    temperature=1.0, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
    max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
    top_p=1, # 사용할 상위누적확률
    frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
    presence_penalty=0 # 토큰 재사용에 대한 패널티
)

print(response.choices[0].message.content)

# 저장 후 CTRL+ALT+ENTER로 실행
# 결과:
더운 날에는 시원하고 가볍게 먹을 수 있는 음식이 좋겠죠! 이런 메뉴를 추천드려요:

1. **냉면** – 시원한 육수에 쫄깃한 면발이 더위를 싹 가셔줄 거예요.
2. **콩국수** – 고소하면서도 시원해서 부담 없이 즐길 수 있어요.
3. **비빔국수** – 매콤새콤하게 비벼 먹으면 입맛도 돌아와요.
4. **회덮밥** – 신선한 야채와 해산물이 들어가 깔끔하고 시원하게 즐길 수 있습니다.
5. **샐러드와 샌드위치** – 가볍고 소화도 잘돼서 좋답니다.

음료로는 아이스커피, 시원한 식혜, 얼음 동동 띄운 오미자차도 추천드려요!  
오늘 점심 맛있게 드시고, 더위도 잘 이겨내시길 바랄게요😊
