# LLM : Large Language Model
# 대규모 데이터를 기반으로 학습된 초거대 '언어 모델'로,
# 자연어 생성, 번역, 요약 등 다양한 '언어'관련 작업을 수행할 수 있는 딥러닝 모델이다.

# 가장 근본적인 작업은 "다음에 올 단어 예측하기"

# 트랜스포머 아키텍처, 어텐션 매커니즘 : Transformer - Attention Mechanism
# 인간이 학습하는 과정에서도 모든 단어를 기억하지 않고(모든 것을 다 동일한 비중으로 기억하는 게 아니라)
# 형광펜으로 주요 단어를 밑줄치며 기억하는 등의 과정을 거칠 것임.
# Attention Mechanism은 그런 형광펜의 역할을 하는 매커니즘임. (파라미터가 너무 많기 때문에 점수를 부여해서 주요 단어 예측)

# 환각 Hallucination : 사실이 아닌 정보를 생성하는 것 - 학습 데이터의 불완전성, 과도한 일반화로 인해 발생
# -> 2차 검증이 필요하다

# 구글에 openai api 검색, 우측 상단 API 플랫폼 클릭, 로그인
# API 플랫폼 들어가서 우측 상단 Start building 누르고 Organization 만들 (I'll invite my team later 선택)
# Token 답변에 따라 비용이 측정됨. -> Max tokens를 적당히 작게 잡아야 비용이 덜 나감
# System message에 페르소나(e.g. '당신은 모든 답변을 해적처럼 말하는 유쾌한 AI 선장입니다.')
# User message에는 (아마도) User의 페르소나 설정 가능
# ChatGPT의 temperature(창의성?)은 0부터 2까지임. : 0으로 설정하면 최대한 방어적(보수적)으로 답변함
# 창의성이 낮을수록 예측가능한 일관적인, 사실 위주의 LLM : Large Language Model
# 대규모 데이터를 기반으로 학습된 초거대 '언어 모델'로,
# 자연어 생성, 번역, 요약 등 다양한 '언어'관련 작업을 수행할 수 있는 딥러닝 모델이다.

# 가장 근본적인 작업은 "다음에 올 단어 예측하기"

# 트랜스포머 아키텍처, 어텐션 매커니즘 : Transformer - Attention Mechanism
# 인간이 학습하는 과정에서도 모든 단어를 기억하지 않고(모든 것을 다 동일한 비중으로 기억하는 게 아니라)
# 형광펜으로 주요 단어를 밑줄치며 기억하는 등의 과정을 거칠 것임.
# Attention Mechanism은 그런 형광펜의 역할을 하는 매커니즘임. (파라미터가 너무 많기 때문에 점수를 부여해서 주요 단어 예측)

# 환각 Hallucination : 사실이 아닌 정보를 생성하는 것 - 학습 데이터의 불완전성, 과도한 일반화로 인해 발생
# -> 2차 검증이 필요하다

# 구글에 openai api 검색, 우측 상단 API 플랫폼 클릭, 로그인
# API 플랫폼 들어가서 우측 상단 Start building 누르고 Organization 만들 (I'll invite my team later 선택)
# Token 답변에 따라 비용이 측정됨. -> Max tokens를 적당히 작게 잡아야 비용이 덜 나감
# System message에 페르소나(e.g. '당신은 모든 답변을 해적처럼 말하는 유쾌한 AI 선장입니다.')
# User message에는 (아마도) User의 페르소나 설정 가능
# ChatGPT의 temperature(창의성?)은 0부터 2까지임. : 0으로 설정하면 최대한 방어적(보수적)으로 답변함
# 창의성이 낮을수록 예측가능한 일관적인, 사실 위주의 답변을 한다

# 지시사항을 구체적으로 할 수록 질 높은 결과를 얻게 된다.


1. VS code 확장 프로그램에서 'jupyter' 다운
2. .ipynb 파일 생성
3. 환경 설정 들어간 코드 run > ipykernel 설치하라고 나옴. 설치
4. %pip install openai run하면 커넬 선택(select kernel)하라고 나옴. > 미리 만들어뒀던 pythonstudy_env 환경 선택
5. .env 파일, .gitignore 파일 생성

16_LLM/02_prompt_engineering.ipynb
# Prompting Engineering w/ chatgpt
환경설정

%pip install openai

# OPENAI_API_KEY설정
import os
from dotenv import load_dotenv

load_dotenv() # 현재 경로의 .env 파일을 읽어 시스템 환경변수로 등록

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

#Chat Completion

from openai import OpenAI

#client-server 하나 설정
client = OpenAI(api_key=OPENAI_API_KEY)
# 나의 openai api키를 갖고 있는 클라이언트가 생성되었다.

response = client.chat.completions.create(
    model="gpt-4.1",
    messages=[
        {
            "role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "content": [
                        {
                            "type": "text",
                            "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                        }
                    ]
                }
            ]
        }
    ],
    response_format={
        'type': "text"
    },
    temperature=1.0, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
    max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
    top_p=1, # 사용할 상위누적확률
    frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
    presence_penalty=0 # 토큰 재사용에 대한 패널티
)

print(response.choices[0].message.content)

# 🚨에러!!
# 안녕하세요! 무엇을 도와드릴까요? 😊
# 라고만 뜸

# 원인 분석1. 코드가 잘못 됐나??
# -> 코드 비교
"role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
이 구조와 다르게
 "role": "user",
            "content": [
                {
                    "type": "text",
                    "content": [
                        {
                            "type": "text",
                            "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                        }
                    ]
                }
            ]
여기에서 두 번째 content 값이 중복 되는 거 같음.
"content": [
             {
               "type": "text",
               "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
             }
]
삭제하고 text 값만 "type" 아래에 넣음

# 수정 후
response = client.chat.completions.create(
    model="gpt-4.1",
    messages=[
        {
            "role": "system", 
            "content": [
                {
                    # 타입과 텍스트(역할)를 다 전달해야함
                    "type": "text",
                    "text": "당신은 자상하고 친절한 챗봇입니다."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "더운 날 점심으로 뭘 먹으면 좋을까요?"
                }
            ]
        }
    ],
    response_format={
        'type': "text"
    },
    temperature=1.0, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
    max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
    top_p=1, # 사용할 상위누적확률
    frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
    presence_penalty=0 # 토큰 재사용에 대한 패널티
)

print(response.choices[0].message.content)

# 저장 후 CTRL+ALT+ENTER로 실행
# 결과: -----------
더운 날에는 시원하고 가볍게 먹을 수 있는 음식이 좋겠죠! 이런 메뉴를 추천드려요:

1. **냉면** – 시원한 육수에 쫄깃한 면발이 더위를 싹 가셔줄 거예요.
2. **콩국수** – 고소하면서도 시원해서 부담 없이 즐길 수 있어요.
3. **비빔국수** – 매콤새콤하게 비벼 먹으면 입맛도 돌아와요.
4. **회덮밥** – 신선한 야채와 해산물이 들어가 깔끔하고 시원하게 즐길 수 있습니다.
5. **샐러드와 샌드위치** – 가볍고 소화도 잘돼서 좋답니다.

음료로는 아이스커피, 시원한 식혜, 얼음 동동 띄운 오미자차도 추천드려요!  
오늘 점심 맛있게 드시고, 더위도 잘 이겨내시길 바랄게요😊
# -----------


# 패턴 1: 페르소나 & Few-Shot(기사 제목 교정)
## 기자들이 송고한 제목에서 맞춤법, 의미, 어조 등의 교정작업을 수행한다.
## (프랑스 AFP시스템에서 최초 적용)

from openai import OpenAI

# 이번에는 함수형태로 변경해 재사용성을 높인다.
def correct_title (query, temperature=0.3):
    # 1. client 설정
    client=OpenAI(api_key=OPENAI_API_KEY)

    #2. system prompt를 변수에 할당
    #(들어가는 내용: 페르소나, 지켜야 할 규칙, Few-Shot예시)
    # 샵 3개는 굳이 안 넣어도 되지만 각 prompt의 구분을 위해 넣어주었다.
    system_instruction = """
    기자들이 송고한 제목, 즉 현재의 기사 제목을 교정해줘.
    
    ### 지시사항 ###
    - 기사의 제목이 명확하고 주제와 잘 맞도록 수정해주세요.
    - 독자의 관심을 끌 수 있도록 간결하고 임팩트있는 표현을 사용해주세요.
    - 비속어, 은어 등은 제거하고, 의미가 유지되도록 제목을 교정해주세요.

    ### 출력 형식 ###
    - 원래 제목: [기사의 원래 제목]
    - 교정한 제목: [기사의 교정된 제목]

    ### 예시 ###
    - 원래 제목: "어제 태국에서 총격 사건이 일어나서 시장에 있던 수많은 사람들이 대피했다."
    - 교정한 제목: "태국 시장 총격 사건, 수십명 대피"

    """

    user_msg = f"""
    다음 제목을 교정해주세요.
    제목: {query}
    """

    #def correct_title 안에 response가 들어갈 수 있도록 들여쓰기 한 칸 더 넣음
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[ 
            #대화의 히스토리를 리스트 형태로 전달. 각 요소는 role과 content를 가진 딕셔너리이다.
            {
                "role": "system", # 시스템의 전반적인 지시사항 전달. 대화의 가장 처음에 위치해 모델의 행동 기준을 설정함
                "content": [
                    {
                        # 타입과 텍스트(역할)를 다 전달해야함
                        "type": "text",
                        "text": system_instruction
                    }
                ]
            },
            {
                "role": "user",  # 사용자의 실제 요청 전달
                "content": [
                    {
                        "type": "text",
                        "text": user_msg
                    }
                ]
            }
        ],
        response_format={
            'type': "text"
        },
        temperature=temperature, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
        max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
        top_p=1, # 사용할 상위누적확률
        frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
        presence_penalty=0 # 토큰 재사용에 대한 패널티
    )
    return response.choices[0].message.content

print(correct_title('이은지의 FM 개꿀 라디오 방송에 주목해주세요~!'))
print(correct_title('미친 물난리로 졸라 고생하는 한국 공무원들에게 보상이 이뤄져야한다.')) # 교정이 제대로 되는지 확인 위해 일부러 비속어와 은어를 넣음.

# 결과: ----------
- 원래 제목: 이은지의 FM 개꿀 라디오 방송에 주목해주세요~!
- 교정한 제목: 이은지의 FM 라디오, 청취자 관심 집중
- 원래 제목: 미친 물난리로 졸라 고생하는 한국 공무원들에게 보상이 이뤄져야한다.
- 교정한 제목: 폭우 피해 대응한 한국 공무원, 합당한 보상 필요
# ----------------


# 다음과 같이 system instuction을 바꾸면 또 다른 답변이 출력된다.
system_instruction = """
    기자들이 송고한 제목, 즉 현재의 기사 제목을 교정해줘.
    
    ### 지시사항 ###
    - 기사의 제목이 명확하고 주제와 잘 맞도록 수정해주세요.
    - 독자의 관심을 끌 수 있도록 간결하고 임팩트있는 표현을 사용해주세요.
    - 비속어, 은어 등은 제거하고, 의미가 유지되도록 제목을 교정해주세요.

    ### 출력 형식 ###
    - 원래 제목: [기사의 원래 제목]
    - 교정한 제목: 
        [기사의 교정된 제목1]
        [기사의 교정된 제목2]
        [기사의 교정된 제목3]

    ### 예시 ###
    - 원래 제목: "어제 태국에서 총격 사건이 일어나서 시장에 있던 수많은 사람들이 대피했다."
    - 교정한 제목: 
        "태국 시장 총격 사건, 수십명 대피"
        "태국 시장 총격 사건, 충격"
        "태국에서 충격적인 총격 사건 발생"

    """

# 결과: ----------
- 원래 제목: 이은지의 FM 개꿀 라디오 방송에 주목해주세요~!
- 교정한 제목: 
    "이은지의 FM 라디오, 청취자 관심 집중"
    "이은지, 새 FM 라디오 방송으로 주목"
    "이은지의 FM 라디오, 기대감 높아져"
- 원래 제목: 미친 물난리로 졸라 고생하는 한국 공무원들에게 보상이 이뤄져야한다.
- 교정한 제목: 
    "폭우 피해 대응한 한국 공무원, 정당한 보상 필요"
    "폭우 속 헌신한 공무원들, 보상 대책 마련 시급"
    "물난리 대응 공무원, 합당한 보상 이뤄져야"
# ---------------

from openai import OpenAI
import json

# 함수 선언형으로 재사용성 높인 코드 작성
def extract_eng_words(query, temperature=0.5):
    client = OpenAI(api_key=OPENAI_API_KEY)

    system_instruction="""
    당신은 영어팝송을 이용해 흥미롭고 이해하기 쉬운 방식으로 영어를 가르치는 선생님입니다.

    # 처리단계
    1. 주어진 팝송 가사에서 자주 사용되는 영어단어 3개를 무작위로 추출해줘.
    2. 각 단어의 품사와 의미를 한글로 알려줘.
    
    # 출력형식
    - 출력형식은 json 형식입니다.

    # 출력예시
    {
        "json_list": [
            {
                "빈출 단어 3가지" : "yesterday", "love", "you"               
            },
            {
                "단어" : "yesterday"
                "품사와 의미" : "명사 - 어제" 
            },
            {
                 "단어" : "love"
                "품사와 의미" : "명사 혹은 동사 - 사랑, 사랑하다" 
            },
            {
                 "단어" : "you"
                "품사와 의미" : "명사 - 너, 당신" 
            }
        ]
    }
    """

    user_msg = f"""
    노래 가사: {query}
    """

    #def correct_title 안에 response가 들어갈 수 있도록 들여쓰기 한 칸 더 넣음
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[ 
            #대화의 히스토리를 리스트 형태로 전달. 각 요소는 role과 content를 가진 딕셔너리이다.
            {
                "role": "system", # 시스템의 전반적인 지시사항 전달. 대화의 가장 처음에 위치해 모델의 행동 기준을 설정함
                "content": [
                    {
                        # 타입과 텍스트(역할)를 다 전달해야함
                        "type": "text",
                        "text": system_instruction
                    }
                ]
            },
            {
                "role": "user",  # 사용자의 실제 요청 전달
                "content": [
                    {
                        "type": "text",
                        "text": user_msg
                    }
                ]
            }
        ],
        response_format={
            #이번에는 text 형태로 받는 게 아니라 json 형태로 받기 때문에 "text"에서 수정 필요
            # 응답의 content는 반드시 JSON 객체 형식의 문자열이어야한다고 명시적으로 요구
            'type': "json_object"
        },
        temperature=temperature, # 대답 창의성에 관한 설정(기본값: 1), 0~2까지 설정 가능
        max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
        top_p=1, # 사용할 상위누적확률
        frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
        presence_penalty=0 # 토큰 재사용에 대한 패널티
    )
    return json.loads(response.choices[0].message.content) # 응답 json 문자열을 파이썬 객체로 변환

lyrics = """
No clouds in my stones
Let it rain, I hydroplane in the bank
Comin' down with the Dow Jones
When the clouds come, we go, we Roc-A-Fella 
We fly higher than weather, in G5's or better
You know me (You know me)
In anticipation for precipitation, stack chips for the rainy day
Jay, Rain Man is back
With Little Miss Sunshine, Rihanna, where you at?

You have my heart, and we'll never be worlds apart
May be in magazines but you'll still be my star
Baby, 'cause in the dark, you can't see shiny cars
And that's when you need me there
With you, I'll always share because

When the sun shine, we shine together
Told you I'll be here forever
Said "I'll always be your friend"
Took an oath, I'ma stick it out 'til the end
Now that it's rainin' more than ever
Know that we'll still have each other
You can stand under my umbrella
"""

print(extract_eng_words(lyrics))

# 결과: ----------
{'json_list': [{'빈출 단어 3가지': ['rain', 'shine', 'together']}, {'단어': 'rain', '품사와 의미': '명사 혹은 동사 - 비, 비가 오다'}, {'단어': 'shine', '품사와 의미': '동사 - 빛나다, 빛을 내다'}, {'단어': 'together', '품사와 의미': '부사 - 함께, 같이'}]}
# ---------------


# system_instruction 변경
# 함수 선언형으로 재사용성 높인 코드 작성
def extract_eng_words(query, temperature=0.5):
    client = OpenAI(api_key=OPENAI_API_KEY)

    system_instruction="""
    당신은 영어팝송을 이용해 흥미롭고 이해하기 쉬운 방식으로 영어를 가르치는 선생님입니다.

    # 처리단계
    1. 주어진 팝송 가사에서 자주 사용되는 영어단어 3개를 무작위로 추출해줘.
    2. 각 단어의 품사와 의미를 한글로 알려줘.
    3. 각 단어의 유의어도 단어 하나당 유의어 하나씩 알려줘.
    4. 유의어에 대한 예시문장은 유의어 하나 당 2개씩 작성해줘.
    
    # 출력형식
    - 출력형식은 json 형식입니다.

    # 출력예시
    {
        "json_list": [
            {
                "빈출 단어 3가지" : "yesterday", "love", "you"               
            },
            {
                "단어" : "yesterday"
                "품사와 의미" : "명사 - 어제" 
                "유의어": [
                    {
                        "유의어1": "last-night",
                        "예시문장": ["Last-night, Sarah was gone", "It was fun last night"]
                    }
                ]
            },
            {
                "단어" : "love"
                "품사와 의미" : "명사 혹은 동사 - 사랑, 사랑하다" 
                 "유의어": [
                    {
                        "유의어1": "adore",
                        "예시문장": ["Jane adores her daughter", "Since they loved each other, they named their son 'adore'"]
                    }
                ]
            },
            {
                "단어" : "you"
                "품사와 의미" : "명사 - 너, 당신" 
                 "유의어": [
                    {
                        "유의어1": "deer",
                        "예시문장": ["deer Mr.simple. Where have you been?", "my deer, my!"]
                    }
                ]
            }
        ]
    }
    """

# 결과: ----------
{'json_list': [{'빈출 단어 3가지': ['rain', 'shine', 'together']}, {'단어': 'rain', '품사와 의미': '명사, 동사 - 비, 비가 오다', '유의어': [{'유의어1': 'drizzle', '예시문장': ['It started to drizzle on our way home.', 'The drizzle made the streets wet and shiny.']}]}, {'단어': 'shine', '품사와 의미': '동사 - 빛나다, 빛을 내다', '유의어': [{'유의어1': 'glow', '예시문장': ['The stars glow brightly in the night sky.', 'Her face began to glow with happiness.']}]}, {'단어': 'together', '품사와 의미': '부사 - 함께, 같이', '유의어': [{'유의어1': 'jointly', '예시문장': ['They worked jointly on the project.', 'The two companies announced the plan jointly.']}]}]}
# ---------------


# 출력 형태 변경
result = extract_eng_words(lyrics)
words = result['json_list']

# words라는 리스트를 만들고 그걸 for문으로 돌리면서
# 영어 사전 형태로 각 요소를 출력
for word_dict in words:
    print(f'단어: {word_dict["단어"]}')
    print(f'의미: {word_dict["의미"]}')

    for sim_word_obj in word_dict['유의어']:
        print(f'유사어: {sim_word_obj['유의어1']}')

        for sentence in sim_word_obj['예시문장']:
            print(f'예제: {sentence}')

# 결과: ----------
KeyError                                  Traceback (most recent call last)
Cell In[18], line 134
    131 # words라는 리스트를 만들고 그걸 for문으로 돌리면서
    132 # 영어 사전 형태로 각 요소를 출력
    133 for word_dict in words:
--> 134     print(f'단어: {word_dict["단어"]}')
    135     print(f'의미: {word_dict["의미"]}')
    137     for sim_word_obj in word_dict['유의어']:

KeyError: '단어'
# ---------------
# 왜 이런 오류가?? 강의코드와 달리 내 system structure의 구조는 
{ 
    "빈출 단어 3가지" : "yesterday", "love", "you"               
},
가 상단에 있어서 구조를 파악 후, 다른 코드를 사용해야 했음.

# 1차 수정
for word_dict in words:
    print(f'빈출 3단어: {word_dict['빈출 단어 3가지']}')

    for word_meaning in word_dict.get('단어 목록', []):
        print(f'단어: {word_meaning["단어"]}')
        print(f'의미: {word_meaning["의미"]}')

        for sim_word_obj in word_meaning['유의어']:
            print(f'유사어: {sim_word_obj['유의어1']}')

            for sentence in sim_word_obj['예시문장']:
                print(f'예제: {sentence}')

# 결과: 
빈출 3단어: ['rain', 'shine', 'together']
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[24], line 134
    131 # words라는 리스트를 만들고 그걸 for문으로 돌리면서
    132 # 영어 사전 형태로 각 요소를 출력
    133 for word_dict in words:
--> 134     print(f'빈출 3단어: {word_dict['빈출 단어 3가지']}')
    136     for word_meaning in word_dict.get('단어 목록', []):
    137         print(f'단어: {word_meaning["단어"]}')

KeyError: '빈출 단어 3가지'
# ------

# Gemini에게 질문: https://g.co/gemini/share/6afe1a1adb88

# 수정
if words and "빈출 단어 3가지" in words[0]:
    frequent_words = words[0]['빈출 단어 3가지']
    if isinstance(frequent_words, list):
        print(f"빈출 3단어: {', '.join(frequent_words)}")
    else: # If it's a single string like "yesterday", "love", "you"
        print(f"빈출 3단어: {frequent_words}")

for word_entry in words[1:]: # Start from the second item in the list
    if "단어" in word_entry: # Check if it's a word entry
        print(f'단어: {word_entry["단어"]}')
        # Using .get() for safety
        print(f'의미: {word_entry.get("품사와 의미", "의미 없음")}')

        if "유의어" in word_entry and isinstance(word_entry["유의어"], list):
            for sim_word_obj in word_entry['유의어']:
                if "유의어1" in sim_word_obj:
                    print(f'유사어: {sim_word_obj['유의어1']}')

                if "예시문장" in sim_word_obj and isinstance(sim_word_obj["예시문장"], list):
                    for sentence in sim_word_obj['예시문장']:
                        print(f'예제: {sentence}')

# 결과: -----------
빈출 3단어: rain, shine, together
단어: rain
의미: 명사/동사 - 비, 비가 오다
유사어: drizzle
예제: It started to drizzle on our way home.
예제: I love walking outside when there's a light drizzle.
단어: shine
의미: 동사 - 빛나다, 빛을 내다
유사어: glow
예제: The stars glow brightly at night.
예제: Her face seemed to glow with happiness.
단어: together
의미: 부사 - 함께, 같이
유사어: jointly
예제: They worked jointly on the project.
예제: The decision was made jointly by both teams.
# -----------------



# 생각의 사슬 Chain-of-Thought (냉털 마스타 - ReAct)
# * Reason + Act 기법으로 현재 상황에 대한 통찰 이후, 다음 행동에 대한 작성을 유도하는 기법이다.

from openai import OpenAI
import json

def finish_my_refregator(query, temperature=1.0):
    client = OpenAI(api_key=OPENAI_API_KEY)

    system_instruction="""
    너는 냉장고에 남아있는 재료를 활용해 창의적이고, 실용적인 저녁 식사 아이디어를 제안하는 요리 전문가다.
    네 역할은 사용자로부터 제공받은 재료목록을 분석하고, 이를 활용할 수 있는 요리 아이디어를 구상해서,
    조리방법을 단계별로 상세히 설명하는 것이다. 이 때 요리의 이름은 실제로 있는 음식 이름을 출력합니다.
    (예시: 마라 닭고기 당면볶음 대신 닭고기 마라샹궈로 출력)
    만약 최종 요리에 필요없거나 쓸 데가 마땅치 않은 재료는 무시하고 가장 마지막에 '냉장고에 [남은 재료]가 아직 남아있습니다.'라고 출력합니다.

    # 출력 예시
    1. 상황 분석 Reason
    - 현재 냉장고에 있는 재료는 [사용자가 입력한 재료]입니다.
    - 주재료인 닭고기와 다양한 채소들이 있는 것으로 파악됩니다.
    - 이 재료들은 스튜, 볶음, 찜요리에 적합합니다.

    2. 행동 계획 Reason/plan
    - 가장 쉽게 만들 수 있는 요리로 닭고기 스튜를 제안합니다.
    - 각 요리에 필요한 재료와 조리도구를 확인합니다.
    - 부족한 재료가 있다면 대체 가능한 옵션을 제시합니다.
    - 조리 과정을 단계별로 상세히 설명합니다.
    - 맛을 더 향상시키기 위한 꿀팁과 주의사항 또한 제공합니다.

    3. 실행 Act
    - 여기에 상세레시피를 단계별로 작성합니다.
    """

    user_msg = f"""
    사용자의 냉장고에는 현재 {query}가 있습니다.
    """

    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[ 
            #대화의 히스토리를 리스트 형태로 전달. 각 요소는 role과 content를 가진 딕셔너리이다.
            {
                "role": "system", # 시스템의 전반적인 지시사항 전달. 대화의 가장 처음에 위치해 모델의 행동 기준을 설정함
                "content": [
                    {
                        # 타입과 텍스트(역할)를 다 전달해야함
                        "type": "text",
                        "text": system_instruction
                    }
                ]
            },
            {
                "role": "user",  # 사용자의 실제 요청 전달
                "content": [
                    {
                        "type": "text",
                        "text": user_msg
                    }
                ]
            }
        ],
        response_format={
            'type': "text"
        },
        temperature=1.0, # 대답 창의성에 관한 설정(기본값: 1)
        max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
        top_p=1, # 사용할 상위누적확률
        frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
        presence_penalty=0 # 토큰 재사용에 대한 패널티
    )
    return response.choices[0].message.content

print(finish_my_refregator("당근, 닭고기, 알배추, 당면, 마라소스, 낫또"))

# 결과: ----------
1. 상황 분석 Reason  
- 현재 냉장고에 있는 재료는 당근, 닭고기, 알배추, 당면, 마라소스, 낫또입니다.  
- 주재료인 닭고기와 함께 당근, 알배추 등 채소류, 그리고 당면이 있어 중국식 볶음 또는 전골류 요리에 적합합니다.  
- 마라소스가 있으므로 매콤하고 감칠맛 나는 ‘닭고기 마라샹궈’를 추천할 수 있습니다.  
- 낫또는 향과 조직상 다른 요리에 잘 어울리지 않으므로 이번 메뉴에서는 사용하지 않을 계획입니다.  

2. 행동 계획 Reason/plan  
- 쉽게 만들 수 있는 닭고기 마라샹궈를 제안합니다.  
- 필요한 재료: 닭고기, 당근, 알배추, 마라소스, 당면 (모두 냉장고에 있음)  
- 필요한 도구: 프라이팬(또는 웍), 냄비(당면용), 칼, 도마, 집게나 주걱  
- 조리 과정은 당면을 불리고, 야채와 닭고기를 먹기 좋은 크기로 손질한 후 볶아 마라샹궈를 완성합니다.  
- 만약 구운 땅콩, 대파, 마늘, 고수 등이 있다면 마지막에 곁들이면 좋지만 없어도 무방합니다.  
- 매운맛 조절은 마라소스 양으로 유연하게 하면 됩니다.  
- 꿀팁: 당면은 미리 삶아서 넣어야 끝에 양념이 잘 배고 불지 않습니다.  

3. 실행 Act  
[닭고기 마라샹궈] 레시피  

1) 재료 준비  
- 닭고기: 200g 정도(목살, 안심, 다리살 등 상관없음), 먹기 좋은 크기로 썰기  
- 당근: 반 개, 길게 채썰기  
- 알배추: 3~4잎, 한 입 크기로 썰기  
- 당면: 적당량(1인분 기준 한 줌), 미리 물에 20분간 불린 후 끓는 물에 4~5분간 삶고 찬물에 헹궈 준비  
- 마라소스: 기호에 맞게(2~3큰술), 짜거나 맵다면 조절  
* 소금, 후추, 식용유(없다면 아무 오일 가능) 준비  
...
- 닭고기 대신 돼지고기, 해산물 등도 응용 가능  
- 당면 대신 우동면, 넓적당면도 활용 가능  

냉장고에 낫또가 아직 남아있습니다.
Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings...
# --------------

# 역할극 & 실전 적용 (면접 질문 생성)
from openai import OpenAI
import json

def job_interview(job_posting, temperature=0.5):
    client = OpenAI(api_key=OPENAI_API_KEY)

    system_instruction = """
    당신은 풀스택 개발 분야의 10년차 전문가이면서, 해당 분야의 면접 전문가입니다.
    사용자가 제공한 구인공고에 근거해서 핵심적인 질문들로 지원자를 평가할 수 있어야합니다.
    """

    user_msg = f"""
    아래 채용공고의 직무에 대해 예상 면접질문과 모범답안을 작성해주세요.

    -- 가이드 --
    하드 스킬과 소프트스킬 2개의 섹션으로 나눠 작성해주세요.
    각 섹션별로 3개의 질문과 답변을 준비해주세요.

    -- 출력 형식 --
    # 1. 하드 스킬
    질문1)
    답변1)

    질문2)
    답변2)
    
    질문3)
    답변3)

    # 2. 소프트스킬
    질문1)
    답변1)

    질문2)
    답변2)
    
    질문3)
    답변3)
    """

    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[ 
            #대화의 히스토리를 리스트 형태로 전달. 각 요소는 role과 content를 가진 딕셔너리이다.
            {
                "role": "system", # 시스템의 전반적인 지시사항 전달. 대화의 가장 처음에 위치해 모델의 행동 기준을 설정함
                "content": [
                    {
                        # 타입과 텍스트(역할)를 다 전달해야함
                        "type": "text",
                        "text": system_instruction
                    }
                ]
            },
            {
                "role": "user",  # 사용자의 실제 요청 전달
                "content": [
                    {
                        "type": "text",
                        "text": user_msg
                    }
                ]
            }
        ],
        response_format={
            'type': "text"
        },
        temperature=temperature, # 대답 창의성에 관한 설정(기본값: 1)
        max_tokens=2048, # 응답에 사용될 토큰 수(응답 최대토큰수)
        top_p=1, # 사용할 상위누적확률
        frequency_penalty=0, # 토큰 사용 빈도수에 대한 패널티
        presence_penalty=0 # 토큰 재사용에 대한 패널티
    )
    return response.choices[0].message.content

job_posting = """
담당업무: 글로벌 모바일뱅킹 앱 백엔드 서버 레퍼런스 모델 개발 및 현지화
현지 금융사 및 파트너사와 협업을 통한 신규 은행 시스템 구축 및 운영

필수경험과 역량: Java(kotlin), Spring 기반의 웹 어플리케이션 개발 및 운영 경험 3년 이상인 분
Server, Network, DB 등 IT기술 전반에 대한 이해가 있는 분
개발 생산성 향상 및 운영 환경 개선에 적합한 오픈소스 솔루션 활용에 관심이 많은 분
영어로 진행하는 회의에 참여하는 데 지장이 없는 분
지속적인 기술 습득을 통한 개인 및 조직의 역량 강화에 관심이 많은 분

우대사항: 외국계 기업 또는 다국적 환경에서의 근무 경험이 있는 분
다양한 환경의 Cloud 기반 개발 및 운영 경험이 있는 분
동시 접속량이 많은 시스템 설계 및 개발 경험이 있는 분
성능 및 부하 테스트를 통한 서비스 개선 및 최적화 경험이 있는 분
금융 서비스 또는 핀테크 산업 경험이 있는 분
서비스를 안정적이고 효율적으로 제공하기 위한 시스템 구축 및 운영 경험이 있는 분
"""

print (job_interview(job_posting))

# 결과:---------
채용공고 전문이 누락되어 있어, 예시로 "React와 Node.js 기반의 풀스택 개발자" 채용공고를 기준으로 작성하겠습니다. 만약 특정 공고가 있다면, 전문을 제공해주시면 맞춤형으로 작성해드릴 수 있습니다.

---

# 1. 하드 스킬

질문1)  
React에서 상태 관리 방법에는 어떤 것들이 있으며, 실제 프로젝트에서 어떤 방법을 선택했는지 설명해 주세요.

답변1)  
React에서 상태 관리는 컴포넌트 내부 상태, Context API, Redux, MobX, Recoil 등 다양한 방법이 있습니다. 저는 규모가 작은 프로젝트에서는 useState와 Context API를 주로 사용했고, 복잡한 상태와 여러 컴포넌트 간의 데이터 공유가 필요한 대규모 프로젝트에서는 Redux를 도입했습니다. 예를 들어, 쇼핑몰 프로젝트에서는 Redux Toolkit을 활용해 상태를 효율적으로 관리하고, 미들웨어로 redux-thunk를 적용해 비동기 작업을 처리했습니다.

질문2)  
Node.js에서 비동기 처리를 어떻게 구현하며, 콜백 지옥(Callback Hell)을 방지하는 방법은 무엇인지 설명해 주세요.

답변2)  
Node.js에서 비동기 처리는 주로 콜백, Promise, async/await를 사용해 구현합니다. 콜백 지옥을 방지하기 위해 Promise 체이닝을 사용하거나, ES8에서 도입된 async/await 문법을 활용합니다. async/await는 코드의 가독성을 높여주고, 에러 핸들링도 try-catch로 직관적으로 할 수 있어 실제 프로젝트에서 선호하여 사용하고 있습니다.

질문3)  
RESTful API 설계의 주요 원칙은 무엇이며, 실제로 어떻게 적용했는지 사례를 들어 설명해 주세요.

답변3)  
RESTful API 설계의 주요 원칙은 자원(Resource) 기반 URI 설계, HTTP 메서드(GET, POST, PUT, DELETE)의 명확한 사용, 클라이언트-서버의 분리, 무상태성(Stateless), 계층화 구조 등이 있습니다. 예를 들어, 사용자 정보를 다루는 경우 `/users`, 특정 사용자는 `/users/{id}`와 같이 URI를 설계했습니다. 또한, GET 메서드는 데이터 조회, POST는 생성, PUT은 수정, DELETE는 삭제에 각각 매핑하여 일관성 있게 API를 설계했습니다.

---
...

---

채용공고 전문을 제공해주시면 더욱 맞춤화된 질문과 답변을 드릴 수 있습니다!
Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings...
# --------------



# Coding-test : HttpServletRequest, HttpServletResponse import class 자체가 안 뜨는 상황 발생
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
build.gradle에 추가
