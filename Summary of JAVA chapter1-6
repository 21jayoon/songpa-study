# JAVA lecture
# Chapter1
public class Application01 {
    public static void main(String[] args){
        /* 1.숫자 형태의 값
        * 1-1.정수 형태의 값 출력 */
        System.out.println(123);

        /* 1-2. 실수 형태의 값 출력 */
        System.out.println(1.23);

        /* 2. 문자형태의 값 출력 */
//     코드 먼저쓰고 주석달고 싶으면 컨트롤과 / 함께 사용
        System.out.println('1'); //문자 형태의 값은 홑따옴표(작은따옴표)로 감싸주어야한다.
//        System.out.println('ab'); 두 개 이상은 문자로 취급않기 때문에 에러 발생함.
//        System.out.println(''); //아무 문자도 기록하지 않는 경우도 에러 발생

        /*3.문자열 형태의 값 출력*/
        System.out.println("안녕하세요");  //문자열=문자 여러 개가 나열된 형태, 쌍따옴표(큰 따옴표)로 감싸주어야 한다.
        System.out.println((""));   //아무것도 없는 빈 쌍따옴표도 문자열로 취급한다
        System.out.println("a");    //한 개의 문자도 쌍따옴표로 감싸면 문자열이다. (단일 문자 a(작은따옴표a)와 다르다)

        /*4.논리 형태의 값 출력 : true, false*/
    }
}

package com.ohgiraffers.section01.literal;
public class Application02 {
    public static void main(String[] args) {
        /*comment. 값을 직접 연산해 출력할 수 있다.
        * 이 때 값의 형태에 따라 사용가능한 연산자의 종류와 연산 결과가 달라진다.*/

        /*1.숫자와 숫자의 연산*/
        /*1-1.정수와 정수의 연산 :  +  -  *  /  %  가능*/    

        /*1-2.실수와 실수의 연산 :  +  -  *  /  % 가능
        (% 사용 시 결과에 약간 오차 생길 수 있음) */

        /*1-3.정수와 실수의 연산 :  +  -  *  /  % 가능*/
        /*결과는 항상 실수가 나온다*/
        
        /*2.문자의 연산 */
        /*2-1.문자와 문자의 연산 :  +  -  *  /  % 가능*/
        System.out.println("=======문자와 문자의 연산=======");
        System.out.println('a' + 'b'); //결과: 195, ASCII 코드에서 소문자 a와 b는 각각 97,98이라서 195가 나오는 것
        System.out.println('a' - 'b'); //-1(int), 97-98
        System.out.println('a' * 'b'); //9506 (int)

        /*2-2.문자와 정수의 연산 :  +  -  *  /  % 가능*/        
        System.out.println('a' / 1);

        /*2-3.문자와 실수의 연산 :  +  -  *  /  % 가능*/
        System.out.println('a' % 1.1);

        /*3.문자열의 연산 */
        /* 3-1. 문자열과 문자열의 연산*/
        /* 문자열과 문자열의 '+' 연산 결과 문자열 합치기(이어 붙이기)가 된다 */
        System.out.println("Hello" + "World");
        //문자열 계산은 + 외엔 사용불가

        /*3-2.문자열과 다른 형태의 값 연산 */
        /*3-2-1.문자열과 정수 연산 :  +  가능*/

        /*3-2-2.문자열과 실수 연산 :  +  가능*/
        System.out.println("Hello" + 1.23);

        /*3-2-3.문자열과 문자 연산 */
        System.out.println("Hello" + 'a');

        /*3-2-4.문자열과 논리값 연산 */
        System.out.println("==3-2-4.문자열과 논리값 연산==");
        System.out.println("Hello" + true); //Hellotrue(string)
        /*문자열과의 연산은 +만 가능*/

        /*4.논리값 연산 */
        /*4-1.논리값과 논리값 연산 */        
        /*논리값과 논리값 연산은 불가능.(오류 뜬다)
        * 따라서 논리값과 정수, 논리값과 실수, 논리값과 문자 연산은 불가능  */

        //But 4-5.논리값과 문자열 연산은 가능
        System.out.println("=======논리값과 문자열 연산=======");
        System.out.println(true + "a");
        //그러나 논리값문자열연산 역시 +외 다른 연산자는 사용 불가
    }
}

public class Application03 {
    public static void main(String[] args) {
        /*comment. 문자열 합치기 결과를 예측하고 사용할 수 있다
        * 1. 두개의 문자열 합치기*/
        System.out.println("=======두개의 문자열 합치기=======");
        System.out.println("9" + 9); //99(문자열)
        System.out.println(9+"9"); //99(문자열), 숫자9가 문자열"9"를 만나 문자열99로 출력
    
        /* 2. 3개의 문자열 합치기*/
        System.out.println("=======3개의 문자열 합치기=======");
        System.out.println(9 + 9 + "9"); //9+9=18까지 계산했다가 문자열"9"를 만나 189로 출력
        //'+' 연산 방향은 왼쪽에서 오른쪽이다.
        System.out.println(9 + "9" + 9); //999(문자열)
        System.out.println("9" + 9 + 9); //999(문자열), 문자열을 가장 먼저 만났기 때문에 다음 문자도 모두 문자열로 인식
        System.out.println("9"+(9+9)); //918(문자열)

        /* 3. 문자열 합치기 응용*/
        System.out.println("=======결과 보기 좋게 출력=======");
        System.out.println("10과 20의 합 : " + (10+20));
        System.out.println("10과 20의 차 : " + (10-20));
        System.out.println("10과 20의 곱 : " + (10*20));
        System.out.println("10과 20의 나누기 한 몫 : " + (10/20));
        System.out.println("10과 20의 나누기 한 나머지 : " + (10%20));
    }
}


public class Application1 {
    public static void main(String[] arge) {
        /* 변수의 사용 목적
        * 1. 값에 의미를 부여하기 위한 목적으로 (의미 전달이 쉬워야 코드 읽기 쉬워지고, 협업 및 유지보수(=코드개선)에 유리하기 때문이다)
        * 2. 한 번 저장해둔 값을 재사용하기 위한 목적 (값을 변경할 때도 간편히 변경가능)
        * 3. 시간에 따라 변하는 값을 저장하고 사용할 수 있다. (변하는 값을 저장하기 위한 공간 = 변수) */

        /*1. 값에 의미를 부여하기 위한 목적*/
        System.out.println("보너스를 포함한 급여 : " + (10000 + 2000) + "원");
        //이렇게 쓰면 뭐가 보너스고 뭐가 급여인지 한 눈에 알 수 없음

        System.out.println("보너스를 포함한 급여 : " + (salary+bonus) + "원");
        System.out.println("급여 : " + salary + "원");


        /*2. 값에 의미를 부여하기 위한 목적*/
        System.out.println("1번 고객에게 포인트를 100포인트 지급하였습니다.");
        //만약 이걸 변수 값에 저장하지 않고 print하려면 code 수백수천개를 일일히 쳐야함

        int point = 100;
        int i = 1;
        for( ; i < 11; i++){
            System.out.println( i +"번 고객에게 포인트를 " + point +"포인트 지급하였습니다.");
        }
        //처음에 System.out.println( i +"번 고객에게 포인트를 " + point +"포인트 지급하였습니다.");를
        //for문 바깥에 넣었는데 "1 2 ... 10번 고객에게 포인트를 지급하였습니다."라고 출력됨
        //googling했더니 출력값을 for문 안에 넣으면 원하는 대로 i가 하나씩 증가하며 출력될 것 같아서
        //for문 안에 넣었더니 "1번 고객에게 포인트를...지급하였습니다."..."10번 고객에게 포인트를...지급하였습니다." 출력됨

        /*3. 값에 의미를 부여하기 위한 목적*/
        /*변수는 하나의 값을 저장하고 사용하기 위한 공간이기보다,
        변하는 값을 저장하기 위한 공간이다.*/
        int sum = 0; //="선언과 동시에 초기화를 했다"

        sum = sum + 10;
        System.out.println("sum에 10을 더하면 현재 sum의 값은? : " +sum); //sum에 10을 더하면 현재 sum의 값은? : 10
    }
}
package com.ohgiraffers.section2.variable;

public class Application2 {
    public static void main(String[] args) {
        /*comment.변수를 선언하고 값을 할당하여 사용가능
        변수 사용 방법
        1. 변수를 준비한다 (선언)
        2. 변수에 값을 대입한다. (값 대입 및 초기화)
        3. 변수를 사용한다.
         */
        
        /*1-1. 변수 선언 방법 */
        /*자료형 변수명; */
        /*자료형이란?
        다양한 값의 형태별로 어느 정도 크기를 하나의 값으로 취급할 것인지 미리 compiler과 약속한 키워드
        예) 앞에서 사용한 int 자료형은 정수를 4byte 만큼 읽어서 하나의 값으로 취급하겠다라는 약속이다
        이러한 자료형은 기본자료형과 참조자료형으로 나뉜다
        */
        
        /* 기본자료형 8가지 : 
         * 1-1-1. 숫자 취급 자료형
         * 정수를 취급하는 자료형은 4가지 있음 */
        byte bnum; // 1byte
        short snum; // 2byte
        int inum; // 4byte
        long lnum; // 8byte

        /* 실수를 취급하는 자료형 2가지 */
        float fnum; // 4byte
        double dnum; // 8byte

        /* 1-1-2. 문자를 취급하는 자료형 */
        /* 문자를 취급하는 자료형 1가지 */
        char ch;    // 2byte

        /* 1-1-3. 논리값 취급 자료형 */
        boolean isTrue; // 1byte
        /*이상 8가지를 기본자료형이라고 하며 자료형 이름과 각 자료형이 갖고 있는 byte 수는 외워야 한다*/


        /* 1-1-4. 문자열을 취급하는 자료형 */
        String str; // 4byte

        /*2. 변수에 값을 대입한다. (변수 값 초기화)
        /* 2-1. 정수를 취급하는 자료형에 값 대입 */
        inum = 4;
        lnum = 8L;  // 소문자 l을 써도 되지만 대문자로 하는 것이 권장이다.

        /* 2-2. 실수를 취급하는 자료형에 값 대입 */
        fnum = 4.0f; // 실수 뒤에 'f'를 붙여야한다. 소문자를 사용하는 것이 일반적이다.
        dnum = 8.0;

        /*2-3. 문자 취급 자료형에 값 대입 */
        ch = 'a';
        ch2 =  97; //숫자로도 지정할 수 있다

        /* 2-4. 논리를 취급하는 자료형에 값 대입 */
        isTrue = false;

        /* 2-5. 문자열을 취급하는 자료형에 값 대입 */
        str = "안녕하세요";

        /* comment.
         *   숫자로 된 형태의 값을 그대로 사용하는 자료형은 byte,short,int,double이다.
         *   일반적으로 사용하는 값을 독특한 형태가 아닌
         *   일반적인 형태로 사용할 수 있는 자료형을 대표자료형이라고 하며
         *   정수형은 int, 실수형은 double이 대표 자료형이다.
         * */

        /* 선언과 동시에 초기화 */
        int point = 100;
        int bonus = 10;

        /*3. 변수 사용
        * 3-1. 변수에 저장된 값 출력
        * 이 부분에서 변수 사용의 이유를 알 수 있다.
        * 한 번 선언해놓으면 이후 사용이 편리하다.*/
        System.out.println("lnum = " + lnum); // lnum = 8

        System.out.println("fnum = " + fnum); // fnum = 4.0
        System.out.println("dnum = " + dnum); // dnum = 8.0

        System.out.println("ch = " + ch);

        System.out.println("str = " + str);

        /* 3-2. 변수를 이용해서 연산하기 */
        System.out.println("포인트와 보너스의 합은? : " + (bonus + point));

        /* 3-3. 대입연산자의 왼쪽과 오른쪽 편에 사용하기 */
        point = point + 100;
    }
}
package com.ohgiraffers.section2.variable;

public class Application3 {
    public static void main(String[] args) {
        /* 필기. 변수의 명명 규칙
         * 변수의 이름을 지을 때 아무렇게나 짓는 것이 아닌 정해진 규칙이 있다.
         * ¡실무적으로는 굉장히 중요!하기 때문에 반드시 숙지해야하고,
         * 규칙에 맞는 올바른 변수명을 짓는 것이 좋은 프로그래밍을 하는 첫 단추이다.
         * */

        /* 필기. 변수의 명명규칙
         * 1. 컴파일 에러를 발생시키는 규칙
         *  1-1. 동일한 범위 내에서 동일한 변수명을 가질 수 없다.
         *  1-2. 예약어는 사용이 불가능하다. (자바에서 미리 사용하겠다고 compiler와 약속한 키워드를 예약어라고 한다.)
         *  1-3. 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 엄격하게 구분하는 언어이다.)
         *  1-4. 변수명은 숫자로 시작할 수 없다. (시작만 할 수 없고 숫자를 섞어서 사용하는 것은 가능하다.)
         *  1-5. 특수기호는 '_'와 '$'만 사용 가능하다. (따라서 공백을 사용할 수 없다.)
         *
         * 2. 컴파일 에러를 발생시키지는 않지만 개발자들끼리의 암묵적인 규칙
         *  2-1. 변수명의 길이 제한은 없다. (하지만 적당히..)
         *  2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다. (camel-case)
         * 예시) studentName
         *  2-3. 단어와 단어 사이의 연결을 언더스코어(_)로 하지 않는다. student_Name(x)
         *  2-4. 한글로 변수명을 짓는 것이 가능하지만, 권장하지 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 에러를 유발할 수 있다.)
         *  2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다.
         *  2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다. sum
         *  2-7. 명사형으로 작성할 수 있도록 한다.
         *  2-8. boolean형은 의문문으로 가급적 긍정형태로 네이밍한다.
         * */

        /*1. 컴파일 에러 발생
        * 1-1. 동일범위 내 동일변수명 불가 */
        int age = 20;
        //int age = 30; //이미 int age에 20이 들어갔는데.. 반복불가

        /* 1-2. 예약어는 사용이 불가능하다. (자바에서 미리 사용하겠다고 compiler와 약속한 키워드를 예약어라고 한다.) */
        //int true = 1; //true가 이미 예약어로 되어있음. 사용불가

        /*1-3. 변수명은 대소문자를 구분한다. (자바는 대소문자 엄격히 구분하는 언어) */
        //int Age = 20;  //위에서 만든 age와 다른 것으로 취급됨
        int True = 20;  //예약어 true와 다른 것으로 취급됨

        /*  1-4. 변수명은 숫자로 시작할 수 없다. (시작만 할 수 없고 숫자를 섞어서 사용하는 것은 가능하다.) */
//        int 1age = 20;
        int age1 = 20;

        /*  1-5. 특수기호는 '_'와 '$'만 사용 가능하다. (따라서 공백을 사용할 수 없다.) */
//        int sh@rp = 20; //@사용불가
        int _age = 20;  // 처음도 가능하고 중간이나 끝에도 가능
        int $harp = 20; // $도 사용 가능

        /* 2. 컴파일 에러를 발생시키지는 않지만 개발자들끼리의 암묵적인 규칙 */
        /*  2-1. 변수명의 길이 제한은 없다. (하지만 적당히 해야한다.) */
        int adjkajldjakldjkljaljewidlskjklajkljdlska;

        /*  2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다. (camel-case)
        * 예시) studentName
        * 자바에서는 클래스명만 유일하게 대문자로 시작한다. */
        int maxAge = 20;
        int minAge = 10;

        /*  2-3. 단어와 단어 사이의 연결을 언더스코어(_)로 하지 않는다. */
        String user_name;   // 에러가 발생하지는 않음
        String userName;    // 이게 올바른 표현이다.

        /*  2-4. 한글로 변수명을 짓는 것이 가능하지만, 권장하지 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 에러를 유발할 수 있다.) */
        int 나이;

        /*  2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다. */
        String s; //(X)
        String name; //(O)

        /*  2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다. */
        int sum = 0;
        int max = 10;
        int count = 1;

        /*  2-7. 명사형으로 작성할 수 있도록 한다. */
        String goHome;  // 가능하긴 하지만
        String home;    // 가급적 명사형으로 짓는다.

        /*  2-8. boolean형은 의문문으로 가급적 긍정형태로 네이밍한다. */
        boolean isAlive = true; //이게 긍정형
        boolean isDead = false; // 부정형보다는 긍정형이 더 나은 방식이다.
    }
}

public class Application1 {
    public static void main(String[] args) {
        /* 상수(constant)란?
        * 변수와 동일하게 데이터를 저장할 수 있는 공간이지만
        * 변수variable는 메모리에 '변경될 값'을 저장하기 위한 공간이고
        * 상수는 "불변하는 값을(항상 고정된 값을) 저장해두기 위한 메모리 상의 공간"이다.
        * (=한 번 메모리에 저장된 데이터를 변경할 수 없다)
        *
        * 상수의 사용 목적
        * "변경되지 않는 고정된 값을 저장할 목적으로 사용"한다
        * 초기화 이후 값 대입 시 컴파일 에러를 발생시켜 값이 수정되지 못하도록 한다.
        * 예) 수학 공식에 사용되는 수치, 프로그램의 기본적인 환경설정 정보(DB 정보, IP 주소정보 등)
        *
        * 사용방법
        * 1. 상수 선언 (final 키워드 사용)
        * 2. 값 초기화 (초기화 이후에는 값 변경 불가능)
        * 3. 필요 위치에 상수 호출해서 사용
        */
        final int AGE;
        AGE=20;
//        AGE=30; 앞에서 =20;으로 초기화했는데 30으로 새로운 값 대입시키려니 error 발생

        /* 출력 구문에서 사용 */
        System.out.println(AGE); //20

        /* 대입연산자 시 활용 */
        int sum = AGE; // 대입 연산자의 오른 편에는 기술 가능함
//        int AGE = AGE + 10; // 대입 연산자의 왼쪽 편에는 기술 불가능함

    }
}

public class Application2 {
    public static void main(String[] args) {
         /*comment. 상수의 명명 규칙에 대해 이해할 수 있다
         * 상수의 명명 규칙은 변수의 명명규칙과 컴파일 에러를 발생시키는 규칙은 동일
         * 단, 개발자들 사이에서의 암묵적인 규칙에서 일부 차이를 보인다.
         * 1.모든 문자는 영문자 대문자 혹은 숫자만 사용한다. (중요!)
         * 2.단어와 단어 연결은 언더스코어_ 사용한다*/

        final int AGE1 = 20;
        final int age3 = 40;    // 소문자로 사용은 가능하지만 변수와 구분하기 힘듦

        final int MAX_AGE = 60;
        final int MIN_AGE = 20;
        final int minAge = 30;  // camel-case 사용이 가능하지만 역시 변수와 구분하기 힘들다.
    }
}

public class Application1 {
    public static void main(String[] args) {
        // 1byte = 8bit
        /*comment. overflow에 대해 이해할 수 있다
         * 자료형 별 값의 최대 범위를 벗어나는 경우
         * 발생한 carry를 버림처리하고 sign bit를 반전시켜 최소값으로 순환시킴

         * 오버플로우 overflow*/
        byte num1 = 127;
        System.out.println("num1 = " + num1); //byte의 최대 저장 범위는 127

        num1++;
        System.out.println("num1 = " + num1);
        //byte최대 저장 범위는 127인데 그걸 넘어섰으니 반대로 byte의 최소 저장 범위인 -128로 값을 바꿨다(?).

        /* 언더플로우 */
        /* 오버플로우와 반대 개념으로 최소 범위보다 작은 수를 발생시키는 경우 언더플로우가 발생한다. */
        byte num2 = -128;

        System.out.println("num2 = " + num2);   // byte의 최소 저장 범위 -128

        num2--;

        System.out.println("num2 = " + num2);   // byte의 최대 저장 범위

        int firstNum = 1000000;
        int secondNum = 700000;

        // 범위를 벗어난 계산은 오버플로우를 발생시켜서 원하지 않는 결과값이 나오게 될 수 있다.
        int multi = firstNum * secondNum;   // 7천억이 나와야함
        System.out.println("multi = " + multi); //multi = -79669248

        /* 해결방법 - 안됨 */
        long longMulti = firstNum * secondNum;
        System.out.println("longMulti = " + longMulti); //longMulti = -79669248
        /* 왜? : 이미 오버플로우 처리 된 결과를 가지고 변수에 담기 때문에 위에 결과랑 별 차이가 없다.
         *  계산이 처리되기 전에 long 타입으로 자료형을 변경해주어야 한다. (강제형변환 이용)
         * */
        long result = (long) firstNum * secondNum;
        System.out.println("result = " + result); //result = 700000000000
    }
}
