<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>05_event-01eventSystem</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        class EventButton extends React.Component{
            // constructor function must be applied in class type component
            constructor(props){
                super(props);
            }

            /*1. 인라인 함수로 직접 처리*/
            /*render(){
                return(
                    <button onClick={()=> alert('Check the inline-function event works')}>{this.props.children}</button>
                    //class 내부에서는 props. 사용 시 앞에 this. 꼭 붙여서 this.props 형태로 사용해야함  10:44
                )
            }*/


            /*2. 클래스 메소드로 따로 정의해서 전달하기*/
            /*onClickHandler = ()=> alert('External function event working');
            render() {
                return (
                    <button onClick={onClickHandler}>{this.props.children}</button>
                )
            }   Uncaught ReferenceError: onClickHandler is not defined  */
            /*해결 방법 1
            render(onClickHandler = ()=> alert('External function event working')) {
                return (
                    <button onClick={onClickHandler}>{this.props.children}</button>
                )
            }*/
           /*해결 방법2
           render() {
                const onClickHandler = ()=> alert('External function event working');
                return (
                    <button onClick={onClickHandler}>{this.props.children}</button>
                )
            } */

            //원래 의도한 구조대로 출력(해결 방법3)
            // class 내부의 함수(메소드)를 호출할 때는  this.를 반드시 붙여줘야 한다.
            /* onClickHandler = ()=> alert('External function event working');
            render() {
                return (
                    <button onClick={this.onClickHandler}>{this.props.children}</button>
                )
            }
            ReactDOM.createRoot(document.getElementById('root')).render(<EventButton>EventButton</EventButton>); */


            /*3. component에 이벤트를 props로 전달 후 연결*/
            render(){
                // onClick을 활용하기 위해서 구조분해할당을 함
                const {onClick, children} = this.props;

                return(
                    <button onClick={onClick}>{children}</button>
                )            
            }
        }
        
        ReactDOM.createRoot(document.getElementById('root')).render(
            //3번 방법  테스트용 버튼
            // {()=> alert('props로 이벤트 전달 후 연결 확인')} = props.onClick에 값을 설정해주는 용도
            // 이 onClick은 위 return 안에 있는 event onClick에 props로 전달된다.   250626 11:00
            <EventButton onClick={()=> alert('props로 이벤트 전달 후 연결 확인')}>Button3</EventButton>
        )
    </script>
    
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>05_event-02eventHandling</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>
<body>
    <div id="root"></div>

    <script type="text/babel">

        class ClassEventComponent extends React.Component{
            state = {
                message: ''
            }

            handleChange = (e) => {
                this.setState({ message: e.target.value });
                // 화살표 함수는 알아서 this를 갖지 않기에 상위 scope 값(?)을 가져온다.
            }

            handleClick = () => {
                alert(this.state.message);
                this.setState({ message: '' });
            }

            render() {
                return(
                    <>
                        <h2>클래스형 컴포넌트 이벤트</h2>
                        <input
                            type="text"
                            placeholder="Type the message"
                            value={this.state.value}
                            onChange={this.handleChange}
                        />
                        <button onClick={this.handleClick}>Confirm</button>    
                    </>
                )
            }
        }
        //ReactDOM.createRoot(document.getElementById('root')).render(<ClassEventComponent/>);

        function FunctionEventComponent(){
            const [username, setUsername] = React.useState('');
            const [password, setPassword] = React.useState('');

            const handleLogin = () => {
                alert(`username: ${username}\npassword: ${password}`);
                //초기화
                setUsername('');
                setPassword('');
            }
            return (
                <>
                    <h2>함수형 컴포넌트 - 개별 상태</h2>
                    <input
                        type="text"
                        name="username"
                        placeholder="id"
                        value={username}
                        onChange={e=> setUsername(e.target.value)}
                    />
                    <input
                        type="password"
                        name="password"
                        placeholder="pwd"
                        value={password}
                        onChange={e=> setPassword(e.target.value)}
                    />
                    <button onClick={handleLogin}>Login</button>
                </>
            )
        }

        /*하나의 객체로 상태 관리  11:46*/
        function FunctionEventComponent2() {
            const [form, setForm] = React.useState({username:'', password: ''})
            // 아래에서 쓰기 편하게 객체 구조 할당(username과 password 쓰기 편하도록)
            const { username, password } = form;

            /*이벤트가 발생한 input태그의 name속성 값을 활용하여 
            하나의 핸들러 메소드로 처리할 수 있다.*/
            const handleChange2 = (e) => {
                console.log(e.target.name);
                const changeForm = {
                    //spread 연산자 ...를 사용해 기존 form 객체의 나머지 프로퍼티 복사
                    ...form,
                    [e.target.name]: e.target.value  // event가 발생한 name과 일치하는 프로퍼티 값을 value 값으로 수정
                }
                setForm(changeForm);
            }

            // 위에서 사용했던 handleLogin 복사해온 후
            // 하나의 객체 상태로 관리할 수 있게 수정
            const handleLogin2 = () => {
                alert(`username: ${username}\npassword: ${password}`);
                //초기화
                setForm({username: '', password: ''});
            }

            return(
                <>
                    <h2>함수형 컴포넌트 - 객체 기반 상태(하나의 객체 상태)로 관리</h2>
                    <input
                        type="text"
                        name="username"
                        placeholder="id"
                        value={username}
                        onChange={handleChange2}
                    />
                    <input
                        type="password"
                        name="password"
                        placeholder="pwd"
                        value={password}
                        onChange={handleChange2}
                    />
                    <button onClick={handleLogin2}>Login</button>
                </>
            )
        }

        //component 합성 이용해 FunctionEventComponent 랜더링하기 11:43
        function App(){
            return(
                <>
                    <ClassEventComponent/>
                    <hr/>
                    <FunctionEventComponent/>
                    <FunctionEventComponent2/>
                </>
            )
        }
        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);

        /* 복습 : spread 연산자, rest parameter   12:08*/
        let obj = {
            prop0: 'p0',
            prop1: 'p1',
            prop2: 'p2'
        }
        let objCopy = {...obj}
        // ...obj => obj의 값들(prop0: 'p0'...'p2')을 전부 펼쳐서 복사해온다
        //만약 prop2만 값을 바꿔서 복사해오고 싶으면
        //let objCopy={...obj, prop2: 'modify'} 라고 직접 값을 명시해준다

        /*rest parameter*/
        let [a, ...rest] = [1, 2, 3]
        //a=1, [rest(0)=2, rest(2)=3]...... 이렇게 하나씩 묶여서 적용됨. 
        console.log(rest);

        //객체에 적용하는 방법
        let {prop1, ...restObj} = {prop1: 'a', prop2: 'b', prop3: 'c'}
        console.log(restObj);

        console.log(objCopy);

    </script>
</body>
</html>
