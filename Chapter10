package com.ohgiraffers.section01.stringClass;

public class Application1 {
    public static void main(String[] args) {
        /*String 클래스의 자주 사용하는 메소드에 대해 숙지하고 응용할 수 있다.
        * charAt() : 해당 문자열의 특정 인덱스에 해당하는 문자를 반환한다.
        *            인덱스는 0부터 시작하는 숫자 체계를 의미하는
        *            인덱스를 벗어난 정수를 인자로 전달하는 경우에는
        *            IndexOutOfBoundsException이 발생한다. */

        String str1 = "apple";

        for(int i = 0; i < str1.length(); i++) {
            System.out.println(str1.charAt(i));
        }

        /* compareTo() : 인자로 전달된 문자열과 사전 순으로 비교를 하여
        *               두 문자열이 같다면 0 반환, 인자로 전달된 문자열보다 작으면 음수를, 크면 양수를 반환한다.
        *               단, 이 메소드는 대소문자를 구분하여 비교한다. */
        String str2 = "java";
        String str3 = "java";
        String str4 = "JAVA";
        String str5 = "oracle";
        System.out.println("compareTo() " + (str2.compareTo(str3))); // compareTo() 0

        System.out.println("compareTo() " + (str2.compareTo(str4)));  // compareTo() 32
        System.out.println("compareTo() " + (str4.compareTo(str2)));  // compareTo() -32

        System.out.println("compareTo() " + (str2.compareTo(str5)));  // compareTo() -5
        System.out.println("compareTo() " + (str5.compareTo(str2)));  // compareTo() 5

        /*compareToIgnoreCase()는 대소문자를 구분않고 비교한다.*/
        System.out.println("compareToIgnoreCase () : " + (str3.compareToIgnoreCase(str4))); // compareToIgnoreCase () : 0

        /* concat () : 문자열에 인자로 전달된 문자열을 합쳐서 새로운 문자열을 반환한다.
        *             원본 문자열에는 영향을 주지 않는다. */
        System.out.println("concat() : " + (str2.concat(str5))); // concat() : javaoracle
        System.out.println(str2); // java , 위에서 concat으로 str5와 합쳐졌지만 원본에는 변동 없다.

        /*indexOf() : 문자열에서 특정 문자를 탐색하여 처음 일치하는 인덱스 위치를 정수형으로 반환한다.
        *             단, 일치하는 문자가 없는 경우 -1을 반환한다.     */
        String indexOf = "java oracle";
        System.out.println(indexOf.indexOf(('a'))); // 1
        System.out.println(indexOf.indexOf(('z'))); // -1 , 일치하는 문자가 없음

        /* lastIndexOf() : 문자열 탐색을 뒤에서부터 하고 처음 일치하는 위치의 인덱스를 반환한다.
        *                 단, 일치하는 문자가 없는 경우 -1을 반환한다. */
        System.out.println(indexOf.lastIndexOf('a')); // 1
        System.out.println(indexOf.lastIndexOf('z')); // -1

        /*trim() : 문자열 앞 뒤에 공백을 제거한 문자열을 반환한다.*/
        String trimStr = "   java   ";
        System.out.println("trimStr : #" +  trimStr + "#");  // trimStr : #   java   #
        System.out.println("trimStr : #" +  trimStr.trim() + "#"); // trimStr : #java#
        // trim()은 원본에 영향을 주지 않는다.
        System.out.println("trimStr : #" +  trimStr + "#"); // trimStr : #   java   #

        /*toLowerCase() : 모든 문자를 소문자로 변환시킨다.
        * toUpperCase() : 모든 문자를 대문자로 변환시킨다.
        * 원본에는 영향 없음*/
        String caseStr = "JavaOracle";
        System.out.println(caseStr.toLowerCase()); // javaoracle
        System.out.println(caseStr.toUpperCase()); // JAVAORACLE
        System.out.println(caseStr); // JavaOracle

        /* substring() :  문자열의 일부분을 잘라내어 새로운 문자열을 반환한다.
        *                원본에 영향을 주지 않는다.    */
        String javaOracle = "javaoracle";
        System.out.println(javaOracle.substring(3, 6)); // 3번째 인덱스부터 6번째인덱스 전까지(5번 인덱스까지) 잘라라
        // aor

        /* replace() : 문자열에서 대체할 문자열로 기존 문자열을 변경해서 반환한다.
        *             원본에 영향을 주지 않는다. */
        System.out.println(javaOracle.replace("java", "python")); // pythonoracle
        System.out.println(javaOracle); // javaoracle

        /* length() : 문자열의 길이를 정수형으로 반환한다.*/
        System.out.println(javaOracle.length()); // 10
        System.out.println("".length()); // 0

        /* isEmpty() : 문자열의 길이가 0이면 true 반환, 아니면 false 반환
        *             길이가 0인 문자열은 null과는 다르다. null값이 들어있는 것은 아니다. */
        System.out.println("".isEmpty()); // true
        System.out.println("abc".isEmpty()); // false
    }
}
package com.ohgiraffers.section01.stringClass;

public class Application2 {
    public static void main(String[] args) {
        /* 문자열 객체String Object를 만드는 다양한 방법을 숙지하고 인스턴스가 생성되는 방식을 이해할 수 있다.
        * 문자열 객체 만드는 방법(인스턴스가 생성되는 방식은 다름)
        * "" 리터럴 형태 : 동일한 값을 갖는 인스턴스를 단일 인스턴스로 관리한다.(singleton)
        * new String("문자열") : 매번 새로운 인스턴스를 생성한다. */
         String str1 = "java";
         String str2 = "java";
         String str3 = new String("java");
         String str4 = new String("java");

        System.out.println(str1 == str2); // true (주소값 비교)
        System.out.println(str2 == str3); // false
        System.out.println(str3 == str4); // false , str3, str4 모두 각각 새롭게 인스턴스가 생성된 것이라 같지 않다.

        /*동일한 문자열은 동일한 hashCode값을 반환하도록 재정의되어있다.*/
        System.out.println(str1.hashCode()); // 3254818
        System.out.println(str2.hashCode()); // 3254818
        System.out.println(str3.hashCode()); // 3254818
        System.out.println(str4.hashCode()); // 3254818

        /*문자열은 불변이라는 특징을 가진다.*/
        str2 += "oracle";
        System.out.println(str1 == str2); // false
        // 동일한 인스턴스였지만 str+="oracle";로 새로운 인스턴스가 str2에 할당되었기에 서로 다른 인스턴스라고 반환

        /*equals() : String클래스의 equals() 메소드는 인스턴스 비교가 아닌
        *           문자열값을 비교하여 동일한 값을 가지는 경우 true, 다른 값을 가지는 경우 false를 반환하도록
        *           Object의 equals() 메소드를 재정의 해두었다. */
        System.out.println(str1.equals(str3)); // true , 문자열 '값'만 비교하기 때문에 true 반환
        System.out.println(str1.equals(str4)); // true , 문자열 '값'만 비교하기 때문에 true 반환
        /* 따라서 문자열 인스턴스 생성 방식과 상관없이 동일한 문자열인지를 비교하기 위해 == 연산 대신
        * equals() 메소드를 사용해야 한다. */
    }
}
package com.ohgiraffers.section01.stringClass;

import java.util.StringTokenizer;

public class Application3 {

    public static void main(String[] args) {
        /* 문자열 분리에 대해 이해하고 적용할 수 있다. */
        /* 문자열을 특정 구분자로 하여 분리한 문자열을 반환하는 기능을 한다.
         *  split() : 정규표현식 이용하여 문자열을 분리한다.
         *            정규표현식을 이용하기 때문에 속도가 느리다는 단점을 가진다.
         *
         *  StringTokenizer : 문자열의 모든 문자들을 구분자로 하여 문자열을 구분한다.
         *                    split()보다 속도면에서 더 빠르다.
         * */
        String emp1 = "100/홍길동/서울/영업부"; // 모든 값 존재함
        String emp2 = "200/유관순//총무부";   // 주소 없음
        String emp3 = "300/이순신/경기도";    // 부서 없음

        String[] empArr1 = emp1.split("/");
        String[] empArr2 = emp2.split("/");
        String[] empArr3 = emp3.split("/");

        for(int i = 0; i < empArr1.length; i++) {
            System.out.println(empArr1[i]);
        }

        for(int i = 0; i < empArr2.length; i++) {
            System.out.println(empArr2[i]);
        }

        for(int i = 0; i < empArr3.length; i++) {
            System.out.println(empArr3[i]);
        }
        /*100
        홍길동
        서울
        영업부
        200
        유관순

        총무부
        300
        이순신
        경기도
        */

        StringTokenizer st1 = new StringTokenizer(emp1, "/");
        StringTokenizer st2 = new StringTokenizer(emp2, "/");
        StringTokenizer st3 = new StringTokenizer(emp3, "/");

        while (st1.hasMoreTokens()) {
            System.out.println(st1.nextToken());
        }

        while (st2.hasMoreTokens()) {
            System.out.println(st2.nextToken());
        }

        while (st3.hasMoreTokens()) {
            System.out.println(st3.nextToken());
        }
        /*100
        홍길동
        서울
        영업부
        200
        유관순
        총무부
        300
        이순신
        경기도
        */
  }
}
package com.ohgiraffers.section01.stringClass;

public class Application4 {
    public static void main(String[] args) {
        /*이스케이프 문자에 대해 이해하고 적용할 수 있다.*/
        /* escape 문자
        * 문자열 내에서 사용하는 문자 중 특수문자를 표현하거나 특수기능을 사용할 때 사용하는 문자이다.
        * 이스케이프 문자          의미
        *     \n              개행(줄바꿈)
        *     \t                탭
        *     \'              작은 따옴표
        *     \"               큰 따옴표
        *     \\              역슬래쉬 표시
        * \ = 역 슬러시 */
        System.out.println("안녕하세요.\n저는 홍길동입니다.");
        /* 안녕하세요.
        저는 홍길동입니다.*/
        System.out.println("안녕하세요.\t저는 홍길동입니다."); // 안녕하세요.	저는 홍길동입니다.
        System.out.println("안녕하세요. 저는 '홍길동' 입니다."); // 안녕하세요. 저는 '홍길동' 입니다.
//        System.out.println(''');
        System.out.println('\''); // '
//        System.out.println("안녕하세요. 저는 "홍길동" 입니다.");
        System.out.println("안녕하세요. 저는 \"홍길동\" 입니다."); // 안녕하세요. 저는 "홍길동" 입니다.
        System.out.println("안녕하세요. 저는 \\홍길동\\ 입니다."); // 안녕하세요. 저는 \홍길동\ 입니다.

        /* split 시 이스케이프 문자를 사용해야 하는 특수문자도 존재한다.
         *  이스케이프 문자 사용 안하는 특수문자
         *  ~ ` ! @ # % & - _ = ; : ' \ " ,  < > /
         *  이스케이프 문자를 사용하는 특수문자(\\)
         *  $ ^ * ( ) + | { } [ ] . ?
         * */
    }
}
package com.ohgiraffers.section02.stringbuilder;

public class Application1 {
    public static void main(String[] args) {
        /*String과 StringBuilder의 차이점에 대해 이해하고 사용할 수 있다.
        * 두 클래스는 스레드 동기화 기능 제공 여부에 따라 차이점이 있다.
        * StringBuilder : 스레드 동기화 기능 제공 안 함 (비동기)
        *               스레드 동기화처리를 고려하지 않는 상황에서 StringBuffer보다 성능이 좋음
        * StringBuffer : 스레드 동기화 기능 제공함 (동기)
        *               성능면에서는 StringBuilder보다 느림 (동기(화) 때문에)
        * 두 개의 차이는 스레드 동기화 유무이고, 현재 우리는 스레드를 고려하지 않기 때문에
        * StringBuilder를 이용하여 자주 사용되는 메소드의 용법을 볼 것이다. */

        StringBuilder sb1 = new StringBuilder("javaoracle");
        /* delete() : 시작 인덱스와 종료 인덱스를 이용해서 문자열에서 원하는 부분의 문자열을 제거한다.
        * deleteCharAt() : 문자열 인덱스를 이용해서 문자 하나를 제거한다.
        * 둘 다 원본에 영향을 미친다. */
        System.out.println("delete() : " +sb1.delete(2, 5)); // delete() : jaracle
        // 2번째 인덱스부터 5번째 인덱스 전까지(4번째 인덱스까지) delete해서 반환
        System.out.println("deleteCharAt() : " + sb1.deleteCharAt(0)); // deleteCharAt() : aracle
        // 가장 최신 sb1 값에서 index0번째 문자를 제거하고 반환
        System.out.println(sb1); // aracle
        // delete(), deleteCharAt() 모두 원본에 영향을 미쳐 가장 최근(마지막) sb1 값인 aracle이 출력됨

        /* insert() : 인자로 전달된 값을 문자열로 변환 후 지정한 인덱스 위치에 추가한다.
        *  원본에 영향을 미친다. */
        System.out.println("insert() : " + sb1.insert(1, "vao")); // insert() : avaoracle
        System.out.println("insert() : " + sb1.insert(0, "j")); // insert() : javaoracle
        System.out.println("insert() : " + sb1.insert(sb1.length(), "jdbc")); // insert() : javaoraclejdbc

        System.out.println(sb1); // javaoraclejdbc
        //원본에 영향을 미쳐서 가장 최근에 수정된 값 javaoraclejdbc이 출력됨

        /* reverse () : 문자열 인덱스 순번을 역순으로 재배열한다.
        * 원본에 영향을 미친다. */
        System.out.println(sb1.reverse()); // cbdjelcaroavaj
        System.out.println(sb1); // cbdjelcaroavaj
        //.reverse()는 원본에 영향 미침 >> 마지막으로 수정된 값이 출력됨
    }
}
package com.ohgiraffers.section03.wrapper;

public class Application1 {
    public static void main(String[] args) {
        /*Wrapper 클래스에 대해 이해할 수 있다.
        기본타입            래퍼클래스
        byte                Byte
        short               Short
        int                 Integer
        long                Long
        float               Float
        double              Double
        char                Character
        boolean             Boolean
         */

        /* 박싱Boxing과 언박싱UnBoxing
        * Boxing 박싱 : 기본타입을 래퍼클래스의 인스턴스로 바꾸는 것
        * (기본타입을 래퍼클래스의 인스턴스로 인스턴스화하는 것)
        * UnBoxing 언박싱 : 래퍼클래스 타입의 인스턴스를 기본 타입으로 변경하는 것 */

        int intValue = 20;
        Integer boxingnumber1 = Integer.valueOf(intValue); // 박싱
        int unBoxingNumber = boxingnumber1.intValue(); // 언박싱
        // 인스턴스로 반환받을 건지 기본타입으로 반환받을 건지에 따라 박싱과 언박싱 자주 사용할 것임

        /* 최근 jdk 업데이트되며 새 기능 추가됨 :
        * 오토 박싱과 오토 언박싱 */
        Integer boxingNumber2 = intValue; // 오토 박싱
        int unBoxingNumber2 = boxingNumber2; // 오토 언박싱
    }
}
package com.ohgiraffers.section03.wrapper;

public class Application2 {
    public static void main(String[] args) {
        /* 문자열 parsing파싱에 대해 이해할 수 있다.
        * parsing : 문자열String 값을 기본 자료형 값으로 변경하는 것 */
        byte b = Byte.parseByte("1");
        short s = Short.parseShort("2");
        int i = Integer.parseInt("4");
        long l = Long.parseLong("8"); // 문자열로 인식하기 때문에 8L 못 쓰고 8로 써야 함
        float f = Float.parseFloat("4.0"); // 4.0f는 됨
        double d = Double.parseDouble("8.0");
        boolean bl = Boolean.parseBoolean("true");

        // character는 parsing 기능을 제공하지 않는다.
        char c = "abc".charAt(0);
    }
}
package com.ohgiraffers.section03.wrapper;

public class Application3 {
    public static void main(String[] args) {
        /*기본 자료형 값을 문자열로 변경할 수 있다.
        * eg) String b = Byte.valueOf((byte)1).toString();
        * >> (byte)와 같은 강제 형변환 필요
        * valueOf --> 래퍼클래스(Byte)로 바꾸겠다.
        *
        * valueOf() : 기본자료형 값을 Wrapper 클래스 타입으로 변환시키는 메소드
        * toString(): 필드 값을 문자열로 반환하는 메소드 */

        String b = Byte.valueOf((byte)1).toString();
        String s = Short.valueOf((short)2).toString();
        String i = Integer.valueOf(4).toString();
        String l = Long.valueOf(8L).toString();
        String f = Float.valueOf(4.0f).toString();
        String d = Double.valueOf(8.0).toString();
        String bl = Boolean.valueOf(true).toString();
        String c = Character.valueOf('a').toString();

        // String 클래스의 valueOf
        String str = String.valueOf(10);
        String str2 = 123 + "";
    }
}
package com.ohgiraffers.section04.time;

import java.time.*;

public class Application1 {
    public static void main(String[] args) {
        /*time 패키지에서 제공하는 클래스들의 사용 용법을 이해할 수 있다.
        * java.time
        *   └ java.time.zone : 시간대에 관련된 기능 제공
        * LocalTime, LocalDate, LocalDateTime, ZonedDateTime 클래스들이 있다. */

        LocalTime timeNow = LocalTime.now();
        System.out.println(timeNow); // 11:02:59.906954200

        LocalTime timeOf = LocalTime.of(18, 30, 0);
        System.out.println(timeOf); // 18:30
        // 내가 원하는 숫자를 줘서 시간으로 출력할 수 있음

        LocalDate dateNow = LocalDate.now();
        System.out.println(dateNow); // 2025-05-12
        LocalDate dateOf = LocalDate.of(2023, 1, 19);
        System.out.println(dateOf); // 2023-01-19

        LocalDateTime dateTimeNow = LocalDateTime.now();
        System.out.println(dateTimeNow); // 2025-05-12T11:05:42.496114600
        LocalDateTime dateTimeOf = LocalDateTime.of(dateNow, timeNow);
        System.out.println(dateTimeOf); // 2025-05-12T11:08:49.830397800

        ZonedDateTime zonedDateTimeNow = ZonedDateTime.now();
        System.out.println(zonedDateTimeNow); // 2025-05-12T11:07:42.675679+09:00[Asia/Seoul]
        ZonedDateTime zonedDateTimeOf = ZonedDateTime.of(dateOf, timeOf, ZoneId.of("Asia/Seoul"));
        System.out.println(zonedDateTimeOf); // 2023-01-19T18:30+09:00[Asia/Seoul]
    }
}
package com.ohgiraffers.section04.time;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;

public class Application2 {
    public static void main(String[] args) {
        /* time 패키지의 클래스가 제공하는 날짜 비교 연산 메소드를 활용할 수 있다.*/
        LocalDate localDate = LocalDate.now(); // 현재 날짜
        LocalDateTime localDateTime = LocalDateTime.now(); // 현재 날짜와 시간
        ZonedDateTime zonedDateTime = ZonedDateTime.now(); // 특정 zone의 날짜와 시간

        LocalDate past = LocalDate.of(2020,11, 11);
        LocalDateTime future = localDateTime.of(2025,12,25,12,0,0);
        ZonedDateTime present = ZonedDateTime.now();

        System.out.println(localDate.isAfter(past)); // true
        // isAfter :  지금날짜가 과거 날짜(past)보다 다음(미래)인지 확인하는 메소드
        System.out.println(localDateTime.isBefore(future)); // true
        // isBefore : 지금 날짜와 시간이 전달인자(여기선 future)보다 전(과거)인지 확인하는 메소드
        System.out.println(zonedDateTime.now().isEqual(present)); //true
        // isEqual : 지정한 지역의 현재 날짜와 시간이 local(현재)과 똑같은지 확인하는 메소드
    }
}
