# https://www.samsungsds.com/kr/insights/python-web-frontend-framework.html

Python은 전통적인 서버 프레임워크 언어로 쓰였고, 백엔드 영역에 갇혀있었다.
따라서 프론트엔드(클라이언트 측) 코드를 만들기 위한 용도로 파이썬을 쓰기 시작한 것은 오래된 일이 아니다.
최근 일부 프로젝트에서 파이썬을 자바스크립트로 트랜스파일*하거나 
웹 어셈블리를 통해 프론트엔드에서 파이썬을 실행**하는 방법을 시도했지만, 이 방법은 투박하고 원시적이다.
이 같은 방식 대신에 새로운 파이썬 웹 프레임워크 제품***군을 사용하면 
백엔드에서 프로그래밍방식으로 프론트엔드 코드를 생성****하는
선언적인 파이썬 코드$를 작성할 수 있다.
(= 파이썬 객체를 사용해 HTML 엔티티와 해당 자바스크립트 기반 동작을 기술한 다음, 
클라이언트에 제공될 때 프레임워크가 이런 객체를 자동으로 생성하게끔 만들 수 있다.)

이런 패러다임을 따르는$$ 파이썬용 웹 프레임워크 3가지를 소개한다.
3가지 모두 백엔드 파이썬 코드로 HTML, CSS, 자바스크립트 등 
프론트엔드 코드를 설명할 수 있도록 허용하고,
파이썬 객체 모델을 통해 프론트엔드 객체를 허용$$$할 수 있다.

1. 앤빌
첫 번째 장점: 파이썬만으로 웹/앱 빌드 가능
파이썬 코드를 작성하거나 드래그 앤 드롭 로우코드 툴로
인터랙티브한 자바스크립트 기반 프론트엔드$$$$와 
파이썬 기반 백엔드를 갖춘 완전한 웹 애플리케이션을 만들 수 있다.

앤빌 클라우드 서비스와 오픈소스인 앤빌 런타임을 통해 접근(=이용)할 수 있으며
오픈소스 앤빌 런타임은 시각화 빌드 툴이 있진 않지만
직접 작성한 코드를 사용해 앤빌 애플리케이션을 빌드하고 실행할 수 있다.

앤빌 애플리케이션은 
UI, 
파이썬에서 자바스크립트로 트랜스파일된 클라이언트 측 코드, 
서버 측 파이썬 코드
3가지 요소로 구성된다.

기본적으로 앤빌 사이트의 모든 자바스크립트는 자동으로 생성되지만, 
필요 시 직접 자바스크립트를 작성할 수 있다.
다만 이 때 직접 작성한 자바스크립트 코드는 앤빌이 로드한 몇 가지 자체 자바스크립트와 충돌할 수 있다.
또한 앤빌 자체의 종속 항목 중에는 Bootstrap3 등 오래된 것이 일부 있다.
이는 맞춤형 테마를 만드는 방법으로 문제를 해결할 수 있지만 간단한 해결법은 아니다.



2. 파인콘 Pynecone
웹 스택의 백엔드를 작성하고, 자바스크립트를 쓸 필요 없이 
프로그래밍 방식으로 프론트엔드를 생성하는 두 가지 작업에 
모두 파이썬 코드를 사용한다는 점에서 앤빌과 기반 개념은 같지만, 디자인 툴은 없다.

파인콘 자체는 파이썬과 Node.js 런타임의 장기 지원 버전, 
Bun(번) 자바스크립트 라이브러리 관리자^를 사용한다.
따라서 pip install pynecone을 실행하려면 node.js가 있어야 한다.
또, 파인콘의 스택^^은 윈도우보단 리눅스에 다소 편향되어 있다.
(=윈도우에서 실행이 되긴 하지만 리눅스용 WSL(윈도우 서브 시스템)^^^을 사용하지 않는 한
리눅스만큼 원활하진 않다.)
그러나 일단 설정을 완료하면 제공되는 pc명령을 이용해 가상환경에
새 파인콘 프로젝트 템플릿을 설정하고 실행할 수 있다.

파인콘 애플리케이션의 프론트엔드는 Next.js로 컴파일되며
웹 페이지의 각 구성요소는 파이썬 객체를 사용해 설명된다.^^^^
텍스트 레이아웃이나 양식 처리와 같은 일반적인 요소 뿐만 아니라
플롯, 차트와 같은 데이터 표시 객체, 
알림 및 진행률 표시줄 같은 피드백 컨트롤, 
모델 및 툴팁 같은 오버레이 객체#까지
많은 일반적인 구성요소가 내장되어 있다.
또한, 맞춤형 React 구성요소를 래핑할 수도 있다.##
(데이터 소스 연결을 위해 잘 알려진 'SQL Alchemy' ORM을 래핑하는 데이터 레이어###가 포함된다.)

UI 구성요소를 맞춤 설정하려는 경우에는 CSS 스타일 같은 대부분의 일반적 맞춤 설정을 객체 생성자에 인수로 전달할 수 있다.
이로써 구성요소를 하위 클래스로 만들어 수정할 필요가 없어진다. 
그 외에 맞춤형 HTML이 있지만 
대부분 프로젝트에서는 내장된 요소와 각 옵션의 조합으로 충분하다. 
메모이징 데코레이터####가 내장되어 있으므로 
구성요소를 다시 렌더링할 필요는 없지만, 
캐시의 크기나 수명까지 제어할 수는 없다.

마지막으로, 전체 사이트를 정적 빌드로 내보낼 수 있는 유용한 기능이 있다. 
이는 주로 정적인 사이트를 구축할 때 유용한 기능이며 
파인콘이 프로그래밍 방식의 사이트 생성기 툴로도 유용한 이유다.



3. 저스트파이 Justpy



결론 :
앤빌은 로우코드 및 노코드 인터랙티브 UI 생성 툴을 사용할 수 있다는 점이 큰 장점이고, 
저스트파이는 객체를 만들고 상호 연계하는 방법을 표현하는 간결한 방법을 제공한다. 
파인콘은 리액트 구성요소와 Next.js를 다루기 편리하며, 
생성된 사이트를 정적 HTML로 렌더링할 수 있는 프레임워크다.

*Transfile : 
** 웹 어셈블리를 통해 FE에서 파이썬을 실행 : 
*** Web Framework : 
**** 백엔드에서 프로그래밍방식으로 프론트엔드 코드를 생성 : 
$ 선언적인 파이썬 코드 :
$$ 패러다임을 따르다 : 
$$$ 파이썬 객체 모델을 통해 프론트엔드 객체를 허용 : 
$$$$ 인터랙티브한 프론트엔드 : 
^ 라이브러리 관리자 : 
^^ 00의 스택 : 
^^^ WSL (윈도우 서브 시스템) : 
^^^^ 웹 페이지의 각 구성요소는 파이썬 객체를 사용해 설명된다. : 
# 오버레이 객체 : 
## React 구성요소를 래핑할 수도 있다. : 
### 데이터 레이어 : 
#### 메모이징 데코레이터 : 
