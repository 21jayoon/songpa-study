# 오늘 배운 강의 Today's lecture
# JPA : chapter06 spring-data-jpa

# 1. MAINCONTROLLER UNDER chap06springdatajpa.main.controller
package com.ohgiraffers.chap06springdatajpa.main.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MainController {
    /*스프링 데이터 JPA란?
        Spring 프레임워크에서 JPA를 편리하게 사용할 수 있도록 제공하는 Spring Data 모듈 중 하나이다.
        JPA를 추상화시킨 Repository라는 인터페이스를 사용하고 쿼리메소드(Query Method)를 호출하는 것만으로 손쉽게 SQL문을 생성할 수 있다.
    스프링 데이터 JPA의 특징
        Spring 및 JPA기반의 Repository 구축을 위해 인터페이스와 쿼리메소드를 제공한다.
        Querydsl 쿼리 지원 및 이에 따른 안전한 JPA 쿼리를 처리해 준다.
        pagination을 지원한다.
        Spring Data Jpa를 사용하면 JPA에서 사용했던 기존의
        EntityManagerFactory, EntityManager, EntityTransaction 같은 객체가 필요 없다*/
    @GetMapping(value = {"/", "/main"})
    public String main(){
        return "main/main";
    }
}

# 2. MAIN.HTML UNDER RESOURCES.TEMPLATES.MAIN
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>MAIN</title>
</head>
<body>
    <h1>Panda Restaurant</h1>
    <button onclick="location.href='/menu/8'">Read specific menu</button>
    <button onclick="location.href='/menu/list'">Read All menu</button>
    <button onclick="location.href='/menu/list2'">Read All menu by pageable</button>
    <button onclick="location.href='/menu/querymethod'">Test QueryMethod</button>
</body>
</html>

# 3. MENUCONTROLLER UNDER CHAP06SPRINGDATAJPA.MAIN.MENU.CONTROLLER
package com.ohgiraffers.chap06springdatajpa.main.menu.controller;

import com.ohgiraffers.chap06springdatajpa.common.Pagenation;
import com.ohgiraffers.chap06springdatajpa.common.PagingButton;
import com.ohgiraffers.chap06springdatajpa.main.menu.dto.MenuDTO;
import com.ohgiraffers.chap06springdatajpa.main.menu.service.MenuService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.xml.stream.events.DTD;
import java.util.List;

@Controller
@RequestMapping("/menu")
@RequiredArgsConstructor
@Slf4j // Logger 객체 선언을 위한 어노테이션 250624 11:02
public class MenuController {
    private final MenuService menuService;

    @GetMapping("/{menuCode}")
    public String findMenuByCode(@PathVariable int menuCode, Model model){
        //반환받을 타입 자체가 엔티티면 조금 위험하다. >> 엔티티가 아닌 타입의 객체로 받아야함
        // 따라서 DTO 필요 -> MenuDTO 만들러 ㄱㄱ 9:33

        MenuDTO resultMenu = menuService.findMenuByMenuCode(menuCode);
        model.addAttribute("menu", resultMenu);

        return "menu/detail";
    }

    @GetMapping("/list")
    public String findAllMenu(Model model){
        //1. make function - please remind it'll be a list this time.
        List<MenuDTO> menuList = menuService.findMenuList();

        //2. Put that returned value into the model.
        model.addAttribute("menuList", menuList);

        return "menu/list";
    }

    @GetMapping("/list2")
    public String findMenuPage(Model model, @PageableDefault Pageable pageable){
        /*페이징 처리 이전*/
        //List<MenuDTO> menuList = menuService.findMenuList();
        //model.addAttribute("menuList", menuList);

        /*페이징 처리 이후*/
        log.info("pageable: {}", pageable);

        Page<MenuDTO> menuList = menuService.findMenuList2(pageable);
        // menuList => page정보도 갖고 있다

        //아래 log.info 무더기 코드 적고
        // 크롬에서 .../list2?page=1&size=5 재실행했을 때 console값들 250624 11:26
        log.info("{}", menuList.getContent());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : [MenuDTO(menuCode=321, menuName=스파게티 돈가스, menuPrice=30000, categoryCode=321, orderableStatus=Y), MenuDTO(menuCode=124, menuName=meatball bibimbap, menuPrice=15000, categoryCode=13, orderableStatus=Y), MenuDTO(menuCode=123, menuName=돈까스 스파게티, menuPrice=15000, categoryCode=3, orderableStatus=Y), MenuDTO(menuCode=20, menuName=마라깐쇼한라봉, menuPrice=22000, categoryCode=5, orderableStatus=N), MenuDTO(menuCode=19, menuName=까나리코코넛쥬스, menuPrice=9000, categoryCode=9, orderableStatus=Y)]
        //MenuDTO 5개 출력됨
        log.info("{}", menuList.getTotalPages());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
        log.info("{}", menuList.getTotalElements());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 23
        log.info("{}", menuList.getSize());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
        log.info("{}", menuList.getNumberOfElements());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
        log.info("{}", menuList.isFirst());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : true
        log.info("{}", menuList.isLast());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : false
        log.info("{}", menuList.getSort());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : menuCode: DESC
        log.info("{}", menuList.getNumber());
        //2025-06-24T11:11:48.481+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 0

        PagingButton paging = Pagenation.getPagingButtonInfo(menuList);   //11:35
        model.addAttribute("paging", paging);   //11:35
        model.addAttribute("menuList", menuList);
        //list2.html에 페이지 버튼 만들어준다.   11:36

        return "menu/list2";
//      아직 list2에 출력값 뿌려주기 전 실행했을 때 console값:   .../list2
//      2025-06-24T11:04:22.342+09:00  INFO 10264 --- [nio-8080-exec-5] c.o.c.m.menu.controller.MenuController   : pageable: Page request [number: 0, size 10, sort: UNSORTED]
//      URL에 .../list2?page=1&size=5 로 page값과 pagesize값을 넣어줬을 때 console 출력:   250624 11:15
//      2025-06-24T11:11:48.472+09:00  INFO 25928 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : pageable: Page request [number: 1, size 5, sort: UNSORTED]

        /*코드 완성한 뒤 .../list2?page=1&size=5 재실행했을 때 console 값   11:30
        * Hibernate:
    select
        m1_0.menu_code,
        m1_0.category_code,
        m1_0.menu_name,
        m1_0.menu_price,
        m1_0.orderable_status
    from
        tbl_menu m1_0
    order by
        m1_0.menu_code desc
    limit
        ?, ?
Hibernate:
    select
        count(m1_0.menu_code)
    from
        tbl_menu m1_0
2025-06-24T11:29:54.224+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : [MenuDTO(menuCode=321, menuName=스파게티 돈가스, menuPrice=30000, categoryCode=321, orderableStatus=Y), MenuDTO(menuCode=124, menuName=meatball bibimbap, menuPrice=15000, categoryCode=13, orderableStatus=Y), MenuDTO(menuCode=123, menuName=돈까스 스파게티, menuPrice=15000, categoryCode=3, orderableStatus=Y), MenuDTO(menuCode=20, menuName=마라깐쇼한라봉, menuPrice=22000, categoryCode=5, orderableStatus=N), MenuDTO(menuCode=19, menuName=까나리코코넛쥬스, menuPrice=9000, categoryCode=9, orderableStatus=Y)]
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 23
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 5
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : true
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : false
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : menuCode: DESC
2025-06-24T11:29:54.225+09:00  INFO 29580 --- [nio-8080-exec-3] c.o.c.m.menu.controller.MenuController   : 0*/

        //common package 아래에 PagingButton 생성  11:31
    }

    @GetMapping("/querymethod")
    public void querymethodPage(){//반환형 : void}

    @GetMapping("/search")
    public String findByMenuPrice(@RequestParam Integer menuPrice, Model model){
        List<MenuDTO> menuList = menuService.findMenuByMenuPrice(menuPrice);
        model.addAttribute("menuList", menuList);
        model.addAttribute("menuPrice", menuPrice); // Pass menuPrice to the view(searchResult)
        return "menu/searchResult";
    }
}

# 4. DETAIL.HTML UNDER RESOURCES.TEMPLATES.MENU
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>MENU DETAIL</title>
</head>
<body>
<!--menu 정보 뿌려주는 목적의 코드-->
  <h1>Search Specific Menu</h1>
    <table>
      <tr>
        <!--use thymeleaf syntax-->
        <td th:text="${menu.menuCode}"></td>
        <td th:text="${menu.menuName}"></td>
        <td th:text="${menu.menuPrice}"></td>
        <td th:text="${menu.categoryCode}"></td>
        <td th:text="${menu.orderableStatus}"></td>
      </tr>
    </table>
</body>
</html>

# 5. MENUSERVICE UNDER CHAP06SPRINGDATAJPA.MAIN.MENU.SERVICE
package com.ohgiraffers.chap06springdatajpa.main.menu.service;

import com.ohgiraffers.chap06springdatajpa.main.menu.dto.MenuDTO;
import com.ohgiraffers.chap06springdatajpa.main.menu.entity.Menu;
import com.ohgiraffers.chap06springdatajpa.main.menu.repository.MenuRepository;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
// final 붙은 필드만 골라서 생성자를 자동 생성해줌 -> 의존성을 안정적으로 주입하고 코드를 간결하게 유지해줌
public class MenuService {
    private final MenuRepository menuRepository;
    private final ModelMapper modelMapper;

    /*findById (Repository에서 제공해주는 메소드) 이용하는 방법*/
    public MenuDTO findMenuByMenuCode(int menuCode){
        Menu foundMenu = menuRepository.findById(menuCode).orElseThrow(IllegalAccessError::new);
        // findByID()는 Optional<T>이란 타입으로 감싸져있다. 이 Optional<T>은 NullPointException을 방지하기 위해 있다.
        // .orElseThrow(IllegalAccessError::new); -> 개발자 헷갈리게 하지 말고 정해진 오류 IllegalAccessError를 발생시켜라

        // Menu entity를 DTO로 바꿔서 반환해야한다.
        // 방법1. Menu에 있는 값들을 하나하나 DTO에 옮겨담는다 -> 코드가 너무 많아지고 불편함
        // -> 방법2. DTO에 하나씩 담아주는 library 사용
        /*강의자료 PDF: Menu Entity에 있는 값을 getter 메소드로 꺼내서 MenuDTO 객체를 생성한 뒤
        setter 메소드로 설정하는 과정이 필요하다. 해당 과정을 직접 작성하는 것은 번거로우므로 ModelMapper 라이브러리를 이용한다.*/
        //-> Add  implementation 'org.modelmapper:modelmapper:3.1.1'  into the build.gradle
        //modelMappper을 사용하기 위해 필요한 Bean 설정파일 클래스를 하나 생성한다. config package > class BeanConfig

        return modelMapper.map(foundMenu, MenuDTO.class);
        // foundMenu(Menu entity)에 있던 필드 중 MenuDTO에 있는 필드명과 똑같은 이름을 가진 필드들이 MenuDTO로 옮겨간다.
        // (ModelMapper library를 사용했기 때문에 가능한 일)
    }

    public List<MenuDTO> findMenuList() {
        // JPARepository에서 반환받는 건 entity일 것.
        List<Menu> menuList = menuRepository.findAll(Sort.by("menuCode").descending());
        //Sort.by("menuCode") => menuCode 오름차순(1 2 3...) 순서대로 정렬해서 보겠습니다.
        //(Sort.by("menuCode").descending()) => menuCode로 정렬해서, 내림차순(10 9 8...1)으로 보겠슴다

        return menuList.stream().map(menu -> modelMapper.map(menu, MenuDTO.class)).toList();
    }

    /*Apply "paging" concept : findAll - Pageable*/
    public Page<MenuDTO> findMenuList2(Pageable pageable) {
        // Pageable -> Spring data domain에서 제공하는 메소드
        // JPARepository에서 반환받는 건 entity일 것. -> List<Menu> O   List<MenuDTO> X

        //1. pageable 객체 만들기 : 전달하는 정보 => pagenumber, pagesize, sort 기준
        pageable = PageRequest.of(
                pageable.getPageNumber() <= 0 ? 0 : pageable.getPageNumber() - 1,
                // (삼항연산자) pageNumber가 0보다 작다면 0을 반환하고 아니라면(0보다 크다면) getPageNumber에서 -1을 해서 반환한다.
                // pageNumber와 size는 클라이언트에게 page=1&size=5 이런 식으로 값을 받아올 것이다.
                pageable.getPageSize(), // pagesize는 client에게 받은 값을 그대로 출력할 것이다.
                Sort.by("menuCode").descending()
                //(Sort.by("menuCode").descending()) => menuCode로 정렬해서, 내림차순(10 9 8...1)으로 보겠슴다
        );
        Page<Menu> menuPage = menuRepository.findAll(pageable);
        //findAll(Pageable pageable) -> 반환타입 Page<Menu> (.findAl까지 쳤을 때 나오는 보기 예시에서 이렇게 나옴)
        return menuPage.map(menu -> modelMapper.map(menu, MenuDTO.class));
        // List<MenuDTO>라고 되어있어서 윗 코드에 빨간 줄이 떴었다.
        // ALT+ENTER 누르니 (List<MenuDTO>)로 다운캐스팅하는 등의 선택지가 떴는데
        // return menuPage.map(menu -> modelMapper.map(menu, MenuDTO.class)).getContent;로 바꾸니 빨간 줄 해결은 됐었다.
        // BUT... 근본 원인 해결 : 메소드 선언부에 public List<MenuDTO>로 되어있던 걸 Page<MenuDTO>로 바꾸니 해결되었다.
    }

    /* Test Query Method */
    public List<MenuDTO> findMenuByMenuPrice(Integer menuPrice) {
        List<Menu> menuList = menuRepository.findByMenuPriceGreaterThanOrderByMenuPrice(menuPrice);
        //<Menu>는 entity, DTO는 DTO. menuList(entity)를 DTO로 바꾸는 단계 필요.
        return menuList.stream()
                .map(menu -> modelMapper.map(menu, MenuDTO.class))
                .toList();
    }
}

# 6. MENUDTO UNDER ... .MAIN.MENU.DTO
package com.ohgiraffers.chap06springdatajpa.main.menu.dto;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@ToString
public class MenuDTO {
    private int menuCode;
    private String menuName;
    private int menuPrice;
    private int categoryCode;
    private String orderableStatus;

    //Lombok을 쓰고 있기 때문에 @Getter  @Setter @ToString을 붙여 코드를 대체한다.
    //Lombok어노테이션(@Getter, @Setter, @ToString)으로 코드의 중복과 수작업을 줄였다.
    //(="Lombok 어노테이션을 사용해 반복적인 getter/setter/toString 메소드의 보일러플레이트 코드 작성을 대체했다.",
    //"Lombok을 도입함으로써 코드의 중복을 줄이고 개발 효율을 높였다.",
    //"수동으로 작성해야 했던 getter/setter/toString 메소드 생성을 어노테이션 기반 자동화로 코드의 유지보수성을 높였다.")
}

# 7. BEANCONFIG UNDER ... .CONFIG
package com.ohgiraffers.chap06springdatajpa.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class BeanConfig {
    @Bean
    public ModelMapper modelMapper() {
    /* setter 메소드 미사용 시 ModelMapper가
     * private 필드에 접근할 수 있도록 설정 */
        ModelMapper modelMapper = new ModelMapper();
        modelMapper.getConfiguration()
                .setFieldAccessLevel(
                        org.modelmapper.config.Configuration.AccessLevel.PRIVATE
                )
                //.setFieldAccessLevel(org.modelmapper.config.Configuration.AccessLevel.PRIVATE)
                // ->PRIVATE한 필드도 Access 가능하도록 만듦
                .setFieldMatchingEnabled(true); // 그리고 "필드 이름이 같으면 자동으로 매칭하는 설정"을 넣어줌
        return modelMapper;
    }
}

# 8. MENU (ENTITY CLASS) UNDER ... .MAIN.MENU.ENTITY
package com.ohgiraffers.chap06springdatajpa.main.menu.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "tbl_menu")
@Getter
/* @Setter 지양(Setter 메소드 작성 지양) -> 객체를 언제든지 변경할 수 있으면 객체의 안전성 보장 X
* 값 변경이 필요한 경우에는 해당 기능을 위한 메소드를 별도로 생성 */
@NoArgsConstructor(access = AccessLevel.PROTECTED)
//@NoArgsConstructor : 기본 생성자를 만들어주세요
// access = AccessLevel.PROTECTED  -> 상속받은 클래스 내에서만 사용 가능
/* @AllArgsConstructor 지양 */
/*toString 유의점 : 연관관계 매핑을 양방향으로 맺고 있는 경우
   toString의 중복사용(양 entity 내에 있는 toString 간의 서로 호출)이 발생할 수 있다
 따라서 @ToString : 사용 가능하나 연관 관계 매핑 필드는 제거하고 사용해야 한다. */
public class Menu {
    //JPA에서의 Entity란 DB에 있는 내용을 그대로 필드로 작성하고
    // 엔티티 내에서 크게 변경이 일어나지 않는 조건으로 사용해야한다
    // 그래서 entity 내에서 setter는 만들어놓는 걸 지양하고 있다.
    @Id
    private int menuCode;

    private String menuName;
    private int menuPrice;
    private int categoryCode;
    private String orderableStatus;
}

# 9. MENUREPOSITORY (INTERFACE) UNDER ... .MAIN.MENU.REPOSITORY 
package com.ohgiraffers.chap06springdatajpa.main.menu.repository;

import com.ohgiraffers.chap06springdatajpa.main.menu.entity.Menu;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

/*JpaRepository<다루려는 엔티티, (해당엔티티의)Id(PK)타입>*/
public interface MenuRepository extends JpaRepository<Menu, Integer> {
    //내가 구현하고자 하는 어떤 것이 있을 때 관련한 Repository를 만드는데,
    //이 때 "'JpaRepository'를 상속받고" 제네릭을 작성해야한다.

    /*Querymethod의 네이밍 룰 확인 : parameter로 전달받은 가격을 초과하는 메뉴 목록 조회*/
    List<Menu> findByMenuPriceGreaterThan(Integer menuPrice);
    // List<Menu> findByMenuPrice(Integer menuPrice); -> 이렇게만 작성할 경우: where menu_price=? 의 상태가 됨. 
    // e.g. menuPrice = 9000 -> menuPrice가 "딱!" 9000원인 메뉴만 나올 것.

    /*Querymethod의 네이밍 룰 확인 : parameter로 전달받은 가격을 초과하는 메뉴 목록 가격순으로 조회*/
    List<Menu> findByMenuPriceGreaterThanOrderByMenuPrice(Integer menuPrice);
    //Service에서 findByMenuPriceGreaterThan였던 걸 findByMenuPriceGreaterThanOrderByMenuPrice로 바꾼다.   12:09
}

# 10. LIST.HTML UNDER RESOURCES.TEMPLATES.MENU
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>MENU LIST</title>
</head>
<body>
<!--menuList(findAllMenu) 뿌려주기-->
  <h1>Check All the menu by descending</h1>
    <table>
      <tr th:each="menu: ${menuList}">
       <td th:text="${menu.menuCode}"></td>
       <td th:text="${menu.menuName}"></td>
       <td th:text="${menu.menuPrice}"></td>
       <td th:text="${menu.categoryCode}"></td>
       <td th:text="${menu.orderableStatus}"></td>
      </tr>
    </table>
<!--There was an unexpected error (type=Internal Server Error, status=500).
An error happened during template parsing (template: "class path resource [templates/menu/list.html]")
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/menu/list.html]")
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "menu.menuCode" (template: "menu/list" - line 13, col 12)
Solve -> Replace </tr> under the last </td> to wrap all the <td> tags.
<tr th:each="menu: ${menuList}"></tr> (BEFORE)
-> <tr th:each="menu: ${menuList}"> ...... </td></tr> (AFTER)-->

</body>
</html>

# 11. LIST2.HTML UNDER RESOURCES.TEMPLATES.MENU
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>MENULIST2-PAGEABLE</title>
</head>
<body>
    <h1>Check menuList with Pageable</h1>
<!--list.html에 있는 <table></table> 복붙-->
    <table>
        <tr th:each="menu: ${menuList}">
            <td th:text="${menu.menuCode}"></td>
            <td th:text="${menu.menuName}"></td>
            <td th:text="${menu.menuPrice}"></td>
            <td th:text="${menu.categoryCode}"></td>
            <td th:text="${menu.orderableStatus}"></td>
        </tr>
    </table>
<!--paging 버튼 추가    11:37-->
    <div id="paging">
        <!-- 맨 앞으로 이동 -->
        <button th:onclick="|location.href='@{/menu/list2(page=${paging.startPage})}'|">
            <<
        </button>
        <!-- 이전 페이지로 이동 -->
        <button th:onclick="|location.href='@{/menu/list2(page=${paging.currentPage - 1})}'|"
                th:disabled="${menuList.first}">
            <
        </button>
        <!-- 숫자 버튼 -->
        <th:block th:each="page : ${#numbers.sequence(paging.startPage, paging.endPage)}">
            <button th:onclick="|location.href='@{/menu/list2(page=${page})}'|"
                    th:text="${page}"
                    th:disabled="${paging.currentPage eq page}">
            </button>
        </th:block>
        <!-- 다음 페이지로 이동 -->
        <button th:onclick="|location.href='@{/menu/list2(page=${paging.currentPage + 1})}'|"
                th:disabled="${menuList.last}">
            >
        </button>
        <!-- 맨 끝으로 이동 -->
        <button th:onclick="|location.href='@{/menu/list2(page=${paging.endPage})}'|">
            >>
        </button>
    </div>
    <!--pagebutton 2나 3 누르면 자꾸 전체 메뉴 목록 뜨면서 버튼 사라지길래 왜 그러지 했음
    1. https://www.notion.so/ohgiraffers/Spring-Data-JPA-215649136c11819b8ab8c49dc8efc452 에서
    페이징 버튼 부분 다시 복붙해옴 (적용했던 건 페이징 버튼2인데 거기서 띄어쓰기 등의 차이 때문에 오류가 생긴 건가 싶어서)
    -> 차이 없음
    2. 코파일럿한테 물어보려다가 갑자기 든 생각! 난 list.html을 재사용하지 않고 따로 새로운 버튼과 list2.html을 만들어서 pageable을 사용함.
    위 코드를 다시 보니 전부 '@{/menu/list(어쩌구저쩌구)}'라고 되어있었음 >> list로 directing해주니 당연히 버튼 갑자기 사라지고 전체 목록만 나오지! 깨달음
    -> .../list2(어쩌구)}로 전부 바꿈. 원래 목적대로 2번 페이지 버튼이나 3번 페이지 버튼 누르면 다음페이지로 넘어감   11:47-->
</body>
</html>

# 12. QUERYMETHOD.HTML UNDER RESOURCES.TEMPLATES.MENU
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>QUERY METHOD</title>
</head>
<body>
  <h1>Retrive menu list exceeding input value</h1>
  <form action="/menu/search">
      <input type="number" name="menuPrice">원을 초과하는 메뉴 목록 조회
      <input type="submit">
  </form>
</body>
</html>

# 13. PAGINGBUTTON UNDER ... .COMMON
package com.ohgiraffers.chap06springdatajpa.common;
public class PagingButton {
    private int currentPage;
    private int startPage;
    private int endPage;
    public PagingButton() {
    }
    public PagingButton(int currentPage, int startPage, int endPage) {
        this.currentPage = currentPage;
        this.startPage = startPage;
        this.endPage = endPage;
    }
    public int getCurrentPage() {
        return currentPage;
    }
    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }
    public int getStartPage() {
        return startPage;
    }
    public void setStartPage(int startPage) {
        this.startPage = startPage;
    }
    public int getEndPage() {
        return endPage;
    }
    public void setEndPage(int endPage) {
        this.endPage = endPage;
    }
    @Override
    public String toString() {
        return "PagingButton{" +
                "currentPage=" + currentPage +
                ", startPage=" + startPage +
                ", endPage=" + endPage +
                '}';
    }
    //같은 common 패키지 하위에 class Pagenation 생성  11:33
}

# 14. PAGENATION
package com.ohgiraffers.chap06springdatajpa.common;

import org.springframework.data.domain.Page;

//pagingBar를 계산하기 위해 존재하는 class
//pagenation 정보를 MenuController에 추가해야한다.  11:34
public class Pagenation {
    public static PagingButton getPagingButtonInfo(Page page) {
        int currentPage = page.getNumber() + 1;
        int defaultButtonCount = 10;
        int startPage
                = (int) (Math.ceil((double) currentPage / defaultButtonCount) - 1)
                * defaultButtonCount + 1;
        int endPage = startPage + defaultButtonCount - 1;
        if(page.getTotalPages() < endPage) endPage = page.getTotalPages();
        if(page.getTotalPages() == 0 && endPage == 0) endPage = startPage;
        return new PagingButton(currentPage, startPage, endPage);
    }
}

# 15. SEARCHRESULT.HTML UNDER RESOURCES.TEMPLATES.MENU
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SEARCH RESULT</title>
</head>
<body>
<!--<h1>List of surpassed 0000WON</h1>
querymethod.html에서 entered input value인 menuPrice를 searchResult.html에서도 받아오고 싶다면
일단 Controller(backend)에서 model.addAttribute("menuPrice", menuPrice); 로
menuPrice가 searchResult로 넘어갈 수 있도록 model.addAttribute로 값을 담아준 다음
(^중요! Controller에서 값 안 넘겨주면 html에서 뭘 해도 menuPrice는 나올 수 없음^)
thymeleaf 문법으로 <h1 th:text="${menuPrice} + '원 초과 메뉴 목록'"></h1> 등의 형태로
menuPrice value를 받아온다.   12:19-->
    <h1 th:text="${menuPrice} + '원 초과 메뉴 목록'"></h1>
    <table>
        <tr th:each="menu: ${menuList}">
            <td th:text="${menu.menuCode}"></td>
            <td th:text="${menu.menuName}"></td>
            <td th:text="${menu.menuPrice}"></td>
            <td th:text="${menu.categoryCode}"></td>
            <td th:text="${menu.orderableStatus}"></td>
        </tr>
    </table>
</body>
</html>

# 16. APPLICTION.YML UNDER RESOURCES
spring:
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/menudb
        username: ohgiraffers
        password: ohgiraffers
    jpa:
        show-sql: true
        database: mysql
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
              format_sql: true
