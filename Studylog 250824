# 1. Reviewing
# https://github.com/21jayoon/songpa-study/blob/main/Studylog%20250705-06
인증(Authentication)과 인가(Authorization)

1. 인증 (Authentication)
- 사용자의 신원을 확인하는 과정. (e.g. 로그인하여 계정 정보를 확인하는 것)
- Authentication is the process that identifying the user's identity.

인가 (Authorization)
- 인증된 사용자authenticated user가 시스템 리소스에 접근하거나 특정 작업을 수행할 수 있도록 "권한을 부여"하는 프로세스
(e.g. 특정 파일에 대한 읽기/쓰기 권한을 부여하는 것)
- Authorization is the process that give an authority(권한) to the authenticated user.
After authorization, the user can access to the system resource or some particular task by their authority.

인증(Authentication)이 '누구인가'를 확인하는 과정이라면, 인가는 '무엇을 할 수 있는가'를 결정하는 과정이다.
- 지금 접속하는 너는 누구인가? Who are you? -> 인증 Authentication
- role A or role B는 각각 무엇을 할 수 있는가? What you can do? -> 인가 Authorization


인가의 중요성 The importance of authorization:
인가는 "시스템 보안을 유지"하고 "무단 접근을 방지"하는 데 "필수"적이다.

인가 방식 How to authorize:
다양한 인가 방식이 있으며, 접근 제어 목록 (ACL), 역할 기반 접근 제어 (RBAC) 등이 대표적이다.
-> I choose the authorization protocol with a RBAC(역할 기반 접근 제어).
RBAC is form of an access control

Reference : https://www.ibm.com/kr-ko/think/topics/rbac
https://security.stackexchange.com/questions/63518/mac-vs-dac-vs-rbac

예시:
 - 은행 웹사이트에서 로그인을 하여 본인 인증을 받은 후(인증), 계좌 조회, 이체 등의 작업을 수행(인가)할 수 있다.
여기서 로그인 과정은 인증, 계좌 조회 및 이체 권한 부여는 인가에 해당한다. 
 - 파일 시스템에서 특정 사용자는 파일에 대한 읽기 권한만 갖고, 다른 사용자는 읽기/쓰기 권한을 가질 수 있다.

결론:
인가(Authorization)는 인증된 사용자가 
시스템 리소스에 대한 
적절한 수준의 접근 권한을 갖도록 보장하는 중요한 보안 메커니즘이다.



# 세션, 토큰, JWT에 대한 이해
https://daunje0.tistory.com/177
https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-JWTjson-web-token-%EB%9E%80-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC
https://f-lab.kr/insight/jwt-vs-session-authentication-20240823

JWT (JSON Web Token)와 세션 기반 인증은 모두 사용자 인증을 위해 사용되지만, 몇 가지 주요 차이점이 있다. 
세션 기반 인증은 서버에서 사용자 정보를 
세션에 저장하고, 클라이언트는 세션 ID를 통해 서버와 통신한다.

반면, JWT는 클라이언트가 토큰을 저장하고, 
모든 요청에 토큰을 포함하여 서버에 전송한다. 

JWT는 상태 정보를 서버에 저장하지 않아 
서버 부하를 줄일 수 있지만, 
토큰 유효성 검증을 위해 매번 서버에서 토큰을 확인해야한다. 



# 세션 기반 인증:
사용자 정보 저장 위치: 서버의 세션 저장소

통신 방식: 클라이언트는
세션 ID를 서버에 전달, 
서버는 세션 ID를 통해 사용자 정보를 확인.

장점:
서버에서 사용자 정보를 관리하므로 보안성이 높다.
세션이 만료되면 자동으로 로그아웃 처리된다.

단점:
서버에 세션 정보를 저장해야 하므로 서버 부하가 발생 가능.
분산 환경에서 세션 관리가 복잡할 수 있다.


# JWT (JSON Web Token) 인증:
사용자 정보 저장 위치: 클라이언트가 저장하는 JWT에 포함됨.

통신 방식: 클라이언트는
JWT를 서버에 전달하고, 서버는 JWT의 유효성을 검증한다.

장점:
서버에 상태 정보를 저장하지 않아 서버 부하가 적다.
분산 환경에서 세션 관리 없이 인증이 가능하다.
확장성이 좋다.

단점:
JWT가 탈취될 경우 보안 위험이 있다.
JWT의 만료 시간을 잘 설정해야 한다.
서버에서 매번 JWT의 유효성을 검증해야한다.**

** 이러한 검증 작업은 단순 문자열 비교보다
훨씬 복잡한 암호학적 연산이기 때문에 CPU 자원을 소모한다.
이말인 즉슨, 
요청 수가 많아질수록 → 서버는 계속 JWT를 검증해야 해서
→ 성능에 부담이 될 수 있으며
-> 일반 세션 ID보다 덩치가 큰 JWT 특성 상
매 요청마다 큰 토큰이 헤더에 붙어 전송되면
네트워크 비용도 늘어난다.


어떤 인증 방식을 선택해야 할까?
어떤 인증 방식을 선택할지는 프로젝트의 요구사항에 따라 달라진다.
# https://f-lab.kr/insight/jwt-vs-session-authentication-20240823

보안이 중요한 경우: 
세션 기반 인증이 더 안전할 수 있다.
확장성이 중요한 경우:
JWT 인증이 더 유리함.

간단한 프로젝트: 세션 기반 인증이 더 간단하게 구현할 수 있다.
복잡한 프로젝트: JWT 인증이 더 유연하게 대처할 수 있다.

최근에는 JWT 인증 방식이 많이 사용되는 추세임.
JWT는 특히 모바일 앱, API 서버 등에서 많이 사용되며, 
마이크로서비스 아키텍처에서도 유용.
하지만, JWT의 보안 취약점을 고려하여
안전한 JWT 사용 방법을 숙지해야 한다.
