# 250905 Python Study - Inheritance 상속

프로그래밍을 하다보면 각 class에서 비슷한 변수나 함수를 중복 사용하는 경우가 생기고, 현재의 클래스를 변형하지 않는 상태에서 다른 기능을 추가해야하는 경우도 있다. 이 경우 상속을 사용하면 코드를 좀 더 효율적으로 작성할 수 있다.

다음과 같은 형태로 사용한다.
class CLASSNAME ( INHERITING CLASS NAME):
  code

상속은 하나의 클래스만 받을 수 있다.

- 상속과 생성자 관계
부모 클래스에만 생성자가 있을 경우에는
객체 생성 시 부모 클래스의 생성자Constructor가 실행됨.

class Goods:
  def __init__(self):
    print("The constructor of the class 'Goods'")

class Sale_goods(Goods):
  pass

sale_cola = Sale_goods()

# Result:
# The constructor of the class 'Goods'


# 부모 클래스(여기선 Goods)와 자식 클래스(여기선 Sale_goods) 모두 생성자가 있을 때는
# 부모 클래스의 생성자는 무시된다.
# 자식 클래스의 생성자만 실행된다. 
class Goods:
  def __init__(self):
    print("The constructor of the class 'Goods'")

class Sale_goods(Goods):
  def __init__(self):
    print("The constructor of the class Sale_goods")
  pass

sale_cola = Sale_goods()

# Result:
#The constructor of the class Sale_goods


부모 클래스의 constructor(생성자)를 호출해야하는 경우
자식 클래스에서 super()를 사용해 부모 클래스의 생성자를 호출할 수 있다.
* super? : 자식클래스에서 상속받은 부모 클래스를 호출할 때 사용하는 함수.
다음과 같이 사용함.
super().부모클래스함수

class Goods:
  def __init__(self, name):
    self.name = name
    print(self.name)
    print('Goods 클래스 생성자')

class Sale_goods(Goods):
  def __init__(self, name):
    super().__init__(name)
    print("Sale_goods 클래스 생성자")
  pass

sale_cola = Sale_goods('콜라')

# Result:
#콜라
#Goods 클래스 생성자
#Sale_goods 클래스 생성자
