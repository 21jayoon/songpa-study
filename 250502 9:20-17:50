# Summary of today's lecture
# 1) 사용자 정의의 자료형을 이해할 수 있다. Understand user-defined (data) type
# Chap06-secton01
public static void main(String[] args) {
        /* 클래스가 무엇인지 이해하고 작성할 수 있다.
        * 지금까지 자바에서 제공되는 자료들을 취급하는 자료형에 대해 학습했다.
        * 이제 조금 더 복잡한 자료를 취급할 수 있는 방법을 배워보자
        * 우선 지금까지 배운 내용을 갖고 값을 저장하고 출력해본다.*/

        /*1. 변수를 이용한 회원 데이터 관리*/
        String id = "user01";
        String name = "홍길동";
        int age = 20;
        char gender = '남';
        String[] hobby = {"축구", "bowling", "tennis"};

        System.out.println("id = " + id); // id = user01
        System.out.println("name = " + name); // name = 홍길동
        System.out.println("age = " + age); // age = 20
        System.out.println("gender = " + gender); // gender = 남
        for(int i = 0; i < hobby.length; i++) {
            System.out.print(hobby[i] + " "); // 축구 bowling tennis
        }
        System.out.println();

        /*2.사용자 정의의 자료형 사용하기
        * 2-1. 변수 선언 및 객체 생성
        * 자료형 변수명 = new 클래스명(); <-객체를 생성하는 구문이다.
        * 사용자 정의의 자료형인 클래스를 이용하기 위해서는 new 연산자로 heap에 할당을 해야 한다.
        * 객체를 생성하게 되면 클래스에 정의한 필드와 메소드 대로 객체(instance)가 생성된다.
        * 위의 회원 정보들을 연속된 메모리 주소에서 사용하도록 heap에 공간을 만들어보자.
        * */
        Member member = new Member();
        
        /*2-2.생성된 인스턴스의 초기 값 확인하기
        * 이렇게 객체를 생성하고 나면 서로 다른 자료형들을 하나의 member라는 이름으로
        * 관리할 수 있도록 공간을 생성한 것이다.
        * heap에 생성되기 때문에 jvm 기본값으로 초기화된다.*/

        /*필드에 접근하기 위해서는 레퍼런스변수명, 필드명으로 접근한다.
        * '.'은 참조연산자라고 하는데, 레퍼런스 변수가 참고하고 있는 주소로 접근한다는 의미를 가진다.
        * 각 공간은 필드명으로 접근한다. (배열은 인덱스로 접근, 객체는 필드명으로 접근한다.*/
        System.out.println(member.id);  //null
        System.out.println(member.name);  //null
        System.out.println(member.age);  //0
        System.out.println(member.gender);  // \\u0000(문자의 기본값)
        System.out.println(member.hobby);  //null

        /*2-3.필드에 접근해서 변수 사용하듯 사용하기*/
        member.id = "user01";
        member.pwd = "pass01";
        member.name = "Gildong-Hong";
        member.age = 20;
        member.gender = '남';
        member.hobby = new String[] {"축구", "볼링", "테니스"};

        System.out.println(member.id); //user01
        System.out.println(member.name); //Gildong-Hong
        System.out.println(member.age); //20
        System.out.println(member.gender);  //남
        System.out.println("hobby : ");  // hobby :
        for(int i = 0; i < member.hobby.length; i++) {
            System.out.print(member.hobby[i] + " ");  //축구 볼링 테니스
        }
        System.out.println();
    }

# 2) 캡슐화를 적용하지 않는 경우의 문제점
# (= field 제한하지 않고 직접 접근하는 경우 발생가능한 문제점)
# 1. 필드에 올바르지 않은 값이 들어가도 통제가 불가능하다
# 2. pb2-Monster.java에서 String name -> String kinds로 변경했기 때문에
# 직접 name필드에 접근하는 코드(eg.monster1.name = "***")는 전부 컴파일 에러를 발생시킨다
# 즉, Monster class의 일부를 수정한 것뿐인데 사용하는 곳에서는 전부 함께 수정을 해야 하는 부담이 생긴 것이다.
# 이것은 유지보수에 악영향을 미친다.

#캡슐화 적용 X일 때 예시
  Monster monster2= new Monster();
  monster2.name = "드라큘라";  // 직접 접근
  monster2.hp = -299;  //직접 접근
  System.out.println("monster2.name = " + monster2.name);  // monster2.name = 드라큘라
  System.out.println("monster2.hp = " + monster2.hp);  // monster2.hp = -299
  // class Monster에서 0이나 음수값이 나오면 프린트하기로 했던 코드가 실행되지 않음을 볼 수 있음

# public 메소드를 이용하여 필드에 간접 접근
  Monster monster1 = new Monster();
  monster1.setInfo("드라큘라");
  monster1.setHp(100);
  System.out.println(monster1.getInfo()); // 몬스터의 이름은 드라큘라이고, 체력은 100입니다.

public void setHp(int hp) {
       if(hp>0) {
           this.hp = hp;
       } else {
           this.hp = 0;
       }
   }
public String getInfo() {
       return "몬스터의 이름은 " + this.name + "이고, 체력은 " + this.hp + "입니다.";
   }

# 3) 접근제한자를 이해하고 캡슐화를 적용하여 클래스를 작성할 수 있다.
public static void main(String[] args) {
        /*접근제한자에 대해 이해하고 직접 필드에 접근하지 못하게 강제화 할 수 있다. */
        /* 1. private 필드에 직접 접근할 때 compile error 발생 확인 */
        Monster monster1 = new Monster();
//        monster1.kinds = "프랑켄슈타인"; //error: 'kinds' has private access
//        monster1.hp = 200; // error: 'hp' has private access

        /* 선언한 필드대로 공간은 생성되어 있지만 직접 접근하지 못하고
         *  public으로 접근을 허용한 메소드만 이용할 수 있도록 해 놓은 것이다.
         *  이것을 캡슐화 라고 한다.
         * */

        /* 2. public 메소드를 이용하여 필드에 간접 접근 */
        monster1.setKinds("프랑켄슈타인");
        monster1.setHp(200);

        System.out.println(monster1.getInfo()); // 몬스터의 종류는 프랑켄슈타인이고, 체력은 200입니다.
        //setKinds가 Monster.java에서 접근을 허용한 public 메소드이기 때문에 접근과 출력이 가능한 것
    }

# 4) 추상화? What is Abstraction?
# 객체지향 프로그래밍에 대해 이해하고 객체와 클래스를 설계하여 프로그래밍할 수 있다 
# 복잡한 현실세계를 그대로 반영하기에는 너무 방대하고 복잡하기 때문에
# 객체를 설계하기 위해서는 현실세계를 프로그램의 목적에 맞게 단순화하는
# 추상화라는 기법을 적용하게 된다.
        
# 추상화란? : 공통 부분 추출, 비공통 부분을 제거한다는 의미를 가지며
# 추상화의 목적은 유연성을 확보하기 위함이다.
# 유연성 확보는 여러 곳에 적용될 수 있는 유연한 객체를 의미하며,
# 재사용성이 높아질 수 있게 한다는 의미이다.
# 객체의 재사용성이 증가하면 중복 작성되는 코드를 줄일 수 있으며,
# 오류 발생 가능성을 감소시키고 유지보수성을 증가시킨다.

# 추상화 기법을 이용해 객체를 설계하고 이를 바탕으로 클래스를 작성한 뒤
# 객체를 상효작용 시켜보자

# 프로그램 개요 : 카레이서가 자동차를 운전하는 프로그램
# 시스템 요구사항 : 1. 카레이서는 시동걸기, 엑셀레이터 밟기, 브레이크 밟기, 시동 끄기를 할 수 있다.
# 2. 자동차는 시동걸기, 앞으로 가기, 멈추기, 시동 끄기를 할 수 있다.
# 3. 자동차는 처음에 멈춘 상태로 대기하고 있는다.
# ...
# 8. 카레이서가 시동을 끄면 더 이상 자동차는 움직이지 않는다.
# 9. 자동차가 달리는 중이라면 시동을 끌 수 없다
        
# 프로그램 설계하기
# 1. 필요한 객체object 도출 - player(사용자), car-racer, car
# 2. 객체 간 상호작용
# - 카레이서가 수신 가능한 메시지(카레이서가 해야하는 일)
# 1) 시동 걸기 2)엑셀러레이터를 밟아라 3)브레이크를 밟아라 4) 시동 꺼라
 
# - 자동차가 수신할 수 있는 메시지(자동차가 해야하는 일)
# 1) 시동 걸기 2)앞으로 가라 3)멈춰라 4)시동을 꺼라*/

# 5) Constructor생성자와 생성자 사용목적에 대해 이해할 수 있다.
package com.ohgiraffers.section04.constructor;
public class User {
    private String id;
    private String pwd;
    private String name;
    private java.util.Date enrollDate;
    //필드field로 다른 클래스 자료형도 사용가능

    /*생성자의 작성 위치
    *  작성 위치는 문법상으로는 클래스 내부에 작성하면 되지만,
    *  통상적으로 필드 선언부와 메소드 선언부 사이에 작성하는 것이 관례이다.
    *
    * 생성자의 사용목적
    * 1.인스턴스 생성 시점에 수행할 명령이 있는 경우 사용한다.
    * 2. 매개변수 있는 생성자의 경우 매개변수로 전달받은 값으로 필드를 초기화하며
    * 인스턴스를 생성할 목적으로 주로 사용된다.
    * 3. 작성한 생성자 외에는 인스턴스를 생성하는 방법을 제공하지 않는다는 의미를 가진다.
    *     따라서, 인스턴스를 생성하는 방법을 제한하기 위한 용도로 사용할 수도 있다. (초기값 전달 강제화)*/

    /*생성자 작성 방법 
    * [표현식]
    * 접근제한자 클래스명(매개변수) {
    *       인스턴스 생성 시점에 수행할 명령 기술(주로 필드 초기화)
    *       this.필드명 = 매개변수;
    * //설정자setter 여러 개의 기능을 한 번의 호출로 수행할 수 있다
    * } */

    /*생성자 작성 시 주의할 점
    * 1. 생성자 메소드는 반드시 클래스의 이름과 동일해야 한다. (대/소문자까지 같아야함)
    * 2. 생성자 메소드는 반환형을 작성하지 않는다.
    * (작성하는 경우 생성자가 아닌 메소드로 인식한다.)*/

    /*1.기본 생성자*/
    public User() {
        //수행할 내용이 아무 것도 존재하지 않는다.
        System.out.println("User 클래스의 기본 생성자 호출함...");
    }

    //동일한 이름의 생성자 혹은 메소드를 한 클래스 안에서 작성하는 것은 불가능하다.
    //public User() {} // error : User()is already defined

    /*2.매개변수 있는 생성자
    * 초기화할 필드가 여러개인 경우, 초기화하고 싶은 필드의 갯수별로
    * 생성자를 여러 개 준비해둘 수 있다.
    * id, pwd, name의 초기화를 담당할 생성자*/
    public User(String id, String pwd, String name) {
        //매개변수 있는 생성자의 주 목적은 인스턴스 생성 시점에
        //매개변수 전달 받은 값을 이용해 필드를 초기화한다.
        this.id = id;
        this.pwd = pwd;
        this.name = name;

        System.out.println("User 클래스의 id, pwd, name을 초기화하는 생성자 호출함...");
    }

    /*3.id, pwd, name, enrollDate의 초기화를 담당할 생성자
    (모든 필드를 초기화하는 생성자)*/
    public User(String id, String pwd, String name, java.util.Date enrollDate) {
        //매개변수로 전달받은 값을 이용해 모든 필드를 초기화한다.
        /*3-1. 각 필드에 접근하여 초기화
        this.id = id;
        this.pwd = pwd;
        this.name = name;
        this.enrollDate = enrollDate;
        3-1 방법 혹은 3-2 방법을 쓰면 된다.*/

        /*3-2. 사전에 작성되어 있는 다른 생성자 함수를 이용하여 초기화
        this() : 동일 클래스 내에 작성한 다른 생성자 메소드를 호출하는 구문.
        가장 첫 줄에 선언해야 한다.*/
        this(id, pwd, name); //2.에서 작성했던 것 이용 (50-52번째 줄)
        //미리 작성한 세 개의 필드를 초기화하는 생성자로 매개변수로 받은 값을 전달

        this.enrollDate = enrollDate;

        System.out.println("User 클래스의 기본 생성자 호출함...");
    }
    public String getInformation() {

        return "User [" +
                "id=" + this.id + ", " +
                "pwd=" + this.pwd + ", " +
                "name=" + this.name + ", " +
                "enrollDate=" + this.enrollDate + "]";
    }
}
package com.ohgiraffers.section04.constructor;

public class Application {

    public static void main(String[] args) {
        /* 생성자 함수가 무엇인지 이해하고 선언 및 호출할 수 있다. */
        /* 지금까지 우리가 객체를 생성했던 코드를 다시 한 번 살펴 볼 것이다.
         *  클래스명 레퍼런스변수명 = new 클래스명(); 이렇게 객체를 생성했다.
         *  하지만 new 뒤에 클래스명은 사실 생성자라 불리는 메소드를 호출하는 구문이다.
         *  정확히 말하자면 클래스명 레퍼런스 변수명 = new 생성자(); 라고 표현한다.
         * */

        /* 생성자란?
         *  인스턴스를 생성할 때 초기 수행할 명령이 있는 경우
         *  미리 작성해두고, 인스턴스를 생성할 때 호출된다.
         *  생성자 함수에 매개변수가 없는 생성자를 기본생성자(default constructor)라고 하며,
         *  기본생성자는 compiler에 의해 자동으로 추가되기 때문에
         *  지금까지 명시적으로 작성하지 않고 사용할 수 있었다.
         *
         *  기본생성자를 이용해 인스턴스를 생성하게 되면
         *  자바에서는 자료형별 초기값을 이용해 필드를 초기화 한다.
         *  필드의 초기값을 사용자가 원하는대로 설정하고 싶을 경우
         *  생성자의 호출 시 인자로 값을 전달하여 호출할 수 있다.
         *  이러한 인자를 받아 필드를 초기화 할 목적의 생성자를 매개변수 있는 생성자라고 한다.
         *  하지만 매개변수 있는 생성자가 한 개라도 존재하는 경우
         *  compiler는 기본 생성자를 자동으로 추가해주지 않는다.
         *  매개변수 있는 생성자는 주로 인스턴스 생성 시점에
         *  필드의 값을 사용자가 원하는 대로 초기화 할 목적으로 사용한다.
         * */

        /* 1. 기본생성자 호출하여 인스턴스 생성 후 필드값 출력 */
//        User user1 = new User();
//        System.out.println(user1.getInformation());

        /* 2. id, pwd, name을 매개변수로 전달 받을 생성자를 호출하여 인스턴스 생성 후 필드 값 출력 */
//        User user2 = new User("user01", "pass01", "홍길동");
//        System.out.println(user2.getInformation());
        //영상 보기

        /* 3. 모든 필드를 초기화하는 생성자를 호풀하여 인스턴스 생성 후 필드값 출력 */
        User user3 = new User("user02", "pass02", "이순신", new java.util.Date());
        System.out.println(user3.getInformation());
        /* User 클래스의 id, pwd, name을 초기화하는 생성자 호출함...
        User 클래스의 기본 생성자 호출함...
        User [id=user02, pwd=pass02, name=이순신, enrollDate=Fri May 02 18:03:57 KST 2025] */
    }
}
package com.ohgiraffers.section04.dto;

public class Application {
    public static void main(String[] args) {
        /*생성자Constructor를 이용한 초기화와
        * 설정자를 이용한 초기화의 장단점을 이해할 수 있다
        * 1. 생성자를 이용한 초기화
        * 장점 : setter 메소드를 여러 번 호출해서 사용하지 않고
        * 단 한 번의 호출로 인스턴스를 생성 및 초기화할 수 있다.
        * 단점 : 필드를 초기화할 매개변수의 갯수를 경우의 수 별로
        * 모두 만들어둬야 한다.
        * 호출 시 인자가 많아지는 경우 어떤 값이 어떤 필드를 의미하는지
        * 한 눈에 보기 힘들다.
        *
        * 2. 설정자setter를 이용한 초기화
        * 장점: 필드를 초기화하는 각각의 값들이 어떤 필드를 초기화하는지
        * 명확하게 볼 수 있다.
        * 단점: 하나의 인스턴스를 생성할 때 한 번의 호출로 끝나지 않는다.*/

        /* 1. 생성자를 이용한 초기화 */
        UserDTO user1 = new UserDTO("ohgiraffers", "ohgiraffers", "ohgiraffers", new java.util.Date());
        System.out.println(user1.getInformation());
        // UserDTO [id=ohgiraffers, pwd=ohgiraffers, name=ohgiraffers, enrollDate=Fri May 02 14:01:01 KST 2025]

        /* 2. 기본 생성자와 설정자를 이용한 초기화 */
        UserDTO user2 = new UserDTO();
        user2.setId("ohgiraffers");
        user2.setPwd("ohgiraffers");
        user2.setName("ohgiraffers");
        user2.setEnrollDate(new java.util.Date());

        System.out.println(user2.getEnrollDate());
        // Fri May 02 14:01:02 KST 2025
    }
}

package com.ohgiraffers.section04.dto;

public class UserDTO {

    private String id;
    private String pwd;
    private String name;
    private java.util.Date enrollDate;

    public UserDTO() {}

    public UserDTO(String id, String pwd, String name, java.util.Date enrollDate) {
        this.id = id;
        this.pwd = pwd;
        this.name = name;
        this.enrollDate = enrollDate;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEnrollDate(java.util.Date enrollDate) {
        this.enrollDate = enrollDate;
    }

    public String getId() {
        return id;
    }

    public String getPwd() {
        return pwd;
    }

    public String getName() {
        return name;
    }

    public java.util.Date getEnrollDate() {
        return enrollDate;
    }

    // 모든 필드의 값을 하나의 문자열로 반환하는 메소드로 필드값 확인용으로 많이 사용한다.
    public String getInformation() {
        return "UserDTO [id=" + this.id + ", pwd=" + this.pwd + ", name=" + this.name + ", enrollDate=" + this.enrollDate + "]";
    }
}


# Object-Oriented Programming
package com.ohgiraffers.ObjectOrientedProgramming0502_2;

import java.util.Scanner;

public class FindingMyCat {
    public static void main(String[] args) {
        /* 객체지향 프로그래밍에 대해 이해하고
         * 객체와 클래스를 설계하여 프로그래밍할 수 있다*/

        /*추상화란?
         * 공통 부분 추출, 비공통 부분을 제거한다는 의미를 가지며
         * 추상화의 목적은 유연성을 확보하기 위함이다.
         * 유연성 확보는 여러 곳에 적용될 수 있는 유연한 객체를 의미하며,
         * 재사용성이 높아질 수 있게 한다는 의미이다.
         * 객체의 재사용성이 증가하면 중복 작성되는 코드를 줄일 수 있으며,
         * 오류 발생 가능성을 감소시키고 유지보수성을 증가시킨다.*/

        /* 추상화 기법을 이용해 객체를 설계하고
         * 이를 바탕으로 클래스를 작성한 뒤
         * 객체를 상효작용 시켜보자
         *
         * 프로그램 개요 : 고양이 주인(drone controller)이 드론을 움직여 고양이를 찾는 프로그램
         * 시스템 요구사항 : 1. 고양이 주인은 드론 전원키기, 앞으로 가도록 작동시키기, 멈추고 고양이 찿기, 전원 끄기를 할 수 있다.
         * 2. 드론은 전원키기, 앞으로 가기, 멈추고 확인하기, 전원 끄기를 할 수 있다.
         * 3. 드론은 처음에 멈춘 상태로 대기하고 있는다.
         * 4. drone controller는 드론 전원을 먼저 켠다. 이미 전원이 켜져있다면 다시 킬 수 없다.
         * 5. controller가 앞으로 가는 버튼을 누르면 드론은 (전원이 켜진 경우) 10m씩 증가하며 앞으로 나간다.
         * 6. 고양이를 찾았는데도 더 앞으로 나갔을 경우에는 고양이를 찾았으니 출발지로 복귀하라는 문구를 출력한다.
         * 7. drone은 앞으로 나간 후 고양이가 보이지 않으면 다시 10m를 돌아와 카메라로 고양이가 있는지 확인한다.
         * 8. 드론이 아직 10m도 앞으로 나가지 않았다면 출발지에 머물러있는 상태라고 안내한다.
         * 9. controller가 전원을 끄면 드론은 더 이상 움직이지 않는다.
         * 10. 드론이 출발지로 돌아오지 않았다면 전원을 끌 수 없다*/

        /*프로그램 설계하기
         * 1. 필요한 객체object 도출 - player(사용자), droneController, drone
         * 2. 객체 간 상호작용
         * - droneController가 수신 가능한 메시지(드론 콘트롤러가 해야하는 일)
         * 1) 전원 켜기 2)드론 앞으로 보내기 3)돌아가서 고양이 다시 찾아보기 4) 전원 끄기
         *
         * - 드론이 수신할 수 있는 메시지(드론이 해야하는 일)
         * 1) 시동 걸기 2)앞으로 가라 3)멈춰라 4)(출발지로 돌아온 후)전원 꺼라*/

        FMC_droneController controller = new FMC_droneController();
        Scanner sc = new Scanner(System.in);

        while(true) {
            System.out.println("========고양이를 찾아요==========");
            System.out.println("1.전원 켜기");
            System.out.println("2.앞으로");
            System.out.println("3.다시 찾아보자");
            System.out.println("4.전원 끄기");
            System.out.println("9.프로그램 종료");
            System.out.print("메뉴 선택 : ");
            int no = sc.nextInt();

            switch (no) {
                case 1: controller.powerOn(); break;
                case 2: controller.pushButton(); break;
                case 3: controller.cameraFind(); break;
                case 4: controller.turnOff(); break;
                case 9:
                    System.out.println("프로그램을 종료합니다."); return;
                default:
                    System.out.println("잘못된 번호를 선택했습니다."); break;
            }
        }
    }
}

# Method of Drone
package com.ohgiraffers.ObjectOrientedProgramming0502_2;

public class FMC_Drone {
      private boolean isOn; //초기에는 시동이 꺼진 false상태이다
      private int location;
       //캡슐화 기법을 적용했다
      public void powerOn() {
          if(isOn) {
              System.out.println("이미 전원이 켜져있습니다.");
          } else {
              this.isOn = true;
              System.out.println("전원이 켜졌습니다. 이제 고양이를 찾을 준비가 되었습니다.");
          }
      }
      public void goDrone() {
         if(isOn) {
             System.out.println("드론이 앞으로 움직입니다.");
             this.location += 10;
             System.out.println("현재 드론의 위치는 출발지로부터 " + this.location + "m 앞입니다.");

             if(location == 40) {
                 System.out.println("고양이를 찾았습니다");
             }
             if(location > 40) {
                 System.out.println("고양이를 찾았으니 출발지로 돌아옵시다.");
             }
         } else{
             System.out.println("드론 전원을 키지 않았습니다. 전원을 키고 상공 2m까지 띄워주세요");
         }
      }

      public void turnbackFind() {
          if(isOn) {
              if(this.location > 0) { //location이 0 이상이라면
                  this.location = location - 10;
                  System.out.println("고양이가 안 보입니다. 돌아가서 다시 찾아봅시다.");
              } else {
                  System.out.println("드론이 아직 출발지 상공에 머물러있습니다.");
              }
          } else{
              System.out.println("아직 전원을 안 키셨군요. 고양이가 그새 더 멀리 갈지도 몰라요.");
          }
      }

      public void turnOff() {
          if(isOn) {
              if(location > 0) {
                  System.out.println("드론이 아직 출발지로 돌아오지 않았습니다.");
              } else {
                  this.isOn= false;
                  System.out.println("전원을 끕니다. 이제 위치를 알았으니 어서 고양이를 데리러 갑시다");
              }
          } else {
              System.out.println("이미 전원이 꺼져있습니다.");
          }
      }
}

# Connecting with dronecontroller
package com.ohgiraffers.ObjectOrientedProgramming0502_2;

import com.ohgiraffers.section03.abstraction.Car;

public class FMC_droneController {
    private final FMC_Drone drone = new FMC_Drone();

    public void powerOn() {
        drone.powerOn();
    }
    public void pushButton(){
        drone.goDrone();
    }
    public void cameraFind() {
        drone.turnbackFind();
    }
    public void turnOff() {
        drone.turnOff();
    }
}

# Incomplete practice problems (related with multipe array and copy of array)
package com.ohgiraffers.practiceArray0502;

public class oliveU {
    public static void main(String[] args) {
        String[] originalBrand = {"얘!뛰어", "닥터자란다", "누리든"};

        String[] o_skinCare = originalBrand;
//        String[][] specializing;
//        specializing = new String[3][];
//        specializing[1] = originalBrand;
//
//        for(int i = 0; i < specializing[1].length; i++) {
//            System.out.print(specializing[1][i] + " ");
//        }
//        System.out.println();

        System.out.println("원본 페이지 브랜드 : " + originalBrand.hashCode());
        System.out.println("기존 브랜드 새 홈페이지에 복사 : " +o_skinCare.hashCode());

//        for(int i = 0; i < originalBrand.length; i++) {
//            System.out.print(originalBrand[i] + " ");
//        }
//        System.out.println();  //얘!뛰어 닥터자란다 누리든
//
//        for(int i = 0; i <o_skinCare.length; i++) {
//            System.out.print(o_skinCare[i] + " ");
//        }
//        System.out.println();  //얘!뛰어 닥터자란다 누리든

        o_skinCare[2] = "수달";

        for(int i = 0; i < originalBrand.length; i++) {
            System.out.print(originalBrand[i] + " ");
        }
        System.out.println();  //얘!뛰어 닥터자란다 수달

        for(int i = 0; i <o_skinCare.length; i++) {
            System.out.print(o_skinCare[i] + " ");
        }
        System.out.println();  //얘!뛰어 닥터자란다 수달
    }
}
