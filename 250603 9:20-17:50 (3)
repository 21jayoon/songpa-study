# 오늘 배운 내용 Today's lecture : Spring

# Spring이란?
# 자바의 웹 프레임 워크. 자바언어를 기반으로 사용 (자바로 다양한 어플리케이션을 만들기 위한 프로그래밍 툴)
# Spring 사용하면 중복코드의 사용률을 줄여주고 비지니스 로직을 더 간단하게 하는 것이 가능해진다

# 프레임워크(Frame Work)란?
# 소프트웨어 개발에 있어서 하나의 뼈대의 역할을 하는 것.(자주 쓰이는 기능을 한 곳에 모아 놓은 클래스들의 집합.)
# 프레임워크 = 도구상자
# 출처 : 강지영(2022, 7월 23일). Java 기초 문법, Spring 기초 사용법. https://velog.io/@piczo/Java-%EA%B8%B0%EC%B4%88-%EB%AC%B8%EB%B2%95-Spring-%EA%B8%B0%EC%B4%88-%EC%82%AC%EC%9A%A9%EB%B2%95

# Container? : 컨테이너는 보통 객체Instance의 생명주기를 관리, 생성된 인스턴스들에게 추가적인 기능을 제공하도록 하는 것
# 개발자가 아닌 컨테이너가 인스턴스 생명주기(인스턴스 생성~소멸) 관리를 대신 해준다.
# 객체관리 주체가 프레임워크(Container)가 되기 때문에 개발자는 로직에 집중할 수 있는 장점이 있다.

# 스프링 프레임워크도 객체를 생성 & 관리 & 책임지고 의존성을 관리해주는 컨테이너가 있는데,
# 그것이 바로 IoC 컨테이너(=스프링 컨테이너)다.
# 출처: https://dev-coco.tistory.com/80 [슬기로운 개발생활:티스토리]

# 다음 코드에서 IOC container의 역할 : 
# Spring IoC 컨테이너(ApplicationContext)는
# Bean(객체)의 생성, 설정, 생명주기 관리 등을 담당합니다.
# 개발자가 직접 new 키워드로 객체를 생성하지 않고,
# XML(혹은 어노테이션) 설정에 따라 Spring이 객체를 만들어 관리해줍니다.


# CHAPTER03 - DI-annotation
# org.section01.autowired.subsection01.field - Application
package org.section01.autowired.subsection01.field;

import org.section01.common.BookDTO;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.util.List;

public class Application {
    public static void main(String[] args) {
        /* AnnotationConfigApplicationContext 생성자에 패키지명을 전달하여
         * 해당 패키지 내에서 @Component, @Service, @Repository 등의 어노테이션이 붙은
         * 컴포넌트를 자동으로 스캔하고 Spring 컨테이너에 Bean으로 등록한다.
         * 즉, 컴포넌트 스캔 기능을 활성화시키는 방법 중 하나이다. */
        ApplicationContext context =
                /*component scan 기능을 활성화시키는 또 다른 방법이다.*/
                new AnnotationConfigApplicationContext("org.section01");

        /* Spring 컨테이너로부터 "bookServiceField"라는 이름의 Bean을
         * BookService 타입으로 가져온다.
         * 여기서 "bookServiceField"는 BookService 구현체 Bean의 이름이며,
         * 필드 주입(@Autowired)을 사용한 버전임을 나타낸다. */
        BookService bookService =context.getBean("bookServiceField", BookService.class);

        // 전체 도서 목록 조회 후 출력 확인
        List<BookDTO> books = bookService.selectAllBooks();
        for(BookDTO book : books){
            System.out.println(book);
        }
        /* BookService를 통해 전체 도서 목록을 조회한다.
         * 반환된 도서 리스트를 반복문으로 순회하며 각각의 도서 정보를 출력한다.
         * BookDTO{bookCode=1, isbn=123456, jemok='자바의 정석', jeoja='나는야', chulpansa='최고출판', chulpanDate=Wed Jun 04 03:59:06 KST 2025}
         * BookDTO{bookCode=2, isbn=345678, jemok='NyamNyam', jeoja='ohGod', chulpansa='PUB', chulpanDate=Wed Jun 04 03:59:06 KST 2025}        
         * 여기까지가 6월 3일 강의 내용*/
    }
    // 면접질문 : 생성자 주입 해야하는 이유는 무엇인가?
    //여러가지 이유... 필드 주입은 단일 책임의 원칙에 어긋나기 때문에 생성자 주입을 써야한다. ...
}


# org.section01.autowired.subsection01.field - BookService
package org.section01.autowired.subsection01.field;

import org.section01.common.BookDAO;
import org.section01.common.BookDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

//@Service도 컴포넌트 세분화 annotation 중 하나
//Spring chap01-ioc-container section03.annotationconfig -ContextConfiguration 주석을 참고하시오
@Service("bookServiceField")
// = BookService 클래스를 Spring 컨테이너에 'bookServiceField'라는 이름의 Service Bean으로 등록한다.
public class BookService {
    @Autowired
    private BookDAO bookDAO;
    /* @Autowired를 쓰면 BookDAO 타입의 Bean 객체를 bookDAO 필드에 자동으로 주입해준다.
     *  = Spring이 컴포넌트 스캔을 통해 BookDAO의 구현체인 BookDAOImpl를 찾아
     *    이 필드(bookDAO)에 자동으로 연결(Auto-wiring)한다. */

    // 전체 도서 목록을 조회하여 반환하는 메소드
    public List<BookDTO> selectAllBooks(){
        return bookDAO.selectBookList();
    }

    // sequence(도서번호)로 특정 도서를 조회하여 반환하는 메소드
    public BookDTO selectBookBySequence(int sequence) {
        return bookDAO.selectOneBook(sequence);
    }
}


# org.section01.common -BookDAO
package org.section01.common;

import java.util.List;

public interface BookDAO {
    /*도서 목록 전체 조회*/
    List<BookDTO> selectBookList();

    /* 도서 번호로 도서 조회*/
    BookDTO selectOneBook(int sequence);
}


# org.section01.common -BookDAOlmpl
package org.section01.common;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/* @Repository
 * - 이 클래스가 데이터 액세스 계층(DAO) 역할을 한다는 것을 Spring에게 알림.
 * - "bookDAO"라는 이름으로 스프링 컨테이너에 Bean으로 등록된다.*/
@Repository("bookDAO")
public class BookDAOImpl implements BookDAO {
    // DAO를 실제 구현한 클래스를 BookDAOImpl에 만든다.
    /* 실제 데이터베이스 대신 도서 정보를 저장할 임시 Map 컬렉션.
     * Key는 도서 일련번호(sequence), Value는 도서 정보를 담은 BookDTO 객체. */
    private final Map<Integer, BookDTO> bookList;

    /* 생성자 public BookDAOImpl() {}에서 도서 목록을 초기화한다.
     * - 실제 DB 연동 없이 하드코딩된 도서 데이터를 저장 */
    public BookDAOImpl() {
        bookList = new HashMap<>();
        bookList.put(1, new BookDTO(1,123456, "자바의 정석", "나는야", "최고출판", new java.util.Date()));
        bookList.put(2, new BookDTO(2,345678, "NyamNyam", "ohGod", "PUB", new java.util.Date()));
    }

    // 전체 도서 목록을 조회하여 List 형태로 반환한다.
    @Override
    public List<BookDTO> selectBookList() {
        return new ArrayList<>(bookList.values());
    }

    //sequence를 기반으로 특정 도서 하나를 조회하여 반환한다.
    @Override
    public BookDTO selectOneBook(int sequence) {
        return bookList.get(sequence);
    }

    /* [왜 BookDAOImpl 같은 Impl 클래스가 필요한가?]
     * 1. 역할 분리
     *    - BookDAO 인터페이스는 '무엇을 할지(기능의 정의)'만 선언하고,
     *    - BookDAOImpl은 '어떻게 할지(구현)'를 제공한다.
     *
     * 2. 유연한 확장과 유지보수
     *    - 나중에 JDBC, JPA, MyBatis 등 다른 기술로 구현체를 바꿔도
     *      인터페이스는 그대로 두고 구현체만 교체하면 된다.
     *
     * 3. 테스트 용이성
     *    - 테스트 환경에서는 BookDAOImpl 대신 가짜(Mock) 구현체를 만들어
     *      쉽게 단위 테스트를 할 수 있다.
     *
     * 4. DI(의존성 주입) 기반 프로그래밍
     *    - Spring이 인터페이스(BookDAO)를 기준으로 구현체(BookDAOImpl)를 자동 주입해줌으로써
     *      느슨한 결합을 구현할 수 있다. (=강한 결합을 피할 수 있다)
     */
}


# org.section01.common -BookDTO
package org.section01.common;

import java.util.Date;

public class BookDTO {
    private int sequence;
    private int isbn;
    private String title;
    private String author;
    private String publisher;
    private Date createDate;

    public BookDTO() {}

    public BookDTO(int sequence, int isbn, String title, String author, String publisher, Date createDate) {
        this.sequence = sequence;
        this.isbn = isbn;
        this.title = title;
        this.author = author;
        this.publisher = publisher;
        this.createDate = createDate;
    }

    public int getSequence() {
        return sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    public int getIsbn() {
        return isbn;
    }

    public void setIsbn(int isbn) {
        this.isbn = isbn;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getPublisher() {
        return publisher;
    }

    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    public Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @Override
    public String toString() {
        return "BookDTO{" +
                "도서 코드=" + sequence +
                ", isbn=" + isbn +
                ", 제목='" + title + '\'' +
                ", 저자='" + author + '\'' +
                ", 출판사='" + publisher + '\'' +
                ", 출판일=" + createDate +
                '}';
    }
}
